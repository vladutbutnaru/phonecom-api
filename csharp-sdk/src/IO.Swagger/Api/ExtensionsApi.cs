/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExtensionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an individual extension
        /// </summary>
        /// <remarks>
        /// This service shows how to create a virtual extension.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">Account Extensions Data (optional)</param>
        /// <returns>ExtensionFull</returns>
        ExtensionFull CreateAccountExtension (int? accountId, CreateExtensionParams data = null);

        /// <summary>
        /// Create an individual extension
        /// </summary>
        /// <remarks>
        /// This service shows how to create a virtual extension.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">Account Extensions Data (optional)</param>
        /// <returns>ApiResponse of ExtensionFull</returns>
        ApiResponse<ExtensionFull> CreateAccountExtensionWithHttpInfo (int? accountId, CreateExtensionParams data = null);
        /// <summary>
        /// Show details of an individual extension
        /// </summary>
        /// <remarks>
        /// This service shows the details of an individual Extension.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="extensionId">Extension ID</param>
        /// <returns>ExtensionFull</returns>
        ExtensionFull GetAccountExtension (int? accountId, int? extensionId);

        /// <summary>
        /// Show details of an individual extension
        /// </summary>
        /// <remarks>
        /// This service shows the details of an individual Extension.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="extensionId">Extension ID</param>
        /// <returns>ApiResponse of ExtensionFull</returns>
        ApiResponse<ExtensionFull> GetAccountExtensionWithHttpInfo (int? accountId, int? extensionId);
        /// <summary>
        /// Get a list of extensions visible to the authenticated user or client
        /// </summary>
        /// <remarks>
        /// This service lists the visible extensions on a given account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersExtension">Extension filter (optional)</param>
        /// <param name="filtersName">Name filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortExtension">Extension sorting (optional)</param>
        /// <param name="sortName">Name sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ListExtensionsFull</returns>
        ListExtensionsFull ListAccountExtensions (int? accountId, List<string> filtersId = null, List<string> filtersExtension = null, List<string> filtersName = null, string sortId = null, string sortExtension = null, string sortName = null, int? limit = null, int? offset = null, string fields = null);

        /// <summary>
        /// Get a list of extensions visible to the authenticated user or client
        /// </summary>
        /// <remarks>
        /// This service lists the visible extensions on a given account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersExtension">Extension filter (optional)</param>
        /// <param name="filtersName">Name filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortExtension">Extension sorting (optional)</param>
        /// <param name="sortName">Name sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ApiResponse of ListExtensionsFull</returns>
        ApiResponse<ListExtensionsFull> ListAccountExtensionsWithHttpInfo (int? accountId, List<string> filtersId = null, List<string> filtersExtension = null, List<string> filtersName = null, string sortId = null, string sortExtension = null, string sortName = null, int? limit = null, int? offset = null, string fields = null);
        /// <summary>
        /// Replace an individual extension
        /// </summary>
        /// <remarks>
        /// This service shows how to update an individual extension.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="extensionId">Extension ID</param>
        /// <param name="data">Account Extensions Data (optional)</param>
        /// <returns>ExtensionFull</returns>
        ExtensionFull ReplaceAccountExtension (int? accountId, int? extensionId, ReplaceExtensionParams data = null);

        /// <summary>
        /// Replace an individual extension
        /// </summary>
        /// <remarks>
        /// This service shows how to update an individual extension.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="extensionId">Extension ID</param>
        /// <param name="data">Account Extensions Data (optional)</param>
        /// <returns>ApiResponse of ExtensionFull</returns>
        ApiResponse<ExtensionFull> ReplaceAccountExtensionWithHttpInfo (int? accountId, int? extensionId, ReplaceExtensionParams data = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create an individual extension
        /// </summary>
        /// <remarks>
        /// This service shows how to create a virtual extension.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">Account Extensions Data (optional)</param>
        /// <returns>Task of ExtensionFull</returns>
        System.Threading.Tasks.Task<ExtensionFull> CreateAccountExtensionAsync (int? accountId, CreateExtensionParams data = null);

        /// <summary>
        /// Create an individual extension
        /// </summary>
        /// <remarks>
        /// This service shows how to create a virtual extension.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">Account Extensions Data (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionFull)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionFull>> CreateAccountExtensionAsyncWithHttpInfo (int? accountId, CreateExtensionParams data = null);
        /// <summary>
        /// Show details of an individual extension
        /// </summary>
        /// <remarks>
        /// This service shows the details of an individual Extension.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="extensionId">Extension ID</param>
        /// <returns>Task of ExtensionFull</returns>
        System.Threading.Tasks.Task<ExtensionFull> GetAccountExtensionAsync (int? accountId, int? extensionId);

        /// <summary>
        /// Show details of an individual extension
        /// </summary>
        /// <remarks>
        /// This service shows the details of an individual Extension.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="extensionId">Extension ID</param>
        /// <returns>Task of ApiResponse (ExtensionFull)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionFull>> GetAccountExtensionAsyncWithHttpInfo (int? accountId, int? extensionId);
        /// <summary>
        /// Get a list of extensions visible to the authenticated user or client
        /// </summary>
        /// <remarks>
        /// This service lists the visible extensions on a given account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersExtension">Extension filter (optional)</param>
        /// <param name="filtersName">Name filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortExtension">Extension sorting (optional)</param>
        /// <param name="sortName">Name sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ListExtensionsFull</returns>
        System.Threading.Tasks.Task<ListExtensionsFull> ListAccountExtensionsAsync (int? accountId, List<string> filtersId = null, List<string> filtersExtension = null, List<string> filtersName = null, string sortId = null, string sortExtension = null, string sortName = null, int? limit = null, int? offset = null, string fields = null);

        /// <summary>
        /// Get a list of extensions visible to the authenticated user or client
        /// </summary>
        /// <remarks>
        /// This service lists the visible extensions on a given account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersExtension">Extension filter (optional)</param>
        /// <param name="filtersName">Name filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortExtension">Extension sorting (optional)</param>
        /// <param name="sortName">Name sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ApiResponse (ListExtensionsFull)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListExtensionsFull>> ListAccountExtensionsAsyncWithHttpInfo (int? accountId, List<string> filtersId = null, List<string> filtersExtension = null, List<string> filtersName = null, string sortId = null, string sortExtension = null, string sortName = null, int? limit = null, int? offset = null, string fields = null);
        /// <summary>
        /// Replace an individual extension
        /// </summary>
        /// <remarks>
        /// This service shows how to update an individual extension.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="extensionId">Extension ID</param>
        /// <param name="data">Account Extensions Data (optional)</param>
        /// <returns>Task of ExtensionFull</returns>
        System.Threading.Tasks.Task<ExtensionFull> ReplaceAccountExtensionAsync (int? accountId, int? extensionId, ReplaceExtensionParams data = null);

        /// <summary>
        /// Replace an individual extension
        /// </summary>
        /// <remarks>
        /// This service shows how to update an individual extension.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="extensionId">Extension ID</param>
        /// <param name="data">Account Extensions Data (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionFull)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionFull>> ReplaceAccountExtensionAsyncWithHttpInfo (int? accountId, int? extensionId, ReplaceExtensionParams data = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ExtensionsApi : IExtensionsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ExtensionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExtensionsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExtensionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ExtensionsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create an individual extension This service shows how to create a virtual extension.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">Account Extensions Data (optional)</param>
        /// <returns>ExtensionFull</returns>
        public ExtensionFull CreateAccountExtension (int? accountId, CreateExtensionParams data = null)
        {
             ApiResponse<ExtensionFull> localVarResponse = CreateAccountExtensionWithHttpInfo(accountId, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an individual extension This service shows how to create a virtual extension.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">Account Extensions Data (optional)</param>
        /// <returns>ApiResponse of ExtensionFull</returns>
        public ApiResponse< ExtensionFull > CreateAccountExtensionWithHttpInfo (int? accountId, CreateExtensionParams data = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExtensionsApi->CreateAccountExtension");

            var localVarPath = "/accounts/{account_id}/extensions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountExtension", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionFull)));
            
        }

        /// <summary>
        /// Create an individual extension This service shows how to create a virtual extension.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">Account Extensions Data (optional)</param>
        /// <returns>Task of ExtensionFull</returns>
        public async System.Threading.Tasks.Task<ExtensionFull> CreateAccountExtensionAsync (int? accountId, CreateExtensionParams data = null)
        {
             ApiResponse<ExtensionFull> localVarResponse = await CreateAccountExtensionAsyncWithHttpInfo(accountId, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an individual extension This service shows how to create a virtual extension.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">Account Extensions Data (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionFull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionFull>> CreateAccountExtensionAsyncWithHttpInfo (int? accountId, CreateExtensionParams data = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExtensionsApi->CreateAccountExtension");

            var localVarPath = "/accounts/{account_id}/extensions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountExtension", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionFull)));
            
        }

        /// <summary>
        /// Show details of an individual extension This service shows the details of an individual Extension.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="extensionId">Extension ID</param>
        /// <returns>ExtensionFull</returns>
        public ExtensionFull GetAccountExtension (int? accountId, int? extensionId)
        {
             ApiResponse<ExtensionFull> localVarResponse = GetAccountExtensionWithHttpInfo(accountId, extensionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Show details of an individual extension This service shows the details of an individual Extension.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="extensionId">Extension ID</param>
        /// <returns>ApiResponse of ExtensionFull</returns>
        public ApiResponse< ExtensionFull > GetAccountExtensionWithHttpInfo (int? accountId, int? extensionId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExtensionsApi->GetAccountExtension");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling ExtensionsApi->GetAccountExtension");

            var localVarPath = "/accounts/{account_id}/extensions/{extension_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extension_id", Configuration.ApiClient.ParameterToString(extensionId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountExtension", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionFull)));
            
        }

        /// <summary>
        /// Show details of an individual extension This service shows the details of an individual Extension.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="extensionId">Extension ID</param>
        /// <returns>Task of ExtensionFull</returns>
        public async System.Threading.Tasks.Task<ExtensionFull> GetAccountExtensionAsync (int? accountId, int? extensionId)
        {
             ApiResponse<ExtensionFull> localVarResponse = await GetAccountExtensionAsyncWithHttpInfo(accountId, extensionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Show details of an individual extension This service shows the details of an individual Extension.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="extensionId">Extension ID</param>
        /// <returns>Task of ApiResponse (ExtensionFull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionFull>> GetAccountExtensionAsyncWithHttpInfo (int? accountId, int? extensionId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExtensionsApi->GetAccountExtension");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling ExtensionsApi->GetAccountExtension");

            var localVarPath = "/accounts/{account_id}/extensions/{extension_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extension_id", Configuration.ApiClient.ParameterToString(extensionId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountExtension", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionFull)));
            
        }

        /// <summary>
        /// Get a list of extensions visible to the authenticated user or client This service lists the visible extensions on a given account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersExtension">Extension filter (optional)</param>
        /// <param name="filtersName">Name filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortExtension">Extension sorting (optional)</param>
        /// <param name="sortName">Name sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ListExtensionsFull</returns>
        public ListExtensionsFull ListAccountExtensions (int? accountId, List<string> filtersId = null, List<string> filtersExtension = null, List<string> filtersName = null, string sortId = null, string sortExtension = null, string sortName = null, int? limit = null, int? offset = null, string fields = null)
        {
             ApiResponse<ListExtensionsFull> localVarResponse = ListAccountExtensionsWithHttpInfo(accountId, filtersId, filtersExtension, filtersName, sortId, sortExtension, sortName, limit, offset, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of extensions visible to the authenticated user or client This service lists the visible extensions on a given account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersExtension">Extension filter (optional)</param>
        /// <param name="filtersName">Name filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortExtension">Extension sorting (optional)</param>
        /// <param name="sortName">Name sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ApiResponse of ListExtensionsFull</returns>
        public ApiResponse< ListExtensionsFull > ListAccountExtensionsWithHttpInfo (int? accountId, List<string> filtersId = null, List<string> filtersExtension = null, List<string> filtersName = null, string sortId = null, string sortExtension = null, string sortName = null, int? limit = null, int? offset = null, string fields = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExtensionsApi->ListAccountExtensions");

            var localVarPath = "/accounts/{account_id}/extensions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (filtersId != null) localVarQueryParams.Add("filters[id]", Configuration.ApiClient.ParameterToString(filtersId)); // query parameter
            if (filtersExtension != null) localVarQueryParams.Add("filters[extension]", Configuration.ApiClient.ParameterToString(filtersExtension)); // query parameter
            if (filtersName != null) localVarQueryParams.Add("filters[name]", Configuration.ApiClient.ParameterToString(filtersName)); // query parameter
            if (sortId != null) localVarQueryParams.Add("sort[id]", Configuration.ApiClient.ParameterToString(sortId)); // query parameter
            if (sortExtension != null) localVarQueryParams.Add("sort[extension]", Configuration.ApiClient.ParameterToString(sortExtension)); // query parameter
            if (sortName != null) localVarQueryParams.Add("sort[name]", Configuration.ApiClient.ParameterToString(sortName)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAccountExtensions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListExtensionsFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListExtensionsFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListExtensionsFull)));
            
        }

        /// <summary>
        /// Get a list of extensions visible to the authenticated user or client This service lists the visible extensions on a given account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersExtension">Extension filter (optional)</param>
        /// <param name="filtersName">Name filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortExtension">Extension sorting (optional)</param>
        /// <param name="sortName">Name sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ListExtensionsFull</returns>
        public async System.Threading.Tasks.Task<ListExtensionsFull> ListAccountExtensionsAsync (int? accountId, List<string> filtersId = null, List<string> filtersExtension = null, List<string> filtersName = null, string sortId = null, string sortExtension = null, string sortName = null, int? limit = null, int? offset = null, string fields = null)
        {
             ApiResponse<ListExtensionsFull> localVarResponse = await ListAccountExtensionsAsyncWithHttpInfo(accountId, filtersId, filtersExtension, filtersName, sortId, sortExtension, sortName, limit, offset, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of extensions visible to the authenticated user or client This service lists the visible extensions on a given account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersExtension">Extension filter (optional)</param>
        /// <param name="filtersName">Name filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortExtension">Extension sorting (optional)</param>
        /// <param name="sortName">Name sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ApiResponse (ListExtensionsFull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListExtensionsFull>> ListAccountExtensionsAsyncWithHttpInfo (int? accountId, List<string> filtersId = null, List<string> filtersExtension = null, List<string> filtersName = null, string sortId = null, string sortExtension = null, string sortName = null, int? limit = null, int? offset = null, string fields = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExtensionsApi->ListAccountExtensions");

            var localVarPath = "/accounts/{account_id}/extensions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (filtersId != null) localVarQueryParams.Add("filters[id]", Configuration.ApiClient.ParameterToString(filtersId)); // query parameter
            if (filtersExtension != null) localVarQueryParams.Add("filters[extension]", Configuration.ApiClient.ParameterToString(filtersExtension)); // query parameter
            if (filtersName != null) localVarQueryParams.Add("filters[name]", Configuration.ApiClient.ParameterToString(filtersName)); // query parameter
            if (sortId != null) localVarQueryParams.Add("sort[id]", Configuration.ApiClient.ParameterToString(sortId)); // query parameter
            if (sortExtension != null) localVarQueryParams.Add("sort[extension]", Configuration.ApiClient.ParameterToString(sortExtension)); // query parameter
            if (sortName != null) localVarQueryParams.Add("sort[name]", Configuration.ApiClient.ParameterToString(sortName)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAccountExtensions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListExtensionsFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListExtensionsFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListExtensionsFull)));
            
        }

        /// <summary>
        /// Replace an individual extension This service shows how to update an individual extension.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="extensionId">Extension ID</param>
        /// <param name="data">Account Extensions Data (optional)</param>
        /// <returns>ExtensionFull</returns>
        public ExtensionFull ReplaceAccountExtension (int? accountId, int? extensionId, ReplaceExtensionParams data = null)
        {
             ApiResponse<ExtensionFull> localVarResponse = ReplaceAccountExtensionWithHttpInfo(accountId, extensionId, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace an individual extension This service shows how to update an individual extension.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="extensionId">Extension ID</param>
        /// <param name="data">Account Extensions Data (optional)</param>
        /// <returns>ApiResponse of ExtensionFull</returns>
        public ApiResponse< ExtensionFull > ReplaceAccountExtensionWithHttpInfo (int? accountId, int? extensionId, ReplaceExtensionParams data = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExtensionsApi->ReplaceAccountExtension");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling ExtensionsApi->ReplaceAccountExtension");

            var localVarPath = "/accounts/{account_id}/extensions/{extension_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extension_id", Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceAccountExtension", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionFull)));
            
        }

        /// <summary>
        /// Replace an individual extension This service shows how to update an individual extension.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="extensionId">Extension ID</param>
        /// <param name="data">Account Extensions Data (optional)</param>
        /// <returns>Task of ExtensionFull</returns>
        public async System.Threading.Tasks.Task<ExtensionFull> ReplaceAccountExtensionAsync (int? accountId, int? extensionId, ReplaceExtensionParams data = null)
        {
             ApiResponse<ExtensionFull> localVarResponse = await ReplaceAccountExtensionAsyncWithHttpInfo(accountId, extensionId, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace an individual extension This service shows how to update an individual extension.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="extensionId">Extension ID</param>
        /// <param name="data">Account Extensions Data (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionFull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionFull>> ReplaceAccountExtensionAsyncWithHttpInfo (int? accountId, int? extensionId, ReplaceExtensionParams data = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ExtensionsApi->ReplaceAccountExtension");
            // verify the required parameter 'extensionId' is set
            if (extensionId == null)
                throw new ApiException(400, "Missing required parameter 'extensionId' when calling ExtensionsApi->ReplaceAccountExtension");

            var localVarPath = "/accounts/{account_id}/extensions/{extension_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (extensionId != null) localVarPathParams.Add("extension_id", Configuration.ApiClient.ParameterToString(extensionId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceAccountExtension", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionFull)));
            
        }

    }
}
