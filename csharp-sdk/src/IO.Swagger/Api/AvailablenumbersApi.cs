/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAvailablenumbersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filtersPhoneNumber">Phone number filter (optional)</param>
        /// <param name="filtersCountryCode">Country Code filter (optional)</param>
        /// <param name="filtersNpa">Area Code filter (North America only) (optional)</param>
        /// <param name="filtersNxx">2nd set of 3 digits filter (North America only) (optional)</param>
        /// <param name="filtersXxxx">NANP XXXX filter (optional)</param>
        /// <param name="filtersCity">City filter (optional)</param>
        /// <param name="filtersProvince">State or Province (postal code) filter (optional)</param>
        /// <param name="filtersCountry">Country (postal code) filter (optional)</param>
        /// <param name="filtersPrice">Price filter (optional)</param>
        /// <param name="filtersCategory">Category filter (optional)</param>
        /// <param name="filtersIsTollFree">Toll-free status filter (optional)</param>
        /// <param name="sortInternal">Internal (quasi-random) sorting (optional)</param>
        /// <param name="sortPrice">Price sorting (optional)</param>
        /// <param name="sortPhoneNumber">Phone number sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ListAvailableNumbersFull</returns>
        ListAvailableNumbersFull ListAvailablePhoneNumbers (List<string> filtersPhoneNumber = null, List<string> filtersCountryCode = null, List<string> filtersNpa = null, List<string> filtersNxx = null, List<string> filtersXxxx = null, List<string> filtersCity = null, List<string> filtersProvince = null, List<string> filtersCountry = null, List<string> filtersPrice = null, List<string> filtersCategory = null, List<string> filtersIsTollFree = null, string sortInternal = null, string sortPrice = null, string sortPhoneNumber = null, int? limit = null, int? offset = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filtersPhoneNumber">Phone number filter (optional)</param>
        /// <param name="filtersCountryCode">Country Code filter (optional)</param>
        /// <param name="filtersNpa">Area Code filter (North America only) (optional)</param>
        /// <param name="filtersNxx">2nd set of 3 digits filter (North America only) (optional)</param>
        /// <param name="filtersXxxx">NANP XXXX filter (optional)</param>
        /// <param name="filtersCity">City filter (optional)</param>
        /// <param name="filtersProvince">State or Province (postal code) filter (optional)</param>
        /// <param name="filtersCountry">Country (postal code) filter (optional)</param>
        /// <param name="filtersPrice">Price filter (optional)</param>
        /// <param name="filtersCategory">Category filter (optional)</param>
        /// <param name="filtersIsTollFree">Toll-free status filter (optional)</param>
        /// <param name="sortInternal">Internal (quasi-random) sorting (optional)</param>
        /// <param name="sortPrice">Price sorting (optional)</param>
        /// <param name="sortPhoneNumber">Phone number sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ApiResponse of ListAvailableNumbersFull</returns>
        ApiResponse<ListAvailableNumbersFull> ListAvailablePhoneNumbersWithHttpInfo (List<string> filtersPhoneNumber = null, List<string> filtersCountryCode = null, List<string> filtersNpa = null, List<string> filtersNxx = null, List<string> filtersXxxx = null, List<string> filtersCity = null, List<string> filtersProvince = null, List<string> filtersCountry = null, List<string> filtersPrice = null, List<string> filtersCategory = null, List<string> filtersIsTollFree = null, string sortInternal = null, string sortPrice = null, string sortPhoneNumber = null, int? limit = null, int? offset = null, string fields = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filtersPhoneNumber">Phone number filter (optional)</param>
        /// <param name="filtersCountryCode">Country Code filter (optional)</param>
        /// <param name="filtersNpa">Area Code filter (North America only) (optional)</param>
        /// <param name="filtersNxx">2nd set of 3 digits filter (North America only) (optional)</param>
        /// <param name="filtersXxxx">NANP XXXX filter (optional)</param>
        /// <param name="filtersCity">City filter (optional)</param>
        /// <param name="filtersProvince">State or Province (postal code) filter (optional)</param>
        /// <param name="filtersCountry">Country (postal code) filter (optional)</param>
        /// <param name="filtersPrice">Price filter (optional)</param>
        /// <param name="filtersCategory">Category filter (optional)</param>
        /// <param name="filtersIsTollFree">Toll-free status filter (optional)</param>
        /// <param name="sortInternal">Internal (quasi-random) sorting (optional)</param>
        /// <param name="sortPrice">Price sorting (optional)</param>
        /// <param name="sortPhoneNumber">Phone number sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ListAvailableNumbersFull</returns>
        System.Threading.Tasks.Task<ListAvailableNumbersFull> ListAvailablePhoneNumbersAsync (List<string> filtersPhoneNumber = null, List<string> filtersCountryCode = null, List<string> filtersNpa = null, List<string> filtersNxx = null, List<string> filtersXxxx = null, List<string> filtersCity = null, List<string> filtersProvince = null, List<string> filtersCountry = null, List<string> filtersPrice = null, List<string> filtersCategory = null, List<string> filtersIsTollFree = null, string sortInternal = null, string sortPrice = null, string sortPhoneNumber = null, int? limit = null, int? offset = null, string fields = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filtersPhoneNumber">Phone number filter (optional)</param>
        /// <param name="filtersCountryCode">Country Code filter (optional)</param>
        /// <param name="filtersNpa">Area Code filter (North America only) (optional)</param>
        /// <param name="filtersNxx">2nd set of 3 digits filter (North America only) (optional)</param>
        /// <param name="filtersXxxx">NANP XXXX filter (optional)</param>
        /// <param name="filtersCity">City filter (optional)</param>
        /// <param name="filtersProvince">State or Province (postal code) filter (optional)</param>
        /// <param name="filtersCountry">Country (postal code) filter (optional)</param>
        /// <param name="filtersPrice">Price filter (optional)</param>
        /// <param name="filtersCategory">Category filter (optional)</param>
        /// <param name="filtersIsTollFree">Toll-free status filter (optional)</param>
        /// <param name="sortInternal">Internal (quasi-random) sorting (optional)</param>
        /// <param name="sortPrice">Price sorting (optional)</param>
        /// <param name="sortPhoneNumber">Phone number sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ApiResponse (ListAvailableNumbersFull)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListAvailableNumbersFull>> ListAvailablePhoneNumbersAsyncWithHttpInfo (List<string> filtersPhoneNumber = null, List<string> filtersCountryCode = null, List<string> filtersNpa = null, List<string> filtersNxx = null, List<string> filtersXxxx = null, List<string> filtersCity = null, List<string> filtersProvince = null, List<string> filtersCountry = null, List<string> filtersPrice = null, List<string> filtersCategory = null, List<string> filtersIsTollFree = null, string sortInternal = null, string sortPrice = null, string sortPhoneNumber = null, int? limit = null, int? offset = null, string fields = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AvailablenumbersApi : IAvailablenumbersApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AvailablenumbersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AvailablenumbersApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AvailablenumbersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AvailablenumbersApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filtersPhoneNumber">Phone number filter (optional)</param>
        /// <param name="filtersCountryCode">Country Code filter (optional)</param>
        /// <param name="filtersNpa">Area Code filter (North America only) (optional)</param>
        /// <param name="filtersNxx">2nd set of 3 digits filter (North America only) (optional)</param>
        /// <param name="filtersXxxx">NANP XXXX filter (optional)</param>
        /// <param name="filtersCity">City filter (optional)</param>
        /// <param name="filtersProvince">State or Province (postal code) filter (optional)</param>
        /// <param name="filtersCountry">Country (postal code) filter (optional)</param>
        /// <param name="filtersPrice">Price filter (optional)</param>
        /// <param name="filtersCategory">Category filter (optional)</param>
        /// <param name="filtersIsTollFree">Toll-free status filter (optional)</param>
        /// <param name="sortInternal">Internal (quasi-random) sorting (optional)</param>
        /// <param name="sortPrice">Price sorting (optional)</param>
        /// <param name="sortPhoneNumber">Phone number sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ListAvailableNumbersFull</returns>
        public ListAvailableNumbersFull ListAvailablePhoneNumbers (List<string> filtersPhoneNumber = null, List<string> filtersCountryCode = null, List<string> filtersNpa = null, List<string> filtersNxx = null, List<string> filtersXxxx = null, List<string> filtersCity = null, List<string> filtersProvince = null, List<string> filtersCountry = null, List<string> filtersPrice = null, List<string> filtersCategory = null, List<string> filtersIsTollFree = null, string sortInternal = null, string sortPrice = null, string sortPhoneNumber = null, int? limit = null, int? offset = null, string fields = null)
        {
             ApiResponse<ListAvailableNumbersFull> localVarResponse = ListAvailablePhoneNumbersWithHttpInfo(filtersPhoneNumber, filtersCountryCode, filtersNpa, filtersNxx, filtersXxxx, filtersCity, filtersProvince, filtersCountry, filtersPrice, filtersCategory, filtersIsTollFree, sortInternal, sortPrice, sortPhoneNumber, limit, offset, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filtersPhoneNumber">Phone number filter (optional)</param>
        /// <param name="filtersCountryCode">Country Code filter (optional)</param>
        /// <param name="filtersNpa">Area Code filter (North America only) (optional)</param>
        /// <param name="filtersNxx">2nd set of 3 digits filter (North America only) (optional)</param>
        /// <param name="filtersXxxx">NANP XXXX filter (optional)</param>
        /// <param name="filtersCity">City filter (optional)</param>
        /// <param name="filtersProvince">State or Province (postal code) filter (optional)</param>
        /// <param name="filtersCountry">Country (postal code) filter (optional)</param>
        /// <param name="filtersPrice">Price filter (optional)</param>
        /// <param name="filtersCategory">Category filter (optional)</param>
        /// <param name="filtersIsTollFree">Toll-free status filter (optional)</param>
        /// <param name="sortInternal">Internal (quasi-random) sorting (optional)</param>
        /// <param name="sortPrice">Price sorting (optional)</param>
        /// <param name="sortPhoneNumber">Phone number sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ApiResponse of ListAvailableNumbersFull</returns>
        public ApiResponse< ListAvailableNumbersFull > ListAvailablePhoneNumbersWithHttpInfo (List<string> filtersPhoneNumber = null, List<string> filtersCountryCode = null, List<string> filtersNpa = null, List<string> filtersNxx = null, List<string> filtersXxxx = null, List<string> filtersCity = null, List<string> filtersProvince = null, List<string> filtersCountry = null, List<string> filtersPrice = null, List<string> filtersCategory = null, List<string> filtersIsTollFree = null, string sortInternal = null, string sortPrice = null, string sortPhoneNumber = null, int? limit = null, int? offset = null, string fields = null)
        {

            var localVarPath = "/phone-numbers/available";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filtersPhoneNumber != null) localVarQueryParams.Add("filters[phone_number]", Configuration.ApiClient.ParameterToString(filtersPhoneNumber)); // query parameter
            if (filtersCountryCode != null) localVarQueryParams.Add("filters[country_code]", Configuration.ApiClient.ParameterToString(filtersCountryCode)); // query parameter
            if (filtersNpa != null) localVarQueryParams.Add("filters[npa]", Configuration.ApiClient.ParameterToString(filtersNpa)); // query parameter
            if (filtersNxx != null) localVarQueryParams.Add("filters[nxx]", Configuration.ApiClient.ParameterToString(filtersNxx)); // query parameter
            if (filtersXxxx != null) localVarQueryParams.Add("filters[xxxx]", Configuration.ApiClient.ParameterToString(filtersXxxx)); // query parameter
            if (filtersCity != null) localVarQueryParams.Add("filters[city]", Configuration.ApiClient.ParameterToString(filtersCity)); // query parameter
            if (filtersProvince != null) localVarQueryParams.Add("filters[province]", Configuration.ApiClient.ParameterToString(filtersProvince)); // query parameter
            if (filtersCountry != null) localVarQueryParams.Add("filters[country]", Configuration.ApiClient.ParameterToString(filtersCountry)); // query parameter
            if (filtersPrice != null) localVarQueryParams.Add("filters[price]", Configuration.ApiClient.ParameterToString(filtersPrice)); // query parameter
            if (filtersCategory != null) localVarQueryParams.Add("filters[category]", Configuration.ApiClient.ParameterToString(filtersCategory)); // query parameter
            if (filtersIsTollFree != null) localVarQueryParams.Add("filters[is_toll_free]", Configuration.ApiClient.ParameterToString(filtersIsTollFree)); // query parameter
            if (sortInternal != null) localVarQueryParams.Add("sort[internal]", Configuration.ApiClient.ParameterToString(sortInternal)); // query parameter
            if (sortPrice != null) localVarQueryParams.Add("sort[price]", Configuration.ApiClient.ParameterToString(sortPrice)); // query parameter
            if (sortPhoneNumber != null) localVarQueryParams.Add("sort[phone_number]", Configuration.ApiClient.ParameterToString(sortPhoneNumber)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAvailablePhoneNumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListAvailableNumbersFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListAvailableNumbersFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListAvailableNumbersFull)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filtersPhoneNumber">Phone number filter (optional)</param>
        /// <param name="filtersCountryCode">Country Code filter (optional)</param>
        /// <param name="filtersNpa">Area Code filter (North America only) (optional)</param>
        /// <param name="filtersNxx">2nd set of 3 digits filter (North America only) (optional)</param>
        /// <param name="filtersXxxx">NANP XXXX filter (optional)</param>
        /// <param name="filtersCity">City filter (optional)</param>
        /// <param name="filtersProvince">State or Province (postal code) filter (optional)</param>
        /// <param name="filtersCountry">Country (postal code) filter (optional)</param>
        /// <param name="filtersPrice">Price filter (optional)</param>
        /// <param name="filtersCategory">Category filter (optional)</param>
        /// <param name="filtersIsTollFree">Toll-free status filter (optional)</param>
        /// <param name="sortInternal">Internal (quasi-random) sorting (optional)</param>
        /// <param name="sortPrice">Price sorting (optional)</param>
        /// <param name="sortPhoneNumber">Phone number sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ListAvailableNumbersFull</returns>
        public async System.Threading.Tasks.Task<ListAvailableNumbersFull> ListAvailablePhoneNumbersAsync (List<string> filtersPhoneNumber = null, List<string> filtersCountryCode = null, List<string> filtersNpa = null, List<string> filtersNxx = null, List<string> filtersXxxx = null, List<string> filtersCity = null, List<string> filtersProvince = null, List<string> filtersCountry = null, List<string> filtersPrice = null, List<string> filtersCategory = null, List<string> filtersIsTollFree = null, string sortInternal = null, string sortPrice = null, string sortPhoneNumber = null, int? limit = null, int? offset = null, string fields = null)
        {
             ApiResponse<ListAvailableNumbersFull> localVarResponse = await ListAvailablePhoneNumbersAsyncWithHttpInfo(filtersPhoneNumber, filtersCountryCode, filtersNpa, filtersNxx, filtersXxxx, filtersCity, filtersProvince, filtersCountry, filtersPrice, filtersCategory, filtersIsTollFree, sortInternal, sortPrice, sortPhoneNumber, limit, offset, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filtersPhoneNumber">Phone number filter (optional)</param>
        /// <param name="filtersCountryCode">Country Code filter (optional)</param>
        /// <param name="filtersNpa">Area Code filter (North America only) (optional)</param>
        /// <param name="filtersNxx">2nd set of 3 digits filter (North America only) (optional)</param>
        /// <param name="filtersXxxx">NANP XXXX filter (optional)</param>
        /// <param name="filtersCity">City filter (optional)</param>
        /// <param name="filtersProvince">State or Province (postal code) filter (optional)</param>
        /// <param name="filtersCountry">Country (postal code) filter (optional)</param>
        /// <param name="filtersPrice">Price filter (optional)</param>
        /// <param name="filtersCategory">Category filter (optional)</param>
        /// <param name="filtersIsTollFree">Toll-free status filter (optional)</param>
        /// <param name="sortInternal">Internal (quasi-random) sorting (optional)</param>
        /// <param name="sortPrice">Price sorting (optional)</param>
        /// <param name="sortPhoneNumber">Phone number sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ApiResponse (ListAvailableNumbersFull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListAvailableNumbersFull>> ListAvailablePhoneNumbersAsyncWithHttpInfo (List<string> filtersPhoneNumber = null, List<string> filtersCountryCode = null, List<string> filtersNpa = null, List<string> filtersNxx = null, List<string> filtersXxxx = null, List<string> filtersCity = null, List<string> filtersProvince = null, List<string> filtersCountry = null, List<string> filtersPrice = null, List<string> filtersCategory = null, List<string> filtersIsTollFree = null, string sortInternal = null, string sortPrice = null, string sortPhoneNumber = null, int? limit = null, int? offset = null, string fields = null)
        {

            var localVarPath = "/phone-numbers/available";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filtersPhoneNumber != null) localVarQueryParams.Add("filters[phone_number]", Configuration.ApiClient.ParameterToString(filtersPhoneNumber)); // query parameter
            if (filtersCountryCode != null) localVarQueryParams.Add("filters[country_code]", Configuration.ApiClient.ParameterToString(filtersCountryCode)); // query parameter
            if (filtersNpa != null) localVarQueryParams.Add("filters[npa]", Configuration.ApiClient.ParameterToString(filtersNpa)); // query parameter
            if (filtersNxx != null) localVarQueryParams.Add("filters[nxx]", Configuration.ApiClient.ParameterToString(filtersNxx)); // query parameter
            if (filtersXxxx != null) localVarQueryParams.Add("filters[xxxx]", Configuration.ApiClient.ParameterToString(filtersXxxx)); // query parameter
            if (filtersCity != null) localVarQueryParams.Add("filters[city]", Configuration.ApiClient.ParameterToString(filtersCity)); // query parameter
            if (filtersProvince != null) localVarQueryParams.Add("filters[province]", Configuration.ApiClient.ParameterToString(filtersProvince)); // query parameter
            if (filtersCountry != null) localVarQueryParams.Add("filters[country]", Configuration.ApiClient.ParameterToString(filtersCountry)); // query parameter
            if (filtersPrice != null) localVarQueryParams.Add("filters[price]", Configuration.ApiClient.ParameterToString(filtersPrice)); // query parameter
            if (filtersCategory != null) localVarQueryParams.Add("filters[category]", Configuration.ApiClient.ParameterToString(filtersCategory)); // query parameter
            if (filtersIsTollFree != null) localVarQueryParams.Add("filters[is_toll_free]", Configuration.ApiClient.ParameterToString(filtersIsTollFree)); // query parameter
            if (sortInternal != null) localVarQueryParams.Add("sort[internal]", Configuration.ApiClient.ParameterToString(sortInternal)); // query parameter
            if (sortPrice != null) localVarQueryParams.Add("sort[price]", Configuration.ApiClient.ParameterToString(sortPrice)); // query parameter
            if (sortPhoneNumber != null) localVarQueryParams.Add("sort[phone_number]", Configuration.ApiClient.ParameterToString(sortPhoneNumber)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAvailablePhoneNumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListAvailableNumbersFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListAvailableNumbersFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListAvailableNumbersFull)));
            
        }

    }
}
