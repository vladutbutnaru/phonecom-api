/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISmsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Send a SMS to one or a group of recipients
        /// </summary>
        /// <remarks>
        /// For more on the input fields, see Intro to SMS.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">SMS data</param>
        /// <returns>SmsFull</returns>
        SmsFull CreateAccountSms (int? accountId, CreateSmsParams data);

        /// <summary>
        /// Send a SMS to one or a group of recipients
        /// </summary>
        /// <remarks>
        /// For more on the input fields, see Intro to SMS.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">SMS data</param>
        /// <returns>ApiResponse of SmsFull</returns>
        ApiResponse<SmsFull> CreateAccountSmsWithHttpInfo (int? accountId, CreateSmsParams data);
        /// <summary>
        /// Show details of an individual SMS
        /// </summary>
        /// <remarks>
        /// This service shows the details of an individual sms. See Intro to SMS for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="smsId">SMS ID</param>
        /// <returns>SmsFull</returns>
        SmsFull GetAccountSms (int? accountId, int? smsId);

        /// <summary>
        /// Show details of an individual SMS
        /// </summary>
        /// <remarks>
        /// This service shows the details of an individual sms. See Intro to SMS for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="smsId">SMS ID</param>
        /// <returns>ApiResponse of SmsFull</returns>
        ApiResponse<SmsFull> GetAccountSmsWithHttpInfo (int? accountId, int? smsId);
        /// <summary>
        /// Get a list of SMS messages for an account
        /// </summary>
        /// <remarks>
        /// See Intro to SMS for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersDirection">Direction filter (optional)</param>
        /// <param name="filtersFrom">Caller ID filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortCreatedAt">Sort by created time of message (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ListSmsFull</returns>
        ListSmsFull ListAccountSms (int? accountId, List<string> filtersId = null, string filtersDirection = null, string filtersFrom = null, string sortId = null, string sortCreatedAt = null, int? limit = null, int? offset = null, string fields = null);

        /// <summary>
        /// Get a list of SMS messages for an account
        /// </summary>
        /// <remarks>
        /// See Intro to SMS for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersDirection">Direction filter (optional)</param>
        /// <param name="filtersFrom">Caller ID filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortCreatedAt">Sort by created time of message (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ApiResponse of ListSmsFull</returns>
        ApiResponse<ListSmsFull> ListAccountSmsWithHttpInfo (int? accountId, List<string> filtersId = null, string filtersDirection = null, string filtersFrom = null, string sortId = null, string sortCreatedAt = null, int? limit = null, int? offset = null, string fields = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Send a SMS to one or a group of recipients
        /// </summary>
        /// <remarks>
        /// For more on the input fields, see Intro to SMS.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">SMS data</param>
        /// <returns>Task of SmsFull</returns>
        System.Threading.Tasks.Task<SmsFull> CreateAccountSmsAsync (int? accountId, CreateSmsParams data);

        /// <summary>
        /// Send a SMS to one or a group of recipients
        /// </summary>
        /// <remarks>
        /// For more on the input fields, see Intro to SMS.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">SMS data</param>
        /// <returns>Task of ApiResponse (SmsFull)</returns>
        System.Threading.Tasks.Task<ApiResponse<SmsFull>> CreateAccountSmsAsyncWithHttpInfo (int? accountId, CreateSmsParams data);
        /// <summary>
        /// Show details of an individual SMS
        /// </summary>
        /// <remarks>
        /// This service shows the details of an individual sms. See Intro to SMS for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="smsId">SMS ID</param>
        /// <returns>Task of SmsFull</returns>
        System.Threading.Tasks.Task<SmsFull> GetAccountSmsAsync (int? accountId, int? smsId);

        /// <summary>
        /// Show details of an individual SMS
        /// </summary>
        /// <remarks>
        /// This service shows the details of an individual sms. See Intro to SMS for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="smsId">SMS ID</param>
        /// <returns>Task of ApiResponse (SmsFull)</returns>
        System.Threading.Tasks.Task<ApiResponse<SmsFull>> GetAccountSmsAsyncWithHttpInfo (int? accountId, int? smsId);
        /// <summary>
        /// Get a list of SMS messages for an account
        /// </summary>
        /// <remarks>
        /// See Intro to SMS for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersDirection">Direction filter (optional)</param>
        /// <param name="filtersFrom">Caller ID filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortCreatedAt">Sort by created time of message (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ListSmsFull</returns>
        System.Threading.Tasks.Task<ListSmsFull> ListAccountSmsAsync (int? accountId, List<string> filtersId = null, string filtersDirection = null, string filtersFrom = null, string sortId = null, string sortCreatedAt = null, int? limit = null, int? offset = null, string fields = null);

        /// <summary>
        /// Get a list of SMS messages for an account
        /// </summary>
        /// <remarks>
        /// See Intro to SMS for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersDirection">Direction filter (optional)</param>
        /// <param name="filtersFrom">Caller ID filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortCreatedAt">Sort by created time of message (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ApiResponse (ListSmsFull)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListSmsFull>> ListAccountSmsAsyncWithHttpInfo (int? accountId, List<string> filtersId = null, string filtersDirection = null, string filtersFrom = null, string sortId = null, string sortCreatedAt = null, int? limit = null, int? offset = null, string fields = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SmsApi : ISmsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SmsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SmsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SmsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SmsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Send a SMS to one or a group of recipients For more on the input fields, see Intro to SMS.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">SMS data</param>
        /// <returns>SmsFull</returns>
        public SmsFull CreateAccountSms (int? accountId, CreateSmsParams data)
        {
             ApiResponse<SmsFull> localVarResponse = CreateAccountSmsWithHttpInfo(accountId, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a SMS to one or a group of recipients For more on the input fields, see Intro to SMS.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">SMS data</param>
        /// <returns>ApiResponse of SmsFull</returns>
        public ApiResponse< SmsFull > CreateAccountSmsWithHttpInfo (int? accountId, CreateSmsParams data)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SmsApi->CreateAccountSms");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling SmsApi->CreateAccountSms");

            var localVarPath = "/accounts/{account_id}/sms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountSms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SmsFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SmsFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SmsFull)));
            
        }

        /// <summary>
        /// Send a SMS to one or a group of recipients For more on the input fields, see Intro to SMS.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">SMS data</param>
        /// <returns>Task of SmsFull</returns>
        public async System.Threading.Tasks.Task<SmsFull> CreateAccountSmsAsync (int? accountId, CreateSmsParams data)
        {
             ApiResponse<SmsFull> localVarResponse = await CreateAccountSmsAsyncWithHttpInfo(accountId, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a SMS to one or a group of recipients For more on the input fields, see Intro to SMS.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">SMS data</param>
        /// <returns>Task of ApiResponse (SmsFull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SmsFull>> CreateAccountSmsAsyncWithHttpInfo (int? accountId, CreateSmsParams data)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SmsApi->CreateAccountSms");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling SmsApi->CreateAccountSms");

            var localVarPath = "/accounts/{account_id}/sms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountSms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SmsFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SmsFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SmsFull)));
            
        }

        /// <summary>
        /// Show details of an individual SMS This service shows the details of an individual sms. See Intro to SMS for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="smsId">SMS ID</param>
        /// <returns>SmsFull</returns>
        public SmsFull GetAccountSms (int? accountId, int? smsId)
        {
             ApiResponse<SmsFull> localVarResponse = GetAccountSmsWithHttpInfo(accountId, smsId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Show details of an individual SMS This service shows the details of an individual sms. See Intro to SMS for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="smsId">SMS ID</param>
        /// <returns>ApiResponse of SmsFull</returns>
        public ApiResponse< SmsFull > GetAccountSmsWithHttpInfo (int? accountId, int? smsId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SmsApi->GetAccountSms");
            // verify the required parameter 'smsId' is set
            if (smsId == null)
                throw new ApiException(400, "Missing required parameter 'smsId' when calling SmsApi->GetAccountSms");

            var localVarPath = "/accounts/{account_id}/sms/{sms_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (smsId != null) localVarPathParams.Add("sms_id", Configuration.ApiClient.ParameterToString(smsId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountSms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SmsFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SmsFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SmsFull)));
            
        }

        /// <summary>
        /// Show details of an individual SMS This service shows the details of an individual sms. See Intro to SMS for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="smsId">SMS ID</param>
        /// <returns>Task of SmsFull</returns>
        public async System.Threading.Tasks.Task<SmsFull> GetAccountSmsAsync (int? accountId, int? smsId)
        {
             ApiResponse<SmsFull> localVarResponse = await GetAccountSmsAsyncWithHttpInfo(accountId, smsId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Show details of an individual SMS This service shows the details of an individual sms. See Intro to SMS for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="smsId">SMS ID</param>
        /// <returns>Task of ApiResponse (SmsFull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SmsFull>> GetAccountSmsAsyncWithHttpInfo (int? accountId, int? smsId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SmsApi->GetAccountSms");
            // verify the required parameter 'smsId' is set
            if (smsId == null)
                throw new ApiException(400, "Missing required parameter 'smsId' when calling SmsApi->GetAccountSms");

            var localVarPath = "/accounts/{account_id}/sms/{sms_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (smsId != null) localVarPathParams.Add("sms_id", Configuration.ApiClient.ParameterToString(smsId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountSms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SmsFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SmsFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SmsFull)));
            
        }

        /// <summary>
        /// Get a list of SMS messages for an account See Intro to SMS for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersDirection">Direction filter (optional)</param>
        /// <param name="filtersFrom">Caller ID filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortCreatedAt">Sort by created time of message (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ListSmsFull</returns>
        public ListSmsFull ListAccountSms (int? accountId, List<string> filtersId = null, string filtersDirection = null, string filtersFrom = null, string sortId = null, string sortCreatedAt = null, int? limit = null, int? offset = null, string fields = null)
        {
             ApiResponse<ListSmsFull> localVarResponse = ListAccountSmsWithHttpInfo(accountId, filtersId, filtersDirection, filtersFrom, sortId, sortCreatedAt, limit, offset, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of SMS messages for an account See Intro to SMS for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersDirection">Direction filter (optional)</param>
        /// <param name="filtersFrom">Caller ID filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortCreatedAt">Sort by created time of message (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ApiResponse of ListSmsFull</returns>
        public ApiResponse< ListSmsFull > ListAccountSmsWithHttpInfo (int? accountId, List<string> filtersId = null, string filtersDirection = null, string filtersFrom = null, string sortId = null, string sortCreatedAt = null, int? limit = null, int? offset = null, string fields = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SmsApi->ListAccountSms");

            var localVarPath = "/accounts/{account_id}/sms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (filtersId != null) localVarQueryParams.Add("filters[id]", Configuration.ApiClient.ParameterToString(filtersId)); // query parameter
            if (filtersDirection != null) localVarQueryParams.Add("filters[direction]", Configuration.ApiClient.ParameterToString(filtersDirection)); // query parameter
            if (filtersFrom != null) localVarQueryParams.Add("filters[from]", Configuration.ApiClient.ParameterToString(filtersFrom)); // query parameter
            if (sortId != null) localVarQueryParams.Add("sort[id]", Configuration.ApiClient.ParameterToString(sortId)); // query parameter
            if (sortCreatedAt != null) localVarQueryParams.Add("sort[created_at]", Configuration.ApiClient.ParameterToString(sortCreatedAt)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAccountSms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListSmsFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListSmsFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListSmsFull)));
            
        }

        /// <summary>
        /// Get a list of SMS messages for an account See Intro to SMS for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersDirection">Direction filter (optional)</param>
        /// <param name="filtersFrom">Caller ID filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortCreatedAt">Sort by created time of message (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ListSmsFull</returns>
        public async System.Threading.Tasks.Task<ListSmsFull> ListAccountSmsAsync (int? accountId, List<string> filtersId = null, string filtersDirection = null, string filtersFrom = null, string sortId = null, string sortCreatedAt = null, int? limit = null, int? offset = null, string fields = null)
        {
             ApiResponse<ListSmsFull> localVarResponse = await ListAccountSmsAsyncWithHttpInfo(accountId, filtersId, filtersDirection, filtersFrom, sortId, sortCreatedAt, limit, offset, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of SMS messages for an account See Intro to SMS for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersDirection">Direction filter (optional)</param>
        /// <param name="filtersFrom">Caller ID filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortCreatedAt">Sort by created time of message (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ApiResponse (ListSmsFull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListSmsFull>> ListAccountSmsAsyncWithHttpInfo (int? accountId, List<string> filtersId = null, string filtersDirection = null, string filtersFrom = null, string sortId = null, string sortCreatedAt = null, int? limit = null, int? offset = null, string fields = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SmsApi->ListAccountSms");

            var localVarPath = "/accounts/{account_id}/sms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (filtersId != null) localVarQueryParams.Add("filters[id]", Configuration.ApiClient.ParameterToString(filtersId)); // query parameter
            if (filtersDirection != null) localVarQueryParams.Add("filters[direction]", Configuration.ApiClient.ParameterToString(filtersDirection)); // query parameter
            if (filtersFrom != null) localVarQueryParams.Add("filters[from]", Configuration.ApiClient.ParameterToString(filtersFrom)); // query parameter
            if (sortId != null) localVarQueryParams.Add("sort[id]", Configuration.ApiClient.ParameterToString(sortId)); // query parameter
            if (sortCreatedAt != null) localVarQueryParams.Add("sort[created_at]", Configuration.ApiClient.ParameterToString(sortCreatedAt)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAccountSms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListSmsFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListSmsFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListSmsFull)));
            
        }

    }
}
