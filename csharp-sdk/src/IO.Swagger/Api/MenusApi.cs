/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMenusApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an individual menu
        /// </summary>
        /// <remarks>
        /// This service creates an individual menu. See Account Menus for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">Menu data (optional)</param>
        /// <returns>MenuFull</returns>
        MenuFull CreateAccountMenu (int? accountId, CreateMenuParams data = null);

        /// <summary>
        /// Create an individual menu
        /// </summary>
        /// <remarks>
        /// This service creates an individual menu. See Account Menus for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">Menu data (optional)</param>
        /// <returns>ApiResponse of MenuFull</returns>
        ApiResponse<MenuFull> CreateAccountMenuWithHttpInfo (int? accountId, CreateMenuParams data = null);
        /// <summary>
        /// Delete an individual menu
        /// </summary>
        /// <remarks>
        /// This service shows the details of an individual menu.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="menuId">Menu ID</param>
        /// <returns>DeleteMenu</returns>
        DeleteMenu DeleteAccountMenu (int? accountId, int? menuId);

        /// <summary>
        /// Delete an individual menu
        /// </summary>
        /// <remarks>
        /// This service shows the details of an individual menu.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="menuId">Menu ID</param>
        /// <returns>ApiResponse of DeleteMenu</returns>
        ApiResponse<DeleteMenu> DeleteAccountMenuWithHttpInfo (int? accountId, int? menuId);
        /// <summary>
        /// Show details of an individual menu
        /// </summary>
        /// <remarks>
        /// This service shows the details of an individual Menu.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="menuId">Menu ID</param>
        /// <returns>MenuFull</returns>
        MenuFull GetAccountMenu (int? accountId, int? menuId);

        /// <summary>
        /// Show details of an individual menu
        /// </summary>
        /// <remarks>
        /// This service shows the details of an individual Menu.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="menuId">Menu ID</param>
        /// <returns>ApiResponse of MenuFull</returns>
        ApiResponse<MenuFull> GetAccountMenuWithHttpInfo (int? accountId, int? menuId);
        /// <summary>
        /// Get a list of menus for an account
        /// </summary>
        /// <remarks>
        /// See Account Menus for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersName">Name filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortName">Name sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ListMenusFull</returns>
        ListMenusFull ListAccountMenus (int? accountId, List<string> filtersId = null, List<string> filtersName = null, string sortId = null, string sortName = null, int? limit = null, int? offset = null, string fields = null);

        /// <summary>
        /// Get a list of menus for an account
        /// </summary>
        /// <remarks>
        /// See Account Menus for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersName">Name filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortName">Name sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ApiResponse of ListMenusFull</returns>
        ApiResponse<ListMenusFull> ListAccountMenusWithHttpInfo (int? accountId, List<string> filtersId = null, List<string> filtersName = null, string sortId = null, string sortName = null, int? limit = null, int? offset = null, string fields = null);
        /// <summary>
        /// Replace an individual menu
        /// </summary>
        /// <remarks>
        /// This service replaces the details of an individual Menu.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="menuId">Menu ID</param>
        /// <param name="data">Menu data (optional)</param>
        /// <returns>MenuFull</returns>
        MenuFull ReplaceAccountMenu (int? accountId, int? menuId, ReplaceMenuParams data = null);

        /// <summary>
        /// Replace an individual menu
        /// </summary>
        /// <remarks>
        /// This service replaces the details of an individual Menu.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="menuId">Menu ID</param>
        /// <param name="data">Menu data (optional)</param>
        /// <returns>ApiResponse of MenuFull</returns>
        ApiResponse<MenuFull> ReplaceAccountMenuWithHttpInfo (int? accountId, int? menuId, ReplaceMenuParams data = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create an individual menu
        /// </summary>
        /// <remarks>
        /// This service creates an individual menu. See Account Menus for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">Menu data (optional)</param>
        /// <returns>Task of MenuFull</returns>
        System.Threading.Tasks.Task<MenuFull> CreateAccountMenuAsync (int? accountId, CreateMenuParams data = null);

        /// <summary>
        /// Create an individual menu
        /// </summary>
        /// <remarks>
        /// This service creates an individual menu. See Account Menus for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">Menu data (optional)</param>
        /// <returns>Task of ApiResponse (MenuFull)</returns>
        System.Threading.Tasks.Task<ApiResponse<MenuFull>> CreateAccountMenuAsyncWithHttpInfo (int? accountId, CreateMenuParams data = null);
        /// <summary>
        /// Delete an individual menu
        /// </summary>
        /// <remarks>
        /// This service shows the details of an individual menu.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="menuId">Menu ID</param>
        /// <returns>Task of DeleteMenu</returns>
        System.Threading.Tasks.Task<DeleteMenu> DeleteAccountMenuAsync (int? accountId, int? menuId);

        /// <summary>
        /// Delete an individual menu
        /// </summary>
        /// <remarks>
        /// This service shows the details of an individual menu.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="menuId">Menu ID</param>
        /// <returns>Task of ApiResponse (DeleteMenu)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteMenu>> DeleteAccountMenuAsyncWithHttpInfo (int? accountId, int? menuId);
        /// <summary>
        /// Show details of an individual menu
        /// </summary>
        /// <remarks>
        /// This service shows the details of an individual Menu.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="menuId">Menu ID</param>
        /// <returns>Task of MenuFull</returns>
        System.Threading.Tasks.Task<MenuFull> GetAccountMenuAsync (int? accountId, int? menuId);

        /// <summary>
        /// Show details of an individual menu
        /// </summary>
        /// <remarks>
        /// This service shows the details of an individual Menu.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="menuId">Menu ID</param>
        /// <returns>Task of ApiResponse (MenuFull)</returns>
        System.Threading.Tasks.Task<ApiResponse<MenuFull>> GetAccountMenuAsyncWithHttpInfo (int? accountId, int? menuId);
        /// <summary>
        /// Get a list of menus for an account
        /// </summary>
        /// <remarks>
        /// See Account Menus for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersName">Name filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortName">Name sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ListMenusFull</returns>
        System.Threading.Tasks.Task<ListMenusFull> ListAccountMenusAsync (int? accountId, List<string> filtersId = null, List<string> filtersName = null, string sortId = null, string sortName = null, int? limit = null, int? offset = null, string fields = null);

        /// <summary>
        /// Get a list of menus for an account
        /// </summary>
        /// <remarks>
        /// See Account Menus for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersName">Name filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortName">Name sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ApiResponse (ListMenusFull)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListMenusFull>> ListAccountMenusAsyncWithHttpInfo (int? accountId, List<string> filtersId = null, List<string> filtersName = null, string sortId = null, string sortName = null, int? limit = null, int? offset = null, string fields = null);
        /// <summary>
        /// Replace an individual menu
        /// </summary>
        /// <remarks>
        /// This service replaces the details of an individual Menu.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="menuId">Menu ID</param>
        /// <param name="data">Menu data (optional)</param>
        /// <returns>Task of MenuFull</returns>
        System.Threading.Tasks.Task<MenuFull> ReplaceAccountMenuAsync (int? accountId, int? menuId, ReplaceMenuParams data = null);

        /// <summary>
        /// Replace an individual menu
        /// </summary>
        /// <remarks>
        /// This service replaces the details of an individual Menu.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="menuId">Menu ID</param>
        /// <param name="data">Menu data (optional)</param>
        /// <returns>Task of ApiResponse (MenuFull)</returns>
        System.Threading.Tasks.Task<ApiResponse<MenuFull>> ReplaceAccountMenuAsyncWithHttpInfo (int? accountId, int? menuId, ReplaceMenuParams data = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MenusApi : IMenusApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MenusApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MenusApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MenusApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MenusApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create an individual menu This service creates an individual menu. See Account Menus for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">Menu data (optional)</param>
        /// <returns>MenuFull</returns>
        public MenuFull CreateAccountMenu (int? accountId, CreateMenuParams data = null)
        {
             ApiResponse<MenuFull> localVarResponse = CreateAccountMenuWithHttpInfo(accountId, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an individual menu This service creates an individual menu. See Account Menus for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">Menu data (optional)</param>
        /// <returns>ApiResponse of MenuFull</returns>
        public ApiResponse< MenuFull > CreateAccountMenuWithHttpInfo (int? accountId, CreateMenuParams data = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MenusApi->CreateAccountMenu");

            var localVarPath = "/accounts/{account_id}/menus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountMenu", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MenuFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MenuFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MenuFull)));
            
        }

        /// <summary>
        /// Create an individual menu This service creates an individual menu. See Account Menus for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">Menu data (optional)</param>
        /// <returns>Task of MenuFull</returns>
        public async System.Threading.Tasks.Task<MenuFull> CreateAccountMenuAsync (int? accountId, CreateMenuParams data = null)
        {
             ApiResponse<MenuFull> localVarResponse = await CreateAccountMenuAsyncWithHttpInfo(accountId, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an individual menu This service creates an individual menu. See Account Menus for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">Menu data (optional)</param>
        /// <returns>Task of ApiResponse (MenuFull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MenuFull>> CreateAccountMenuAsyncWithHttpInfo (int? accountId, CreateMenuParams data = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MenusApi->CreateAccountMenu");

            var localVarPath = "/accounts/{account_id}/menus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountMenu", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MenuFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MenuFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MenuFull)));
            
        }

        /// <summary>
        /// Delete an individual menu This service shows the details of an individual menu.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="menuId">Menu ID</param>
        /// <returns>DeleteMenu</returns>
        public DeleteMenu DeleteAccountMenu (int? accountId, int? menuId)
        {
             ApiResponse<DeleteMenu> localVarResponse = DeleteAccountMenuWithHttpInfo(accountId, menuId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an individual menu This service shows the details of an individual menu.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="menuId">Menu ID</param>
        /// <returns>ApiResponse of DeleteMenu</returns>
        public ApiResponse< DeleteMenu > DeleteAccountMenuWithHttpInfo (int? accountId, int? menuId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MenusApi->DeleteAccountMenu");
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->DeleteAccountMenu");

            var localVarPath = "/accounts/{account_id}/menus/{menu_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (menuId != null) localVarPathParams.Add("menu_id", Configuration.ApiClient.ParameterToString(menuId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountMenu", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteMenu>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteMenu) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteMenu)));
            
        }

        /// <summary>
        /// Delete an individual menu This service shows the details of an individual menu.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="menuId">Menu ID</param>
        /// <returns>Task of DeleteMenu</returns>
        public async System.Threading.Tasks.Task<DeleteMenu> DeleteAccountMenuAsync (int? accountId, int? menuId)
        {
             ApiResponse<DeleteMenu> localVarResponse = await DeleteAccountMenuAsyncWithHttpInfo(accountId, menuId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an individual menu This service shows the details of an individual menu.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="menuId">Menu ID</param>
        /// <returns>Task of ApiResponse (DeleteMenu)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteMenu>> DeleteAccountMenuAsyncWithHttpInfo (int? accountId, int? menuId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MenusApi->DeleteAccountMenu");
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->DeleteAccountMenu");

            var localVarPath = "/accounts/{account_id}/menus/{menu_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (menuId != null) localVarPathParams.Add("menu_id", Configuration.ApiClient.ParameterToString(menuId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountMenu", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteMenu>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteMenu) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteMenu)));
            
        }

        /// <summary>
        /// Show details of an individual menu This service shows the details of an individual Menu.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="menuId">Menu ID</param>
        /// <returns>MenuFull</returns>
        public MenuFull GetAccountMenu (int? accountId, int? menuId)
        {
             ApiResponse<MenuFull> localVarResponse = GetAccountMenuWithHttpInfo(accountId, menuId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Show details of an individual menu This service shows the details of an individual Menu.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="menuId">Menu ID</param>
        /// <returns>ApiResponse of MenuFull</returns>
        public ApiResponse< MenuFull > GetAccountMenuWithHttpInfo (int? accountId, int? menuId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MenusApi->GetAccountMenu");
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->GetAccountMenu");

            var localVarPath = "/accounts/{account_id}/menus/{menu_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (menuId != null) localVarPathParams.Add("menu_id", Configuration.ApiClient.ParameterToString(menuId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountMenu", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MenuFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MenuFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MenuFull)));
            
        }

        /// <summary>
        /// Show details of an individual menu This service shows the details of an individual Menu.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="menuId">Menu ID</param>
        /// <returns>Task of MenuFull</returns>
        public async System.Threading.Tasks.Task<MenuFull> GetAccountMenuAsync (int? accountId, int? menuId)
        {
             ApiResponse<MenuFull> localVarResponse = await GetAccountMenuAsyncWithHttpInfo(accountId, menuId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Show details of an individual menu This service shows the details of an individual Menu.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="menuId">Menu ID</param>
        /// <returns>Task of ApiResponse (MenuFull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MenuFull>> GetAccountMenuAsyncWithHttpInfo (int? accountId, int? menuId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MenusApi->GetAccountMenu");
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->GetAccountMenu");

            var localVarPath = "/accounts/{account_id}/menus/{menu_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (menuId != null) localVarPathParams.Add("menu_id", Configuration.ApiClient.ParameterToString(menuId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountMenu", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MenuFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MenuFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MenuFull)));
            
        }

        /// <summary>
        /// Get a list of menus for an account See Account Menus for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersName">Name filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortName">Name sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ListMenusFull</returns>
        public ListMenusFull ListAccountMenus (int? accountId, List<string> filtersId = null, List<string> filtersName = null, string sortId = null, string sortName = null, int? limit = null, int? offset = null, string fields = null)
        {
             ApiResponse<ListMenusFull> localVarResponse = ListAccountMenusWithHttpInfo(accountId, filtersId, filtersName, sortId, sortName, limit, offset, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of menus for an account See Account Menus for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersName">Name filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortName">Name sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ApiResponse of ListMenusFull</returns>
        public ApiResponse< ListMenusFull > ListAccountMenusWithHttpInfo (int? accountId, List<string> filtersId = null, List<string> filtersName = null, string sortId = null, string sortName = null, int? limit = null, int? offset = null, string fields = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MenusApi->ListAccountMenus");

            var localVarPath = "/accounts/{account_id}/menus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (filtersId != null) localVarQueryParams.Add("filters[id]", Configuration.ApiClient.ParameterToString(filtersId)); // query parameter
            if (filtersName != null) localVarQueryParams.Add("filters[name]", Configuration.ApiClient.ParameterToString(filtersName)); // query parameter
            if (sortId != null) localVarQueryParams.Add("sort[id]", Configuration.ApiClient.ParameterToString(sortId)); // query parameter
            if (sortName != null) localVarQueryParams.Add("sort[name]", Configuration.ApiClient.ParameterToString(sortName)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAccountMenus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListMenusFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListMenusFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListMenusFull)));
            
        }

        /// <summary>
        /// Get a list of menus for an account See Account Menus for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersName">Name filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortName">Name sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ListMenusFull</returns>
        public async System.Threading.Tasks.Task<ListMenusFull> ListAccountMenusAsync (int? accountId, List<string> filtersId = null, List<string> filtersName = null, string sortId = null, string sortName = null, int? limit = null, int? offset = null, string fields = null)
        {
             ApiResponse<ListMenusFull> localVarResponse = await ListAccountMenusAsyncWithHttpInfo(accountId, filtersId, filtersName, sortId, sortName, limit, offset, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of menus for an account See Account Menus for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersName">Name filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortName">Name sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ApiResponse (ListMenusFull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListMenusFull>> ListAccountMenusAsyncWithHttpInfo (int? accountId, List<string> filtersId = null, List<string> filtersName = null, string sortId = null, string sortName = null, int? limit = null, int? offset = null, string fields = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MenusApi->ListAccountMenus");

            var localVarPath = "/accounts/{account_id}/menus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (filtersId != null) localVarQueryParams.Add("filters[id]", Configuration.ApiClient.ParameterToString(filtersId)); // query parameter
            if (filtersName != null) localVarQueryParams.Add("filters[name]", Configuration.ApiClient.ParameterToString(filtersName)); // query parameter
            if (sortId != null) localVarQueryParams.Add("sort[id]", Configuration.ApiClient.ParameterToString(sortId)); // query parameter
            if (sortName != null) localVarQueryParams.Add("sort[name]", Configuration.ApiClient.ParameterToString(sortName)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAccountMenus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListMenusFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListMenusFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListMenusFull)));
            
        }

        /// <summary>
        /// Replace an individual menu This service replaces the details of an individual Menu.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="menuId">Menu ID</param>
        /// <param name="data">Menu data (optional)</param>
        /// <returns>MenuFull</returns>
        public MenuFull ReplaceAccountMenu (int? accountId, int? menuId, ReplaceMenuParams data = null)
        {
             ApiResponse<MenuFull> localVarResponse = ReplaceAccountMenuWithHttpInfo(accountId, menuId, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace an individual menu This service replaces the details of an individual Menu.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="menuId">Menu ID</param>
        /// <param name="data">Menu data (optional)</param>
        /// <returns>ApiResponse of MenuFull</returns>
        public ApiResponse< MenuFull > ReplaceAccountMenuWithHttpInfo (int? accountId, int? menuId, ReplaceMenuParams data = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MenusApi->ReplaceAccountMenu");
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->ReplaceAccountMenu");

            var localVarPath = "/accounts/{account_id}/menus/{menu_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (menuId != null) localVarPathParams.Add("menu_id", Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceAccountMenu", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MenuFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MenuFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MenuFull)));
            
        }

        /// <summary>
        /// Replace an individual menu This service replaces the details of an individual Menu.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="menuId">Menu ID</param>
        /// <param name="data">Menu data (optional)</param>
        /// <returns>Task of MenuFull</returns>
        public async System.Threading.Tasks.Task<MenuFull> ReplaceAccountMenuAsync (int? accountId, int? menuId, ReplaceMenuParams data = null)
        {
             ApiResponse<MenuFull> localVarResponse = await ReplaceAccountMenuAsyncWithHttpInfo(accountId, menuId, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace an individual menu This service replaces the details of an individual Menu.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="menuId">Menu ID</param>
        /// <param name="data">Menu data (optional)</param>
        /// <returns>Task of ApiResponse (MenuFull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MenuFull>> ReplaceAccountMenuAsyncWithHttpInfo (int? accountId, int? menuId, ReplaceMenuParams data = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MenusApi->ReplaceAccountMenu");
            // verify the required parameter 'menuId' is set
            if (menuId == null)
                throw new ApiException(400, "Missing required parameter 'menuId' when calling MenusApi->ReplaceAccountMenu");

            var localVarPath = "/accounts/{account_id}/menus/{menu_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (menuId != null) localVarPathParams.Add("menu_id", Configuration.ApiClient.ParameterToString(menuId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceAccountMenu", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MenuFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MenuFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MenuFull)));
            
        }

    }
}
