/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITrunksApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a trunk record with SIP information
        /// </summary>
        /// <remarks>
        /// For more on the input fields, see Account Trunks.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">Trunk data</param>
        /// <returns>TrunkFull</returns>
        TrunkFull CreateAccountTrunk (int? accountId, CreateTrunkParams data);

        /// <summary>
        /// Add a trunk record with SIP information
        /// </summary>
        /// <remarks>
        /// For more on the input fields, see Account Trunks.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">Trunk data</param>
        /// <returns>ApiResponse of TrunkFull</returns>
        ApiResponse<TrunkFull> CreateAccountTrunkWithHttpInfo (int? accountId, CreateTrunkParams data);
        /// <summary>
        /// Delete a trunk from account
        /// </summary>
        /// <remarks>
        /// This service deletes a trunk from the account. For more on the properties of trunks, see Account Trunks.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="trunkId">Trunk ID</param>
        /// <returns>DeleteTrunk</returns>
        DeleteTrunk DeleteAccountTrunk (int? accountId, int? trunkId);

        /// <summary>
        /// Delete a trunk from account
        /// </summary>
        /// <remarks>
        /// This service deletes a trunk from the account. For more on the properties of trunks, see Account Trunks.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="trunkId">Trunk ID</param>
        /// <returns>ApiResponse of DeleteTrunk</returns>
        ApiResponse<DeleteTrunk> DeleteAccountTrunkWithHttpInfo (int? accountId, int? trunkId);
        /// <summary>
        /// Show details of an individual trunk
        /// </summary>
        /// <remarks>
        /// This service shows the details of an individual Trunk.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="trunkId">Trunk ID</param>
        /// <returns>TrunkFull</returns>
        TrunkFull GetAccountTrunk (int? accountId, int? trunkId);

        /// <summary>
        /// Show details of an individual trunk
        /// </summary>
        /// <remarks>
        /// This service shows the details of an individual Trunk.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="trunkId">Trunk ID</param>
        /// <returns>ApiResponse of TrunkFull</returns>
        ApiResponse<TrunkFull> GetAccountTrunkWithHttpInfo (int? accountId, int? trunkId);
        /// <summary>
        /// Get a list of trunks for an account
        /// </summary>
        /// <remarks>
        /// See Account Trunks for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersName">Name filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortName">Name sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ListTrunksFull</returns>
        ListTrunksFull ListAccountTrunks (int? accountId, List<string> filtersId = null, List<string> filtersName = null, string sortId = null, string sortName = null, int? limit = null, int? offset = null, string fields = null);

        /// <summary>
        /// Get a list of trunks for an account
        /// </summary>
        /// <remarks>
        /// See Account Trunks for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersName">Name filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortName">Name sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ApiResponse of ListTrunksFull</returns>
        ApiResponse<ListTrunksFull> ListAccountTrunksWithHttpInfo (int? accountId, List<string> filtersId = null, List<string> filtersName = null, string sortId = null, string sortName = null, int? limit = null, int? offset = null, string fields = null);
        /// <summary>
        /// Replace parameters in a trunk
        /// </summary>
        /// <remarks>
        /// For more on the input fields, see Account Trunks.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="trunkId">Trunk ID</param>
        /// <param name="data">Trunk data</param>
        /// <returns>TrunkFull</returns>
        TrunkFull ReplaceAccountTrunk (int? accountId, int? trunkId, CreateTrunkParams data);

        /// <summary>
        /// Replace parameters in a trunk
        /// </summary>
        /// <remarks>
        /// For more on the input fields, see Account Trunks.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="trunkId">Trunk ID</param>
        /// <param name="data">Trunk data</param>
        /// <returns>ApiResponse of TrunkFull</returns>
        ApiResponse<TrunkFull> ReplaceAccountTrunkWithHttpInfo (int? accountId, int? trunkId, CreateTrunkParams data);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add a trunk record with SIP information
        /// </summary>
        /// <remarks>
        /// For more on the input fields, see Account Trunks.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">Trunk data</param>
        /// <returns>Task of TrunkFull</returns>
        System.Threading.Tasks.Task<TrunkFull> CreateAccountTrunkAsync (int? accountId, CreateTrunkParams data);

        /// <summary>
        /// Add a trunk record with SIP information
        /// </summary>
        /// <remarks>
        /// For more on the input fields, see Account Trunks.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">Trunk data</param>
        /// <returns>Task of ApiResponse (TrunkFull)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrunkFull>> CreateAccountTrunkAsyncWithHttpInfo (int? accountId, CreateTrunkParams data);
        /// <summary>
        /// Delete a trunk from account
        /// </summary>
        /// <remarks>
        /// This service deletes a trunk from the account. For more on the properties of trunks, see Account Trunks.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="trunkId">Trunk ID</param>
        /// <returns>Task of DeleteTrunk</returns>
        System.Threading.Tasks.Task<DeleteTrunk> DeleteAccountTrunkAsync (int? accountId, int? trunkId);

        /// <summary>
        /// Delete a trunk from account
        /// </summary>
        /// <remarks>
        /// This service deletes a trunk from the account. For more on the properties of trunks, see Account Trunks.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="trunkId">Trunk ID</param>
        /// <returns>Task of ApiResponse (DeleteTrunk)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteTrunk>> DeleteAccountTrunkAsyncWithHttpInfo (int? accountId, int? trunkId);
        /// <summary>
        /// Show details of an individual trunk
        /// </summary>
        /// <remarks>
        /// This service shows the details of an individual Trunk.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="trunkId">Trunk ID</param>
        /// <returns>Task of TrunkFull</returns>
        System.Threading.Tasks.Task<TrunkFull> GetAccountTrunkAsync (int? accountId, int? trunkId);

        /// <summary>
        /// Show details of an individual trunk
        /// </summary>
        /// <remarks>
        /// This service shows the details of an individual Trunk.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="trunkId">Trunk ID</param>
        /// <returns>Task of ApiResponse (TrunkFull)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrunkFull>> GetAccountTrunkAsyncWithHttpInfo (int? accountId, int? trunkId);
        /// <summary>
        /// Get a list of trunks for an account
        /// </summary>
        /// <remarks>
        /// See Account Trunks for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersName">Name filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortName">Name sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ListTrunksFull</returns>
        System.Threading.Tasks.Task<ListTrunksFull> ListAccountTrunksAsync (int? accountId, List<string> filtersId = null, List<string> filtersName = null, string sortId = null, string sortName = null, int? limit = null, int? offset = null, string fields = null);

        /// <summary>
        /// Get a list of trunks for an account
        /// </summary>
        /// <remarks>
        /// See Account Trunks for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersName">Name filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortName">Name sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ApiResponse (ListTrunksFull)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListTrunksFull>> ListAccountTrunksAsyncWithHttpInfo (int? accountId, List<string> filtersId = null, List<string> filtersName = null, string sortId = null, string sortName = null, int? limit = null, int? offset = null, string fields = null);
        /// <summary>
        /// Replace parameters in a trunk
        /// </summary>
        /// <remarks>
        /// For more on the input fields, see Account Trunks.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="trunkId">Trunk ID</param>
        /// <param name="data">Trunk data</param>
        /// <returns>Task of TrunkFull</returns>
        System.Threading.Tasks.Task<TrunkFull> ReplaceAccountTrunkAsync (int? accountId, int? trunkId, CreateTrunkParams data);

        /// <summary>
        /// Replace parameters in a trunk
        /// </summary>
        /// <remarks>
        /// For more on the input fields, see Account Trunks.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="trunkId">Trunk ID</param>
        /// <param name="data">Trunk data</param>
        /// <returns>Task of ApiResponse (TrunkFull)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrunkFull>> ReplaceAccountTrunkAsyncWithHttpInfo (int? accountId, int? trunkId, CreateTrunkParams data);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TrunksApi : ITrunksApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TrunksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TrunksApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TrunksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TrunksApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add a trunk record with SIP information For more on the input fields, see Account Trunks.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">Trunk data</param>
        /// <returns>TrunkFull</returns>
        public TrunkFull CreateAccountTrunk (int? accountId, CreateTrunkParams data)
        {
             ApiResponse<TrunkFull> localVarResponse = CreateAccountTrunkWithHttpInfo(accountId, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a trunk record with SIP information For more on the input fields, see Account Trunks.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">Trunk data</param>
        /// <returns>ApiResponse of TrunkFull</returns>
        public ApiResponse< TrunkFull > CreateAccountTrunkWithHttpInfo (int? accountId, CreateTrunkParams data)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TrunksApi->CreateAccountTrunk");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling TrunksApi->CreateAccountTrunk");

            var localVarPath = "/accounts/{account_id}/trunks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountTrunk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrunkFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrunkFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrunkFull)));
            
        }

        /// <summary>
        /// Add a trunk record with SIP information For more on the input fields, see Account Trunks.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">Trunk data</param>
        /// <returns>Task of TrunkFull</returns>
        public async System.Threading.Tasks.Task<TrunkFull> CreateAccountTrunkAsync (int? accountId, CreateTrunkParams data)
        {
             ApiResponse<TrunkFull> localVarResponse = await CreateAccountTrunkAsyncWithHttpInfo(accountId, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a trunk record with SIP information For more on the input fields, see Account Trunks.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">Trunk data</param>
        /// <returns>Task of ApiResponse (TrunkFull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrunkFull>> CreateAccountTrunkAsyncWithHttpInfo (int? accountId, CreateTrunkParams data)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TrunksApi->CreateAccountTrunk");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling TrunksApi->CreateAccountTrunk");

            var localVarPath = "/accounts/{account_id}/trunks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountTrunk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrunkFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrunkFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrunkFull)));
            
        }

        /// <summary>
        /// Delete a trunk from account This service deletes a trunk from the account. For more on the properties of trunks, see Account Trunks.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="trunkId">Trunk ID</param>
        /// <returns>DeleteTrunk</returns>
        public DeleteTrunk DeleteAccountTrunk (int? accountId, int? trunkId)
        {
             ApiResponse<DeleteTrunk> localVarResponse = DeleteAccountTrunkWithHttpInfo(accountId, trunkId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a trunk from account This service deletes a trunk from the account. For more on the properties of trunks, see Account Trunks.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="trunkId">Trunk ID</param>
        /// <returns>ApiResponse of DeleteTrunk</returns>
        public ApiResponse< DeleteTrunk > DeleteAccountTrunkWithHttpInfo (int? accountId, int? trunkId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TrunksApi->DeleteAccountTrunk");
            // verify the required parameter 'trunkId' is set
            if (trunkId == null)
                throw new ApiException(400, "Missing required parameter 'trunkId' when calling TrunksApi->DeleteAccountTrunk");

            var localVarPath = "/accounts/{account_id}/trunks/{trunk_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (trunkId != null) localVarPathParams.Add("trunk_id", Configuration.ApiClient.ParameterToString(trunkId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountTrunk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteTrunk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteTrunk) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteTrunk)));
            
        }

        /// <summary>
        /// Delete a trunk from account This service deletes a trunk from the account. For more on the properties of trunks, see Account Trunks.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="trunkId">Trunk ID</param>
        /// <returns>Task of DeleteTrunk</returns>
        public async System.Threading.Tasks.Task<DeleteTrunk> DeleteAccountTrunkAsync (int? accountId, int? trunkId)
        {
             ApiResponse<DeleteTrunk> localVarResponse = await DeleteAccountTrunkAsyncWithHttpInfo(accountId, trunkId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a trunk from account This service deletes a trunk from the account. For more on the properties of trunks, see Account Trunks.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="trunkId">Trunk ID</param>
        /// <returns>Task of ApiResponse (DeleteTrunk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteTrunk>> DeleteAccountTrunkAsyncWithHttpInfo (int? accountId, int? trunkId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TrunksApi->DeleteAccountTrunk");
            // verify the required parameter 'trunkId' is set
            if (trunkId == null)
                throw new ApiException(400, "Missing required parameter 'trunkId' when calling TrunksApi->DeleteAccountTrunk");

            var localVarPath = "/accounts/{account_id}/trunks/{trunk_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (trunkId != null) localVarPathParams.Add("trunk_id", Configuration.ApiClient.ParameterToString(trunkId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountTrunk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteTrunk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteTrunk) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteTrunk)));
            
        }

        /// <summary>
        /// Show details of an individual trunk This service shows the details of an individual Trunk.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="trunkId">Trunk ID</param>
        /// <returns>TrunkFull</returns>
        public TrunkFull GetAccountTrunk (int? accountId, int? trunkId)
        {
             ApiResponse<TrunkFull> localVarResponse = GetAccountTrunkWithHttpInfo(accountId, trunkId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Show details of an individual trunk This service shows the details of an individual Trunk.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="trunkId">Trunk ID</param>
        /// <returns>ApiResponse of TrunkFull</returns>
        public ApiResponse< TrunkFull > GetAccountTrunkWithHttpInfo (int? accountId, int? trunkId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TrunksApi->GetAccountTrunk");
            // verify the required parameter 'trunkId' is set
            if (trunkId == null)
                throw new ApiException(400, "Missing required parameter 'trunkId' when calling TrunksApi->GetAccountTrunk");

            var localVarPath = "/accounts/{account_id}/trunks/{trunk_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (trunkId != null) localVarPathParams.Add("trunk_id", Configuration.ApiClient.ParameterToString(trunkId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountTrunk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrunkFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrunkFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrunkFull)));
            
        }

        /// <summary>
        /// Show details of an individual trunk This service shows the details of an individual Trunk.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="trunkId">Trunk ID</param>
        /// <returns>Task of TrunkFull</returns>
        public async System.Threading.Tasks.Task<TrunkFull> GetAccountTrunkAsync (int? accountId, int? trunkId)
        {
             ApiResponse<TrunkFull> localVarResponse = await GetAccountTrunkAsyncWithHttpInfo(accountId, trunkId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Show details of an individual trunk This service shows the details of an individual Trunk.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="trunkId">Trunk ID</param>
        /// <returns>Task of ApiResponse (TrunkFull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrunkFull>> GetAccountTrunkAsyncWithHttpInfo (int? accountId, int? trunkId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TrunksApi->GetAccountTrunk");
            // verify the required parameter 'trunkId' is set
            if (trunkId == null)
                throw new ApiException(400, "Missing required parameter 'trunkId' when calling TrunksApi->GetAccountTrunk");

            var localVarPath = "/accounts/{account_id}/trunks/{trunk_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (trunkId != null) localVarPathParams.Add("trunk_id", Configuration.ApiClient.ParameterToString(trunkId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountTrunk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrunkFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrunkFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrunkFull)));
            
        }

        /// <summary>
        /// Get a list of trunks for an account See Account Trunks for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersName">Name filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortName">Name sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ListTrunksFull</returns>
        public ListTrunksFull ListAccountTrunks (int? accountId, List<string> filtersId = null, List<string> filtersName = null, string sortId = null, string sortName = null, int? limit = null, int? offset = null, string fields = null)
        {
             ApiResponse<ListTrunksFull> localVarResponse = ListAccountTrunksWithHttpInfo(accountId, filtersId, filtersName, sortId, sortName, limit, offset, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of trunks for an account See Account Trunks for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersName">Name filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortName">Name sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ApiResponse of ListTrunksFull</returns>
        public ApiResponse< ListTrunksFull > ListAccountTrunksWithHttpInfo (int? accountId, List<string> filtersId = null, List<string> filtersName = null, string sortId = null, string sortName = null, int? limit = null, int? offset = null, string fields = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TrunksApi->ListAccountTrunks");

            var localVarPath = "/accounts/{account_id}/trunks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (filtersId != null) localVarQueryParams.Add("filters[id]", Configuration.ApiClient.ParameterToString(filtersId)); // query parameter
            if (filtersName != null) localVarQueryParams.Add("filters[name]", Configuration.ApiClient.ParameterToString(filtersName)); // query parameter
            if (sortId != null) localVarQueryParams.Add("sort[id]", Configuration.ApiClient.ParameterToString(sortId)); // query parameter
            if (sortName != null) localVarQueryParams.Add("sort[name]", Configuration.ApiClient.ParameterToString(sortName)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAccountTrunks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListTrunksFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListTrunksFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListTrunksFull)));
            
        }

        /// <summary>
        /// Get a list of trunks for an account See Account Trunks for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersName">Name filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortName">Name sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ListTrunksFull</returns>
        public async System.Threading.Tasks.Task<ListTrunksFull> ListAccountTrunksAsync (int? accountId, List<string> filtersId = null, List<string> filtersName = null, string sortId = null, string sortName = null, int? limit = null, int? offset = null, string fields = null)
        {
             ApiResponse<ListTrunksFull> localVarResponse = await ListAccountTrunksAsyncWithHttpInfo(accountId, filtersId, filtersName, sortId, sortName, limit, offset, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of trunks for an account See Account Trunks for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersName">Name filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortName">Name sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ApiResponse (ListTrunksFull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListTrunksFull>> ListAccountTrunksAsyncWithHttpInfo (int? accountId, List<string> filtersId = null, List<string> filtersName = null, string sortId = null, string sortName = null, int? limit = null, int? offset = null, string fields = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TrunksApi->ListAccountTrunks");

            var localVarPath = "/accounts/{account_id}/trunks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (filtersId != null) localVarQueryParams.Add("filters[id]", Configuration.ApiClient.ParameterToString(filtersId)); // query parameter
            if (filtersName != null) localVarQueryParams.Add("filters[name]", Configuration.ApiClient.ParameterToString(filtersName)); // query parameter
            if (sortId != null) localVarQueryParams.Add("sort[id]", Configuration.ApiClient.ParameterToString(sortId)); // query parameter
            if (sortName != null) localVarQueryParams.Add("sort[name]", Configuration.ApiClient.ParameterToString(sortName)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAccountTrunks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListTrunksFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListTrunksFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListTrunksFull)));
            
        }

        /// <summary>
        /// Replace parameters in a trunk For more on the input fields, see Account Trunks.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="trunkId">Trunk ID</param>
        /// <param name="data">Trunk data</param>
        /// <returns>TrunkFull</returns>
        public TrunkFull ReplaceAccountTrunk (int? accountId, int? trunkId, CreateTrunkParams data)
        {
             ApiResponse<TrunkFull> localVarResponse = ReplaceAccountTrunkWithHttpInfo(accountId, trunkId, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace parameters in a trunk For more on the input fields, see Account Trunks.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="trunkId">Trunk ID</param>
        /// <param name="data">Trunk data</param>
        /// <returns>ApiResponse of TrunkFull</returns>
        public ApiResponse< TrunkFull > ReplaceAccountTrunkWithHttpInfo (int? accountId, int? trunkId, CreateTrunkParams data)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TrunksApi->ReplaceAccountTrunk");
            // verify the required parameter 'trunkId' is set
            if (trunkId == null)
                throw new ApiException(400, "Missing required parameter 'trunkId' when calling TrunksApi->ReplaceAccountTrunk");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling TrunksApi->ReplaceAccountTrunk");

            var localVarPath = "/accounts/{account_id}/trunks/{trunk_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (trunkId != null) localVarPathParams.Add("trunk_id", Configuration.ApiClient.ParameterToString(trunkId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceAccountTrunk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrunkFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrunkFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrunkFull)));
            
        }

        /// <summary>
        /// Replace parameters in a trunk For more on the input fields, see Account Trunks.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="trunkId">Trunk ID</param>
        /// <param name="data">Trunk data</param>
        /// <returns>Task of TrunkFull</returns>
        public async System.Threading.Tasks.Task<TrunkFull> ReplaceAccountTrunkAsync (int? accountId, int? trunkId, CreateTrunkParams data)
        {
             ApiResponse<TrunkFull> localVarResponse = await ReplaceAccountTrunkAsyncWithHttpInfo(accountId, trunkId, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace parameters in a trunk For more on the input fields, see Account Trunks.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="trunkId">Trunk ID</param>
        /// <param name="data">Trunk data</param>
        /// <returns>Task of ApiResponse (TrunkFull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrunkFull>> ReplaceAccountTrunkAsyncWithHttpInfo (int? accountId, int? trunkId, CreateTrunkParams data)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling TrunksApi->ReplaceAccountTrunk");
            // verify the required parameter 'trunkId' is set
            if (trunkId == null)
                throw new ApiException(400, "Missing required parameter 'trunkId' when calling TrunksApi->ReplaceAccountTrunk");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling TrunksApi->ReplaceAccountTrunk");

            var localVarPath = "/accounts/{account_id}/trunks/{trunk_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (trunkId != null) localVarPathParams.Add("trunk_id", Configuration.ApiClient.ParameterToString(trunkId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceAccountTrunk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrunkFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrunkFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrunkFull)));
            
        }

    }
}
