/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Filter Object. Optional. See below for details.
    /// </summary>
    [DataContract]
    public partial class RuleSetAction :  IEquatable<RuleSetAction>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RuleSetAction" /> class.
        /// </summary>
        /// <param name="Action">Required..</param>
        /// <param name="Extension">Extension that this action refers to. Output is an Extension Summary Object. Input must be an Extension Lookup Object. Required..</param>
        /// <param name="Items">This action is for forwarding calls to any number of extensions or phone numbers. The forwarding is handled in parallel, meaning that all phone numbers and/or extensions will ring simultaneously. When the call is answered by any single phone number or extension, ringing will stop for all of them. Subsequent actions in this rule set will be performed if the call is not answered before the timeout period is reached, or if it is forwarded to an extension that has its own route and that route does not result in any actions that disconnect the call or take over call handling..</param>
        /// <param name="Timeout">Seconds that our routing engine should wait until moving on. Optional. Must be an integer between 5 and 90. Default is 5 seconds..</param>
        /// <param name="HoldMusic">Hold Music to be played while callers are waiting. Output is a Media Summary Object. Input must be a Media Lookup Object. Optional. Must refer to a media recording that has is_hold_music set to TRUE. Default is to play a standard ring tone..</param>
        /// <param name="Greeting">Greeting that this action refers to. Output is a Media Summary Object. Input must be a Media Lookup Object. Required. Must refer to a media recording that has is_hold_music set to FALSE..</param>
        /// <param name="Duration">Required. Seconds that the caller should be placed on hold before being moved onto the next action. Must be an integer between 1 and 60 seconds..</param>
        /// <param name="Menu">Menu that this action refers to. Required. Output is a Menu Summary Object. Input must be a Menu Lookup Object..</param>
        /// <param name="Queue">Queue that this action refers to. Required. Output is a Queue Summary Object. Input must be a Queue Lookup Object..</param>
        /// <param name="Trunk">Trunk that this action refers to. Required. Output is a Trunk Summary Object. Input must be a Trunk Lookup Object..</param>
        public RuleSetAction(string Action = null, ExtensionSummary Extension = null, List<RuleSetForwardItem> Items = null, int? Timeout = null, MediaSummary HoldMusic = null, MediaSummary Greeting = null, int? Duration = null, MenuSummary Menu = null, QueueSummary Queue = null, TrunkSummary Trunk = null)
        {
            this.Action = Action;
            this.Extension = Extension;
            this.Items = Items;
            this.Timeout = Timeout;
            this.HoldMusic = HoldMusic;
            this.Greeting = Greeting;
            this.Duration = Duration;
            this.Menu = Menu;
            this.Queue = Queue;
            this.Trunk = Trunk;
        }
        
        /// <summary>
        /// Required.
        /// </summary>
        /// <value>Required.</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public string Action { get; set; }
        /// <summary>
        /// Extension that this action refers to. Output is an Extension Summary Object. Input must be an Extension Lookup Object. Required.
        /// </summary>
        /// <value>Extension that this action refers to. Output is an Extension Summary Object. Input must be an Extension Lookup Object. Required.</value>
        [DataMember(Name="extension", EmitDefaultValue=false)]
        public ExtensionSummary Extension { get; set; }
        /// <summary>
        /// This action is for forwarding calls to any number of extensions or phone numbers. The forwarding is handled in parallel, meaning that all phone numbers and/or extensions will ring simultaneously. When the call is answered by any single phone number or extension, ringing will stop for all of them. Subsequent actions in this rule set will be performed if the call is not answered before the timeout period is reached, or if it is forwarded to an extension that has its own route and that route does not result in any actions that disconnect the call or take over call handling.
        /// </summary>
        /// <value>This action is for forwarding calls to any number of extensions or phone numbers. The forwarding is handled in parallel, meaning that all phone numbers and/or extensions will ring simultaneously. When the call is answered by any single phone number or extension, ringing will stop for all of them. Subsequent actions in this rule set will be performed if the call is not answered before the timeout period is reached, or if it is forwarded to an extension that has its own route and that route does not result in any actions that disconnect the call or take over call handling.</value>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<RuleSetForwardItem> Items { get; set; }
        /// <summary>
        /// Seconds that our routing engine should wait until moving on. Optional. Must be an integer between 5 and 90. Default is 5 seconds.
        /// </summary>
        /// <value>Seconds that our routing engine should wait until moving on. Optional. Must be an integer between 5 and 90. Default is 5 seconds.</value>
        [DataMember(Name="timeout", EmitDefaultValue=false)]
        public int? Timeout { get; set; }
        /// <summary>
        /// Hold Music to be played while callers are waiting. Output is a Media Summary Object. Input must be a Media Lookup Object. Optional. Must refer to a media recording that has is_hold_music set to TRUE. Default is to play a standard ring tone.
        /// </summary>
        /// <value>Hold Music to be played while callers are waiting. Output is a Media Summary Object. Input must be a Media Lookup Object. Optional. Must refer to a media recording that has is_hold_music set to TRUE. Default is to play a standard ring tone.</value>
        [DataMember(Name="hold_music", EmitDefaultValue=false)]
        public MediaSummary HoldMusic { get; set; }
        /// <summary>
        /// Greeting that this action refers to. Output is a Media Summary Object. Input must be a Media Lookup Object. Required. Must refer to a media recording that has is_hold_music set to FALSE.
        /// </summary>
        /// <value>Greeting that this action refers to. Output is a Media Summary Object. Input must be a Media Lookup Object. Required. Must refer to a media recording that has is_hold_music set to FALSE.</value>
        [DataMember(Name="greeting", EmitDefaultValue=false)]
        public MediaSummary Greeting { get; set; }
        /// <summary>
        /// Required. Seconds that the caller should be placed on hold before being moved onto the next action. Must be an integer between 1 and 60 seconds.
        /// </summary>
        /// <value>Required. Seconds that the caller should be placed on hold before being moved onto the next action. Must be an integer between 1 and 60 seconds.</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public int? Duration { get; set; }
        /// <summary>
        /// Menu that this action refers to. Required. Output is a Menu Summary Object. Input must be a Menu Lookup Object.
        /// </summary>
        /// <value>Menu that this action refers to. Required. Output is a Menu Summary Object. Input must be a Menu Lookup Object.</value>
        [DataMember(Name="menu", EmitDefaultValue=false)]
        public MenuSummary Menu { get; set; }
        /// <summary>
        /// Queue that this action refers to. Required. Output is a Queue Summary Object. Input must be a Queue Lookup Object.
        /// </summary>
        /// <value>Queue that this action refers to. Required. Output is a Queue Summary Object. Input must be a Queue Lookup Object.</value>
        [DataMember(Name="queue", EmitDefaultValue=false)]
        public QueueSummary Queue { get; set; }
        /// <summary>
        /// Trunk that this action refers to. Required. Output is a Trunk Summary Object. Input must be a Trunk Lookup Object.
        /// </summary>
        /// <value>Trunk that this action refers to. Required. Output is a Trunk Summary Object. Input must be a Trunk Lookup Object.</value>
        [DataMember(Name="trunk", EmitDefaultValue=false)]
        public TrunkSummary Trunk { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RuleSetAction {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  HoldMusic: ").Append(HoldMusic).Append("\n");
            sb.Append("  Greeting: ").Append(Greeting).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Menu: ").Append(Menu).Append("\n");
            sb.Append("  Queue: ").Append(Queue).Append("\n");
            sb.Append("  Trunk: ").Append(Trunk).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RuleSetAction);
        }

        /// <summary>
        /// Returns true if RuleSetAction instances are equal
        /// </summary>
        /// <param name="other">Instance of RuleSetAction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RuleSetAction other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Action == other.Action ||
                    this.Action != null &&
                    this.Action.Equals(other.Action)
                ) && 
                (
                    this.Extension == other.Extension ||
                    this.Extension != null &&
                    this.Extension.Equals(other.Extension)
                ) && 
                (
                    this.Items == other.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(other.Items)
                ) && 
                (
                    this.Timeout == other.Timeout ||
                    this.Timeout != null &&
                    this.Timeout.Equals(other.Timeout)
                ) && 
                (
                    this.HoldMusic == other.HoldMusic ||
                    this.HoldMusic != null &&
                    this.HoldMusic.Equals(other.HoldMusic)
                ) && 
                (
                    this.Greeting == other.Greeting ||
                    this.Greeting != null &&
                    this.Greeting.Equals(other.Greeting)
                ) && 
                (
                    this.Duration == other.Duration ||
                    this.Duration != null &&
                    this.Duration.Equals(other.Duration)
                ) && 
                (
                    this.Menu == other.Menu ||
                    this.Menu != null &&
                    this.Menu.Equals(other.Menu)
                ) && 
                (
                    this.Queue == other.Queue ||
                    this.Queue != null &&
                    this.Queue.Equals(other.Queue)
                ) && 
                (
                    this.Trunk == other.Trunk ||
                    this.Trunk != null &&
                    this.Trunk.Equals(other.Trunk)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Action != null)
                    hash = hash * 59 + this.Action.GetHashCode();
                if (this.Extension != null)
                    hash = hash * 59 + this.Extension.GetHashCode();
                if (this.Items != null)
                    hash = hash * 59 + this.Items.GetHashCode();
                if (this.Timeout != null)
                    hash = hash * 59 + this.Timeout.GetHashCode();
                if (this.HoldMusic != null)
                    hash = hash * 59 + this.HoldMusic.GetHashCode();
                if (this.Greeting != null)
                    hash = hash * 59 + this.Greeting.GetHashCode();
                if (this.Duration != null)
                    hash = hash * 59 + this.Duration.GetHashCode();
                if (this.Menu != null)
                    hash = hash * 59 + this.Menu.GetHashCode();
                if (this.Queue != null)
                    hash = hash * 59 + this.Queue.GetHashCode();
                if (this.Trunk != null)
                    hash = hash * 59 + this.Trunk.GetHashCode();
                return hash;
            }
        }
    }

}
