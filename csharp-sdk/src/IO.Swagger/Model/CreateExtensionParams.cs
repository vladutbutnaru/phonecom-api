/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CreateExtensionParams
    /// </summary>
    [DataContract]
    public partial class CreateExtensionParams :  IEquatable<CreateExtensionParams>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateExtensionParams" /> class.
        /// </summary>
        /// <param name="CallerId">Caller ID.</param>
        /// <param name="UsageType">Extension type.</param>
        /// <param name="AllowsCallWaiting">Allows call waiting.</param>
        /// <param name="Extension">Extension number (auto-generated if empty).</param>
        /// <param name="IncludeInDirectory">Include in dial-by-name directory.</param>
        /// <param name="Name">Name (auto-generated if empty).</param>
        /// <param name="FullName">Contact name.</param>
        /// <param name="Timezone">Timezone.</param>
        /// <param name="NameGreeting">Recording lookup object.</param>
        /// <param name="VoicemailGreetingAlternate">Recording lookup object.</param>
        /// <param name="LocalAreaCode">Local area code.</param>
        /// <param name="VoicemailGreetingEnableLeaveMessagePrompt">Enable the \&quot;leave a message\&quot; prompt for voicemail.</param>
        /// <param name="VoicemailEnabled">Voicemail enabled.</param>
        /// <param name="EnableOutboundCalls">Enable outgoing calls.</param>
        /// <param name="EnableCallWaiting">Enable Call Waiting.</param>
        /// <param name="VoicemailPassword">Voicemail password.</param>
        /// <param name="VoicemailGreetingType">Voicemail greeting type.</param>
        /// <param name="VoicemailGreetingStandard">Recording lookup object.</param>
        /// <param name="VoicemailTranscription">Voicemail transcription type.</param>
        /// <param name="VoicemailNotificationsEmails">Email notifications for voicemails. Can be a single email or an array of emails.</param>
        /// <param name="VoicemailNotificationsSms">SMS notifications for voicemails.</param>
        /// <param name="CallNotificationsEmails">Email notifications for calls. Can be a single email or an array of emails.</param>
        /// <param name="CallNotificationsSms">SMS notifications for calls.</param>
        public CreateExtensionParams(string CallerId = null, string UsageType = null, bool? AllowsCallWaiting = null, int? Extension = null, bool? IncludeInDirectory = null, string Name = null, string FullName = null, string Timezone = null, Object NameGreeting = null, Object VoicemailGreetingAlternate = null, int? LocalAreaCode = null, bool? VoicemailGreetingEnableLeaveMessagePrompt = null, bool? VoicemailEnabled = null, bool? EnableOutboundCalls = null, bool? EnableCallWaiting = null, int? VoicemailPassword = null, string VoicemailGreetingType = null, Object VoicemailGreetingStandard = null, string VoicemailTranscription = null, List<string> VoicemailNotificationsEmails = null, string VoicemailNotificationsSms = null, List<string> CallNotificationsEmails = null, string CallNotificationsSms = null)
        {
            this.CallerId = CallerId;
            this.UsageType = UsageType;
            this.AllowsCallWaiting = AllowsCallWaiting;
            this.Extension = Extension;
            this.IncludeInDirectory = IncludeInDirectory;
            this.Name = Name;
            this.FullName = FullName;
            this.Timezone = Timezone;
            this.NameGreeting = NameGreeting;
            this.VoicemailGreetingAlternate = VoicemailGreetingAlternate;
            this.LocalAreaCode = LocalAreaCode;
            this.VoicemailGreetingEnableLeaveMessagePrompt = VoicemailGreetingEnableLeaveMessagePrompt;
            this.VoicemailEnabled = VoicemailEnabled;
            this.EnableOutboundCalls = EnableOutboundCalls;
            this.EnableCallWaiting = EnableCallWaiting;
            this.VoicemailPassword = VoicemailPassword;
            this.VoicemailGreetingType = VoicemailGreetingType;
            this.VoicemailGreetingStandard = VoicemailGreetingStandard;
            this.VoicemailTranscription = VoicemailTranscription;
            this.VoicemailNotificationsEmails = VoicemailNotificationsEmails;
            this.VoicemailNotificationsSms = VoicemailNotificationsSms;
            this.CallNotificationsEmails = CallNotificationsEmails;
            this.CallNotificationsSms = CallNotificationsSms;
        }
        
        /// <summary>
        /// Caller ID
        /// </summary>
        /// <value>Caller ID</value>
        [DataMember(Name="caller_id", EmitDefaultValue=false)]
        public string CallerId { get; set; }
        /// <summary>
        /// Extension type
        /// </summary>
        /// <value>Extension type</value>
        [DataMember(Name="usage_type", EmitDefaultValue=false)]
        public string UsageType { get; set; }
        /// <summary>
        /// Allows call waiting
        /// </summary>
        /// <value>Allows call waiting</value>
        [DataMember(Name="allows_call_waiting", EmitDefaultValue=false)]
        public bool? AllowsCallWaiting { get; set; }
        /// <summary>
        /// Extension number (auto-generated if empty)
        /// </summary>
        /// <value>Extension number (auto-generated if empty)</value>
        [DataMember(Name="extension", EmitDefaultValue=false)]
        public int? Extension { get; set; }
        /// <summary>
        /// Include in dial-by-name directory
        /// </summary>
        /// <value>Include in dial-by-name directory</value>
        [DataMember(Name="include_in_directory", EmitDefaultValue=false)]
        public bool? IncludeInDirectory { get; set; }
        /// <summary>
        /// Name (auto-generated if empty)
        /// </summary>
        /// <value>Name (auto-generated if empty)</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Contact name
        /// </summary>
        /// <value>Contact name</value>
        [DataMember(Name="full_name", EmitDefaultValue=false)]
        public string FullName { get; set; }
        /// <summary>
        /// Timezone
        /// </summary>
        /// <value>Timezone</value>
        [DataMember(Name="timezone", EmitDefaultValue=false)]
        public string Timezone { get; set; }
        /// <summary>
        /// Recording lookup object
        /// </summary>
        /// <value>Recording lookup object</value>
        [DataMember(Name="name_greeting", EmitDefaultValue=false)]
        public Object NameGreeting { get; set; }
        /// <summary>
        /// Recording lookup object
        /// </summary>
        /// <value>Recording lookup object</value>
        [DataMember(Name="voicemail[greeting][alternate]", EmitDefaultValue=false)]
        public Object VoicemailGreetingAlternate { get; set; }
        /// <summary>
        /// Local area code
        /// </summary>
        /// <value>Local area code</value>
        [DataMember(Name="local_area_code", EmitDefaultValue=false)]
        public int? LocalAreaCode { get; set; }
        /// <summary>
        /// Enable the \&quot;leave a message\&quot; prompt for voicemail
        /// </summary>
        /// <value>Enable the \&quot;leave a message\&quot; prompt for voicemail</value>
        [DataMember(Name="voicemail[greeting][enable_leave_message_prompt]", EmitDefaultValue=false)]
        public bool? VoicemailGreetingEnableLeaveMessagePrompt { get; set; }
        /// <summary>
        /// Voicemail enabled
        /// </summary>
        /// <value>Voicemail enabled</value>
        [DataMember(Name="voicemail[enabled]", EmitDefaultValue=false)]
        public bool? VoicemailEnabled { get; set; }
        /// <summary>
        /// Enable outgoing calls
        /// </summary>
        /// <value>Enable outgoing calls</value>
        [DataMember(Name="enable_outbound_calls", EmitDefaultValue=false)]
        public bool? EnableOutboundCalls { get; set; }
        /// <summary>
        /// Enable Call Waiting
        /// </summary>
        /// <value>Enable Call Waiting</value>
        [DataMember(Name="enable_call_waiting", EmitDefaultValue=false)]
        public bool? EnableCallWaiting { get; set; }
        /// <summary>
        /// Voicemail password
        /// </summary>
        /// <value>Voicemail password</value>
        [DataMember(Name="voicemail[password]", EmitDefaultValue=false)]
        public int? VoicemailPassword { get; set; }
        /// <summary>
        /// Voicemail greeting type
        /// </summary>
        /// <value>Voicemail greeting type</value>
        [DataMember(Name="voicemail[greeting][type]", EmitDefaultValue=false)]
        public string VoicemailGreetingType { get; set; }
        /// <summary>
        /// Recording lookup object
        /// </summary>
        /// <value>Recording lookup object</value>
        [DataMember(Name="voicemail[greeting][standard]", EmitDefaultValue=false)]
        public Object VoicemailGreetingStandard { get; set; }
        /// <summary>
        /// Voicemail transcription type
        /// </summary>
        /// <value>Voicemail transcription type</value>
        [DataMember(Name="voicemail[transcription]", EmitDefaultValue=false)]
        public string VoicemailTranscription { get; set; }
        /// <summary>
        /// Email notifications for voicemails. Can be a single email or an array of emails
        /// </summary>
        /// <value>Email notifications for voicemails. Can be a single email or an array of emails</value>
        [DataMember(Name="voicemail[notifications][emails]", EmitDefaultValue=false)]
        public List<string> VoicemailNotificationsEmails { get; set; }
        /// <summary>
        /// SMS notifications for voicemails
        /// </summary>
        /// <value>SMS notifications for voicemails</value>
        [DataMember(Name="voicemail[notifications][sms]", EmitDefaultValue=false)]
        public string VoicemailNotificationsSms { get; set; }
        /// <summary>
        /// Email notifications for calls. Can be a single email or an array of emails
        /// </summary>
        /// <value>Email notifications for calls. Can be a single email or an array of emails</value>
        [DataMember(Name="call_notifications[emails]", EmitDefaultValue=false)]
        public List<string> CallNotificationsEmails { get; set; }
        /// <summary>
        /// SMS notifications for calls
        /// </summary>
        /// <value>SMS notifications for calls</value>
        [DataMember(Name="call_notifications[sms]", EmitDefaultValue=false)]
        public string CallNotificationsSms { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateExtensionParams {\n");
            sb.Append("  CallerId: ").Append(CallerId).Append("\n");
            sb.Append("  UsageType: ").Append(UsageType).Append("\n");
            sb.Append("  AllowsCallWaiting: ").Append(AllowsCallWaiting).Append("\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("  IncludeInDirectory: ").Append(IncludeInDirectory).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  NameGreeting: ").Append(NameGreeting).Append("\n");
            sb.Append("  VoicemailGreetingAlternate: ").Append(VoicemailGreetingAlternate).Append("\n");
            sb.Append("  LocalAreaCode: ").Append(LocalAreaCode).Append("\n");
            sb.Append("  VoicemailGreetingEnableLeaveMessagePrompt: ").Append(VoicemailGreetingEnableLeaveMessagePrompt).Append("\n");
            sb.Append("  VoicemailEnabled: ").Append(VoicemailEnabled).Append("\n");
            sb.Append("  EnableOutboundCalls: ").Append(EnableOutboundCalls).Append("\n");
            sb.Append("  EnableCallWaiting: ").Append(EnableCallWaiting).Append("\n");
            sb.Append("  VoicemailPassword: ").Append(VoicemailPassword).Append("\n");
            sb.Append("  VoicemailGreetingType: ").Append(VoicemailGreetingType).Append("\n");
            sb.Append("  VoicemailGreetingStandard: ").Append(VoicemailGreetingStandard).Append("\n");
            sb.Append("  VoicemailTranscription: ").Append(VoicemailTranscription).Append("\n");
            sb.Append("  VoicemailNotificationsEmails: ").Append(VoicemailNotificationsEmails).Append("\n");
            sb.Append("  VoicemailNotificationsSms: ").Append(VoicemailNotificationsSms).Append("\n");
            sb.Append("  CallNotificationsEmails: ").Append(CallNotificationsEmails).Append("\n");
            sb.Append("  CallNotificationsSms: ").Append(CallNotificationsSms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CreateExtensionParams);
        }

        /// <summary>
        /// Returns true if CreateExtensionParams instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateExtensionParams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateExtensionParams other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CallerId == other.CallerId ||
                    this.CallerId != null &&
                    this.CallerId.Equals(other.CallerId)
                ) && 
                (
                    this.UsageType == other.UsageType ||
                    this.UsageType != null &&
                    this.UsageType.Equals(other.UsageType)
                ) && 
                (
                    this.AllowsCallWaiting == other.AllowsCallWaiting ||
                    this.AllowsCallWaiting != null &&
                    this.AllowsCallWaiting.Equals(other.AllowsCallWaiting)
                ) && 
                (
                    this.Extension == other.Extension ||
                    this.Extension != null &&
                    this.Extension.Equals(other.Extension)
                ) && 
                (
                    this.IncludeInDirectory == other.IncludeInDirectory ||
                    this.IncludeInDirectory != null &&
                    this.IncludeInDirectory.Equals(other.IncludeInDirectory)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.FullName == other.FullName ||
                    this.FullName != null &&
                    this.FullName.Equals(other.FullName)
                ) && 
                (
                    this.Timezone == other.Timezone ||
                    this.Timezone != null &&
                    this.Timezone.Equals(other.Timezone)
                ) && 
                (
                    this.NameGreeting == other.NameGreeting ||
                    this.NameGreeting != null &&
                    this.NameGreeting.Equals(other.NameGreeting)
                ) && 
                (
                    this.VoicemailGreetingAlternate == other.VoicemailGreetingAlternate ||
                    this.VoicemailGreetingAlternate != null &&
                    this.VoicemailGreetingAlternate.Equals(other.VoicemailGreetingAlternate)
                ) && 
                (
                    this.LocalAreaCode == other.LocalAreaCode ||
                    this.LocalAreaCode != null &&
                    this.LocalAreaCode.Equals(other.LocalAreaCode)
                ) && 
                (
                    this.VoicemailGreetingEnableLeaveMessagePrompt == other.VoicemailGreetingEnableLeaveMessagePrompt ||
                    this.VoicemailGreetingEnableLeaveMessagePrompt != null &&
                    this.VoicemailGreetingEnableLeaveMessagePrompt.Equals(other.VoicemailGreetingEnableLeaveMessagePrompt)
                ) && 
                (
                    this.VoicemailEnabled == other.VoicemailEnabled ||
                    this.VoicemailEnabled != null &&
                    this.VoicemailEnabled.Equals(other.VoicemailEnabled)
                ) && 
                (
                    this.EnableOutboundCalls == other.EnableOutboundCalls ||
                    this.EnableOutboundCalls != null &&
                    this.EnableOutboundCalls.Equals(other.EnableOutboundCalls)
                ) && 
                (
                    this.EnableCallWaiting == other.EnableCallWaiting ||
                    this.EnableCallWaiting != null &&
                    this.EnableCallWaiting.Equals(other.EnableCallWaiting)
                ) && 
                (
                    this.VoicemailPassword == other.VoicemailPassword ||
                    this.VoicemailPassword != null &&
                    this.VoicemailPassword.Equals(other.VoicemailPassword)
                ) && 
                (
                    this.VoicemailGreetingType == other.VoicemailGreetingType ||
                    this.VoicemailGreetingType != null &&
                    this.VoicemailGreetingType.Equals(other.VoicemailGreetingType)
                ) && 
                (
                    this.VoicemailGreetingStandard == other.VoicemailGreetingStandard ||
                    this.VoicemailGreetingStandard != null &&
                    this.VoicemailGreetingStandard.Equals(other.VoicemailGreetingStandard)
                ) && 
                (
                    this.VoicemailTranscription == other.VoicemailTranscription ||
                    this.VoicemailTranscription != null &&
                    this.VoicemailTranscription.Equals(other.VoicemailTranscription)
                ) && 
                (
                    this.VoicemailNotificationsEmails == other.VoicemailNotificationsEmails ||
                    this.VoicemailNotificationsEmails != null &&
                    this.VoicemailNotificationsEmails.SequenceEqual(other.VoicemailNotificationsEmails)
                ) && 
                (
                    this.VoicemailNotificationsSms == other.VoicemailNotificationsSms ||
                    this.VoicemailNotificationsSms != null &&
                    this.VoicemailNotificationsSms.Equals(other.VoicemailNotificationsSms)
                ) && 
                (
                    this.CallNotificationsEmails == other.CallNotificationsEmails ||
                    this.CallNotificationsEmails != null &&
                    this.CallNotificationsEmails.SequenceEqual(other.CallNotificationsEmails)
                ) && 
                (
                    this.CallNotificationsSms == other.CallNotificationsSms ||
                    this.CallNotificationsSms != null &&
                    this.CallNotificationsSms.Equals(other.CallNotificationsSms)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CallerId != null)
                    hash = hash * 59 + this.CallerId.GetHashCode();
                if (this.UsageType != null)
                    hash = hash * 59 + this.UsageType.GetHashCode();
                if (this.AllowsCallWaiting != null)
                    hash = hash * 59 + this.AllowsCallWaiting.GetHashCode();
                if (this.Extension != null)
                    hash = hash * 59 + this.Extension.GetHashCode();
                if (this.IncludeInDirectory != null)
                    hash = hash * 59 + this.IncludeInDirectory.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.FullName != null)
                    hash = hash * 59 + this.FullName.GetHashCode();
                if (this.Timezone != null)
                    hash = hash * 59 + this.Timezone.GetHashCode();
                if (this.NameGreeting != null)
                    hash = hash * 59 + this.NameGreeting.GetHashCode();
                if (this.VoicemailGreetingAlternate != null)
                    hash = hash * 59 + this.VoicemailGreetingAlternate.GetHashCode();
                if (this.LocalAreaCode != null)
                    hash = hash * 59 + this.LocalAreaCode.GetHashCode();
                if (this.VoicemailGreetingEnableLeaveMessagePrompt != null)
                    hash = hash * 59 + this.VoicemailGreetingEnableLeaveMessagePrompt.GetHashCode();
                if (this.VoicemailEnabled != null)
                    hash = hash * 59 + this.VoicemailEnabled.GetHashCode();
                if (this.EnableOutboundCalls != null)
                    hash = hash * 59 + this.EnableOutboundCalls.GetHashCode();
                if (this.EnableCallWaiting != null)
                    hash = hash * 59 + this.EnableCallWaiting.GetHashCode();
                if (this.VoicemailPassword != null)
                    hash = hash * 59 + this.VoicemailPassword.GetHashCode();
                if (this.VoicemailGreetingType != null)
                    hash = hash * 59 + this.VoicemailGreetingType.GetHashCode();
                if (this.VoicemailGreetingStandard != null)
                    hash = hash * 59 + this.VoicemailGreetingStandard.GetHashCode();
                if (this.VoicemailTranscription != null)
                    hash = hash * 59 + this.VoicemailTranscription.GetHashCode();
                if (this.VoicemailNotificationsEmails != null)
                    hash = hash * 59 + this.VoicemailNotificationsEmails.GetHashCode();
                if (this.VoicemailNotificationsSms != null)
                    hash = hash * 59 + this.VoicemailNotificationsSms.GetHashCode();
                if (this.CallNotificationsEmails != null)
                    hash = hash * 59 + this.CallNotificationsEmails.GetHashCode();
                if (this.CallNotificationsSms != null)
                    hash = hash * 59 + this.CallNotificationsSms.GetHashCode();
                return hash;
            }
        }
    }

}
