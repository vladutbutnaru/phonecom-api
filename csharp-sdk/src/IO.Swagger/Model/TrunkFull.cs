/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The Full Trunk Object is identical to the Trunk Summary Object, along with the following:
    /// </summary>
    [DataContract]
    public partial class TrunkFull :  IEquatable<TrunkFull>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrunkFull" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TrunkFull() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrunkFull" /> class.
        /// </summary>
        /// <param name="Id">Integer Trunk ID. Read-only. (required).</param>
        /// <param name="Name">Name. Required. (required).</param>
        /// <param name="Uri">Fully-qualified SIP URI. Required. (required).</param>
        /// <param name="MaxConcurrentCalls">Max concurrent calls. Default is 10. (required).</param>
        /// <param name="MaxMinutesPerMonth">Max minutes per month. Default is 750. (required).</param>
        /// <param name="Greeting">Greeting. Output is a Media Summary Object. Input must be a Media Lookup Object. Must refer to a media recording that has is_hold_music set to FALSE. (required).</param>
        /// <param name="ErrorMessage">Error Message. Output is a Media Summary Object. Input must be a Media Lookup Object. Must refer to a media recording that has is_hold_music set to FALSE. (required).</param>
        /// <param name="Codecs">Custom audio codec configuration, if any is needed. If provided, must be a simple array containing the prioritized list of desired codecs. Supported codecs are: g711u 64k, g711u 56k, g711a 64k, g711a 56k, g7231, g728, g729, g729A, g729B, g729AB, gms full, rfc2833, t38, ilbc, h263, g722, g722_1, g729D, g729E, amr, amr_wb, efr, evrc, h264, mpeg4, red, cng, SIP Info to 2833 (required).</param>
        public TrunkFull(int? Id = null, string Name = null, string Uri = null, int? MaxConcurrentCalls = null, int? MaxMinutesPerMonth = null, MediaSummary Greeting = null, MediaSummary ErrorMessage = null, List<string> Codecs = null)
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for TrunkFull and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for TrunkFull and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Uri" is required (not null)
            if (Uri == null)
            {
                throw new InvalidDataException("Uri is a required property for TrunkFull and cannot be null");
            }
            else
            {
                this.Uri = Uri;
            }
            // to ensure "MaxConcurrentCalls" is required (not null)
            if (MaxConcurrentCalls == null)
            {
                throw new InvalidDataException("MaxConcurrentCalls is a required property for TrunkFull and cannot be null");
            }
            else
            {
                this.MaxConcurrentCalls = MaxConcurrentCalls;
            }
            // to ensure "MaxMinutesPerMonth" is required (not null)
            if (MaxMinutesPerMonth == null)
            {
                throw new InvalidDataException("MaxMinutesPerMonth is a required property for TrunkFull and cannot be null");
            }
            else
            {
                this.MaxMinutesPerMonth = MaxMinutesPerMonth;
            }
            // to ensure "Greeting" is required (not null)
            if (Greeting == null)
            {
                throw new InvalidDataException("Greeting is a required property for TrunkFull and cannot be null");
            }
            else
            {
                this.Greeting = Greeting;
            }
            // to ensure "ErrorMessage" is required (not null)
            if (ErrorMessage == null)
            {
                throw new InvalidDataException("ErrorMessage is a required property for TrunkFull and cannot be null");
            }
            else
            {
                this.ErrorMessage = ErrorMessage;
            }
            // to ensure "Codecs" is required (not null)
            if (Codecs == null)
            {
                throw new InvalidDataException("Codecs is a required property for TrunkFull and cannot be null");
            }
            else
            {
                this.Codecs = Codecs;
            }
        }
        
        /// <summary>
        /// Integer Trunk ID. Read-only.
        /// </summary>
        /// <value>Integer Trunk ID. Read-only.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// Name. Required.
        /// </summary>
        /// <value>Name. Required.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Fully-qualified SIP URI. Required.
        /// </summary>
        /// <value>Fully-qualified SIP URI. Required.</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }
        /// <summary>
        /// Max concurrent calls. Default is 10.
        /// </summary>
        /// <value>Max concurrent calls. Default is 10.</value>
        [DataMember(Name="max_concurrent_calls", EmitDefaultValue=false)]
        public int? MaxConcurrentCalls { get; set; }
        /// <summary>
        /// Max minutes per month. Default is 750.
        /// </summary>
        /// <value>Max minutes per month. Default is 750.</value>
        [DataMember(Name="max_minutes_per_month", EmitDefaultValue=false)]
        public int? MaxMinutesPerMonth { get; set; }
        /// <summary>
        /// Greeting. Output is a Media Summary Object. Input must be a Media Lookup Object. Must refer to a media recording that has is_hold_music set to FALSE.
        /// </summary>
        /// <value>Greeting. Output is a Media Summary Object. Input must be a Media Lookup Object. Must refer to a media recording that has is_hold_music set to FALSE.</value>
        [DataMember(Name="greeting", EmitDefaultValue=false)]
        public MediaSummary Greeting { get; set; }
        /// <summary>
        /// Error Message. Output is a Media Summary Object. Input must be a Media Lookup Object. Must refer to a media recording that has is_hold_music set to FALSE.
        /// </summary>
        /// <value>Error Message. Output is a Media Summary Object. Input must be a Media Lookup Object. Must refer to a media recording that has is_hold_music set to FALSE.</value>
        [DataMember(Name="error_message", EmitDefaultValue=false)]
        public MediaSummary ErrorMessage { get; set; }
        /// <summary>
        /// Custom audio codec configuration, if any is needed. If provided, must be a simple array containing the prioritized list of desired codecs. Supported codecs are: g711u 64k, g711u 56k, g711a 64k, g711a 56k, g7231, g728, g729, g729A, g729B, g729AB, gms full, rfc2833, t38, ilbc, h263, g722, g722_1, g729D, g729E, amr, amr_wb, efr, evrc, h264, mpeg4, red, cng, SIP Info to 2833
        /// </summary>
        /// <value>Custom audio codec configuration, if any is needed. If provided, must be a simple array containing the prioritized list of desired codecs. Supported codecs are: g711u 64k, g711u 56k, g711a 64k, g711a 56k, g7231, g728, g729, g729A, g729B, g729AB, gms full, rfc2833, t38, ilbc, h263, g722, g722_1, g729D, g729E, amr, amr_wb, efr, evrc, h264, mpeg4, red, cng, SIP Info to 2833</value>
        [DataMember(Name="codecs", EmitDefaultValue=false)]
        public List<string> Codecs { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrunkFull {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  MaxConcurrentCalls: ").Append(MaxConcurrentCalls).Append("\n");
            sb.Append("  MaxMinutesPerMonth: ").Append(MaxMinutesPerMonth).Append("\n");
            sb.Append("  Greeting: ").Append(Greeting).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  Codecs: ").Append(Codecs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TrunkFull);
        }

        /// <summary>
        /// Returns true if TrunkFull instances are equal
        /// </summary>
        /// <param name="other">Instance of TrunkFull to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrunkFull other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Uri == other.Uri ||
                    this.Uri != null &&
                    this.Uri.Equals(other.Uri)
                ) && 
                (
                    this.MaxConcurrentCalls == other.MaxConcurrentCalls ||
                    this.MaxConcurrentCalls != null &&
                    this.MaxConcurrentCalls.Equals(other.MaxConcurrentCalls)
                ) && 
                (
                    this.MaxMinutesPerMonth == other.MaxMinutesPerMonth ||
                    this.MaxMinutesPerMonth != null &&
                    this.MaxMinutesPerMonth.Equals(other.MaxMinutesPerMonth)
                ) && 
                (
                    this.Greeting == other.Greeting ||
                    this.Greeting != null &&
                    this.Greeting.Equals(other.Greeting)
                ) && 
                (
                    this.ErrorMessage == other.ErrorMessage ||
                    this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(other.ErrorMessage)
                ) && 
                (
                    this.Codecs == other.Codecs ||
                    this.Codecs != null &&
                    this.Codecs.SequenceEqual(other.Codecs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Uri != null)
                    hash = hash * 59 + this.Uri.GetHashCode();
                if (this.MaxConcurrentCalls != null)
                    hash = hash * 59 + this.MaxConcurrentCalls.GetHashCode();
                if (this.MaxMinutesPerMonth != null)
                    hash = hash * 59 + this.MaxMinutesPerMonth.GetHashCode();
                if (this.Greeting != null)
                    hash = hash * 59 + this.Greeting.GetHashCode();
                if (this.ErrorMessage != null)
                    hash = hash * 59 + this.ErrorMessage.GetHashCode();
                if (this.Codecs != null)
                    hash = hash * 59 + this.Codecs.GetHashCode();
                return hash;
            }
        }
    }

}
