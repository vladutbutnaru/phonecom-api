/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Array of Forward Item Objects. See below for details. Required.
    /// </summary>
    [DataContract]
    public partial class RuleSetForwardItem :  IEquatable<RuleSetForwardItem>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RuleSetForwardItem" /> class.
        /// </summary>
        /// <param name="Type">Required. Must equal phone_number or extension..</param>
        /// <param name="Extension">Required if type &#x3D; \&quot;extension\&quot;. Extension that callers should be directed to. Output is an Extension Summary Object. Input must be an Extension Lookup Object..</param>
        /// <param name="Number">Required if type &#x3D; \&quot;phone_number\&quot;. Phone number that callers should be directed to. Must be a string in E.164 format..</param>
        /// <param name="Screening">Boolean. Optional. Default is FALSE. Use this to activate call screening. If TRUE, the timeout on the parent action should be at least 30 seconds. (default to false).</param>
        /// <param name="CallerId">Optional. Must equal calling_number or called_number. Defines which phone number should be used for Caller ID. Default is calling_number. (default to &quot;calling_number&quot;).</param>
        /// <param name="VoiceTag">Optional string. If screening &#x3D; TRUE, this value will be passed into our Text-To-Speech engine and used to inform the caller of who they have reached..</param>
        /// <param name="DistinctiveRing">Optional. Must equal one of: DEFAULT, STYLE_2, STYLE_3, STYLE_4, STYLE_5, STYLE_6, STYLE_7, STYLE_8, or STYLE_9. Identifies the style of ring tone you will hear when an incoming call is waiting..</param>
        public RuleSetForwardItem(string Type = null, ExtensionSummary Extension = null, string Number = null, bool? Screening = null, string CallerId = null, string VoiceTag = null, string DistinctiveRing = null)
        {
            this.Type = Type;
            this.Extension = Extension;
            this.Number = Number;
            // use default value if no "Screening" provided
            if (Screening == null)
            {
                this.Screening = false;
            }
            else
            {
                this.Screening = Screening;
            }
            // use default value if no "CallerId" provided
            if (CallerId == null)
            {
                this.CallerId = "calling_number";
            }
            else
            {
                this.CallerId = CallerId;
            }
            this.VoiceTag = VoiceTag;
            this.DistinctiveRing = DistinctiveRing;
        }
        
        /// <summary>
        /// Required. Must equal phone_number or extension.
        /// </summary>
        /// <value>Required. Must equal phone_number or extension.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Required if type &#x3D; \&quot;extension\&quot;. Extension that callers should be directed to. Output is an Extension Summary Object. Input must be an Extension Lookup Object.
        /// </summary>
        /// <value>Required if type &#x3D; \&quot;extension\&quot;. Extension that callers should be directed to. Output is an Extension Summary Object. Input must be an Extension Lookup Object.</value>
        [DataMember(Name="extension", EmitDefaultValue=false)]
        public ExtensionSummary Extension { get; set; }
        /// <summary>
        /// Required if type &#x3D; \&quot;phone_number\&quot;. Phone number that callers should be directed to. Must be a string in E.164 format.
        /// </summary>
        /// <value>Required if type &#x3D; \&quot;phone_number\&quot;. Phone number that callers should be directed to. Must be a string in E.164 format.</value>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public string Number { get; set; }
        /// <summary>
        /// Boolean. Optional. Default is FALSE. Use this to activate call screening. If TRUE, the timeout on the parent action should be at least 30 seconds.
        /// </summary>
        /// <value>Boolean. Optional. Default is FALSE. Use this to activate call screening. If TRUE, the timeout on the parent action should be at least 30 seconds.</value>
        [DataMember(Name="screening", EmitDefaultValue=false)]
        public bool? Screening { get; set; }
        /// <summary>
        /// Optional. Must equal calling_number or called_number. Defines which phone number should be used for Caller ID. Default is calling_number.
        /// </summary>
        /// <value>Optional. Must equal calling_number or called_number. Defines which phone number should be used for Caller ID. Default is calling_number.</value>
        [DataMember(Name="caller_id", EmitDefaultValue=false)]
        public string CallerId { get; set; }
        /// <summary>
        /// Optional string. If screening &#x3D; TRUE, this value will be passed into our Text-To-Speech engine and used to inform the caller of who they have reached.
        /// </summary>
        /// <value>Optional string. If screening &#x3D; TRUE, this value will be passed into our Text-To-Speech engine and used to inform the caller of who they have reached.</value>
        [DataMember(Name="voice_tag", EmitDefaultValue=false)]
        public string VoiceTag { get; set; }
        /// <summary>
        /// Optional. Must equal one of: DEFAULT, STYLE_2, STYLE_3, STYLE_4, STYLE_5, STYLE_6, STYLE_7, STYLE_8, or STYLE_9. Identifies the style of ring tone you will hear when an incoming call is waiting.
        /// </summary>
        /// <value>Optional. Must equal one of: DEFAULT, STYLE_2, STYLE_3, STYLE_4, STYLE_5, STYLE_6, STYLE_7, STYLE_8, or STYLE_9. Identifies the style of ring tone you will hear when an incoming call is waiting.</value>
        [DataMember(Name="distinctive_ring", EmitDefaultValue=false)]
        public string DistinctiveRing { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RuleSetForwardItem {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Screening: ").Append(Screening).Append("\n");
            sb.Append("  CallerId: ").Append(CallerId).Append("\n");
            sb.Append("  VoiceTag: ").Append(VoiceTag).Append("\n");
            sb.Append("  DistinctiveRing: ").Append(DistinctiveRing).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RuleSetForwardItem);
        }

        /// <summary>
        /// Returns true if RuleSetForwardItem instances are equal
        /// </summary>
        /// <param name="other">Instance of RuleSetForwardItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RuleSetForwardItem other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Extension == other.Extension ||
                    this.Extension != null &&
                    this.Extension.Equals(other.Extension)
                ) && 
                (
                    this.Number == other.Number ||
                    this.Number != null &&
                    this.Number.Equals(other.Number)
                ) && 
                (
                    this.Screening == other.Screening ||
                    this.Screening != null &&
                    this.Screening.Equals(other.Screening)
                ) && 
                (
                    this.CallerId == other.CallerId ||
                    this.CallerId != null &&
                    this.CallerId.Equals(other.CallerId)
                ) && 
                (
                    this.VoiceTag == other.VoiceTag ||
                    this.VoiceTag != null &&
                    this.VoiceTag.Equals(other.VoiceTag)
                ) && 
                (
                    this.DistinctiveRing == other.DistinctiveRing ||
                    this.DistinctiveRing != null &&
                    this.DistinctiveRing.Equals(other.DistinctiveRing)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Extension != null)
                    hash = hash * 59 + this.Extension.GetHashCode();
                if (this.Number != null)
                    hash = hash * 59 + this.Number.GetHashCode();
                if (this.Screening != null)
                    hash = hash * 59 + this.Screening.GetHashCode();
                if (this.CallerId != null)
                    hash = hash * 59 + this.CallerId.GetHashCode();
                if (this.VoiceTag != null)
                    hash = hash * 59 + this.VoiceTag.GetHashCode();
                if (this.DistinctiveRing != null)
                    hash = hash * 59 + this.DistinctiveRing.GetHashCode();
                return hash;
            }
        }
    }

}
