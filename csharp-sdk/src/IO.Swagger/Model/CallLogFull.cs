/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The Full Call Log Object includes the properties in the Call Log Summary Object, along with the following:
    /// </summary>
    [DataContract]
    public partial class CallLogFull :  IEquatable<CallLogFull>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CallLogFull" /> class.
        /// </summary>
        /// <param name="Id">ID.</param>
        /// <param name="Uuid">Internal system id, may be null.</param>
        /// <param name="Extension">Account extension.</param>
        /// <param name="CallerId">Call made from this phone number.</param>
        /// <param name="CalledNumber">Call made to this phone number.</param>
        /// <param name="StartTime">Call start time.</param>
        /// <param name="CreatedAt">Call log creation time. Same as call end time + time needed to create call log.</param>
        /// <param name="Direction">Call direction: in or out.</param>
        /// <param name="Type">Call type: call, fax, audiogram ....</param>
        /// <param name="CallDuration">Call duration in seconds.</param>
        /// <param name="IsMonitored">Was call being monitored?.</param>
        /// <param name="CallNumber">Internal system call reference number.</param>
        /// <param name="FinalAction">Last action of call flow.</param>
        /// <param name="CallRecording">URL of call recording if available. Empty string if call recording does not exist.</param>
        /// <param name="Details">A list of call flows from beginning of call to end of call..</param>
        /// <param name="CallerCnam">Internal system caller id / name.</param>
        public CallLogFull(string Id = null, string Uuid = null, ExtensionSummary Extension = null, string CallerId = null, string CalledNumber = null, string StartTime = null, string CreatedAt = null, string Direction = null, string Type = null, int? CallDuration = null, string IsMonitored = null, string CallNumber = null, string FinalAction = null, string CallRecording = null, List<CallDetails> Details = null, string CallerCnam = null)
        {
            this.Id = Id;
            this.Uuid = Uuid;
            this.Extension = Extension;
            this.CallerId = CallerId;
            this.CalledNumber = CalledNumber;
            this.StartTime = StartTime;
            this.CreatedAt = CreatedAt;
            this.Direction = Direction;
            this.Type = Type;
            this.CallDuration = CallDuration;
            this.IsMonitored = IsMonitored;
            this.CallNumber = CallNumber;
            this.FinalAction = FinalAction;
            this.CallRecording = CallRecording;
            this.Details = Details;
            this.CallerCnam = CallerCnam;
        }
        
        /// <summary>
        /// ID
        /// </summary>
        /// <value>ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Internal system id, may be null
        /// </summary>
        /// <value>Internal system id, may be null</value>
        [DataMember(Name="uuid", EmitDefaultValue=false)]
        public string Uuid { get; set; }
        /// <summary>
        /// Account extension
        /// </summary>
        /// <value>Account extension</value>
        [DataMember(Name="extension", EmitDefaultValue=false)]
        public ExtensionSummary Extension { get; set; }
        /// <summary>
        /// Call made from this phone number
        /// </summary>
        /// <value>Call made from this phone number</value>
        [DataMember(Name="caller_id", EmitDefaultValue=false)]
        public string CallerId { get; set; }
        /// <summary>
        /// Call made to this phone number
        /// </summary>
        /// <value>Call made to this phone number</value>
        [DataMember(Name="called_number", EmitDefaultValue=false)]
        public string CalledNumber { get; set; }
        /// <summary>
        /// Call start time
        /// </summary>
        /// <value>Call start time</value>
        [DataMember(Name="start_time", EmitDefaultValue=false)]
        public string StartTime { get; set; }
        /// <summary>
        /// Call log creation time. Same as call end time + time needed to create call log
        /// </summary>
        /// <value>Call log creation time. Same as call end time + time needed to create call log</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }
        /// <summary>
        /// Call direction: in or out
        /// </summary>
        /// <value>Call direction: in or out</value>
        [DataMember(Name="direction", EmitDefaultValue=false)]
        public string Direction { get; set; }
        /// <summary>
        /// Call type: call, fax, audiogram ...
        /// </summary>
        /// <value>Call type: call, fax, audiogram ...</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Call duration in seconds
        /// </summary>
        /// <value>Call duration in seconds</value>
        [DataMember(Name="call_duration", EmitDefaultValue=false)]
        public int? CallDuration { get; set; }
        /// <summary>
        /// Was call being monitored?
        /// </summary>
        /// <value>Was call being monitored?</value>
        [DataMember(Name="is_monitored", EmitDefaultValue=false)]
        public string IsMonitored { get; set; }
        /// <summary>
        /// Internal system call reference number
        /// </summary>
        /// <value>Internal system call reference number</value>
        [DataMember(Name="call_number", EmitDefaultValue=false)]
        public string CallNumber { get; set; }
        /// <summary>
        /// Last action of call flow
        /// </summary>
        /// <value>Last action of call flow</value>
        [DataMember(Name="final_action", EmitDefaultValue=false)]
        public string FinalAction { get; set; }
        /// <summary>
        /// URL of call recording if available. Empty string if call recording does not exist
        /// </summary>
        /// <value>URL of call recording if available. Empty string if call recording does not exist</value>
        [DataMember(Name="call_recording", EmitDefaultValue=false)]
        public string CallRecording { get; set; }
        /// <summary>
        /// A list of call flows from beginning of call to end of call.
        /// </summary>
        /// <value>A list of call flows from beginning of call to end of call.</value>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public List<CallDetails> Details { get; set; }
        /// <summary>
        /// Internal system caller id / name
        /// </summary>
        /// <value>Internal system caller id / name</value>
        [DataMember(Name="caller_cnam", EmitDefaultValue=false)]
        public string CallerCnam { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallLogFull {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("  CallerId: ").Append(CallerId).Append("\n");
            sb.Append("  CalledNumber: ").Append(CalledNumber).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CallDuration: ").Append(CallDuration).Append("\n");
            sb.Append("  IsMonitored: ").Append(IsMonitored).Append("\n");
            sb.Append("  CallNumber: ").Append(CallNumber).Append("\n");
            sb.Append("  FinalAction: ").Append(FinalAction).Append("\n");
            sb.Append("  CallRecording: ").Append(CallRecording).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  CallerCnam: ").Append(CallerCnam).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CallLogFull);
        }

        /// <summary>
        /// Returns true if CallLogFull instances are equal
        /// </summary>
        /// <param name="other">Instance of CallLogFull to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallLogFull other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Uuid == other.Uuid ||
                    this.Uuid != null &&
                    this.Uuid.Equals(other.Uuid)
                ) && 
                (
                    this.Extension == other.Extension ||
                    this.Extension != null &&
                    this.Extension.Equals(other.Extension)
                ) && 
                (
                    this.CallerId == other.CallerId ||
                    this.CallerId != null &&
                    this.CallerId.Equals(other.CallerId)
                ) && 
                (
                    this.CalledNumber == other.CalledNumber ||
                    this.CalledNumber != null &&
                    this.CalledNumber.Equals(other.CalledNumber)
                ) && 
                (
                    this.StartTime == other.StartTime ||
                    this.StartTime != null &&
                    this.StartTime.Equals(other.StartTime)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.Direction == other.Direction ||
                    this.Direction != null &&
                    this.Direction.Equals(other.Direction)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.CallDuration == other.CallDuration ||
                    this.CallDuration != null &&
                    this.CallDuration.Equals(other.CallDuration)
                ) && 
                (
                    this.IsMonitored == other.IsMonitored ||
                    this.IsMonitored != null &&
                    this.IsMonitored.Equals(other.IsMonitored)
                ) && 
                (
                    this.CallNumber == other.CallNumber ||
                    this.CallNumber != null &&
                    this.CallNumber.Equals(other.CallNumber)
                ) && 
                (
                    this.FinalAction == other.FinalAction ||
                    this.FinalAction != null &&
                    this.FinalAction.Equals(other.FinalAction)
                ) && 
                (
                    this.CallRecording == other.CallRecording ||
                    this.CallRecording != null &&
                    this.CallRecording.Equals(other.CallRecording)
                ) && 
                (
                    this.Details == other.Details ||
                    this.Details != null &&
                    this.Details.SequenceEqual(other.Details)
                ) && 
                (
                    this.CallerCnam == other.CallerCnam ||
                    this.CallerCnam != null &&
                    this.CallerCnam.Equals(other.CallerCnam)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Uuid != null)
                    hash = hash * 59 + this.Uuid.GetHashCode();
                if (this.Extension != null)
                    hash = hash * 59 + this.Extension.GetHashCode();
                if (this.CallerId != null)
                    hash = hash * 59 + this.CallerId.GetHashCode();
                if (this.CalledNumber != null)
                    hash = hash * 59 + this.CalledNumber.GetHashCode();
                if (this.StartTime != null)
                    hash = hash * 59 + this.StartTime.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.Direction != null)
                    hash = hash * 59 + this.Direction.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.CallDuration != null)
                    hash = hash * 59 + this.CallDuration.GetHashCode();
                if (this.IsMonitored != null)
                    hash = hash * 59 + this.IsMonitored.GetHashCode();
                if (this.CallNumber != null)
                    hash = hash * 59 + this.CallNumber.GetHashCode();
                if (this.FinalAction != null)
                    hash = hash * 59 + this.FinalAction.GetHashCode();
                if (this.CallRecording != null)
                    hash = hash * 59 + this.CallRecording.GetHashCode();
                if (this.Details != null)
                    hash = hash * 59 + this.Details.GetHashCode();
                if (this.CallerCnam != null)
                    hash = hash * 59 + this.CallerCnam.GetHashCode();
                return hash;
            }
        }
    }

}
