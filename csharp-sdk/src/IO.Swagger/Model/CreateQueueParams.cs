/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CreateQueueParams
    /// </summary>
    [DataContract]
    public partial class CreateQueueParams :  IEquatable<CreateQueueParams>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateQueueParams" /> class.
        /// </summary>
        /// <param name="Name">Name of queue.</param>
        /// <param name="Greeting">Recording lookup object.</param>
        /// <param name="HoldMusic">Recording lookup object.</param>
        /// <param name="MaxHoldTime">Max seconds for hold.</param>
        /// <param name="CallerIdType">Type of caller id.</param>
        /// <param name="RingTime">Number of seconds to ring each member.</param>
        /// <param name="Members">Extensions or phone numbers.</param>
        public CreateQueueParams(string Name = null, Object Greeting = null, Object HoldMusic = null, int? MaxHoldTime = null, string CallerIdType = null, int? RingTime = null, List<Object> Members = null)
        {
            this.Name = Name;
            this.Greeting = Greeting;
            this.HoldMusic = HoldMusic;
            this.MaxHoldTime = MaxHoldTime;
            this.CallerIdType = CallerIdType;
            this.RingTime = RingTime;
            this.Members = Members;
        }
        
        /// <summary>
        /// Name of queue
        /// </summary>
        /// <value>Name of queue</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Recording lookup object
        /// </summary>
        /// <value>Recording lookup object</value>
        [DataMember(Name="greeting", EmitDefaultValue=false)]
        public Object Greeting { get; set; }
        /// <summary>
        /// Recording lookup object
        /// </summary>
        /// <value>Recording lookup object</value>
        [DataMember(Name="hold_music", EmitDefaultValue=false)]
        public Object HoldMusic { get; set; }
        /// <summary>
        /// Max seconds for hold
        /// </summary>
        /// <value>Max seconds for hold</value>
        [DataMember(Name="max_hold_time", EmitDefaultValue=false)]
        public int? MaxHoldTime { get; set; }
        /// <summary>
        /// Type of caller id
        /// </summary>
        /// <value>Type of caller id</value>
        [DataMember(Name="caller_id_type", EmitDefaultValue=false)]
        public string CallerIdType { get; set; }
        /// <summary>
        /// Number of seconds to ring each member
        /// </summary>
        /// <value>Number of seconds to ring each member</value>
        [DataMember(Name="ring_time", EmitDefaultValue=false)]
        public int? RingTime { get; set; }
        /// <summary>
        /// Extensions or phone numbers
        /// </summary>
        /// <value>Extensions or phone numbers</value>
        [DataMember(Name="members", EmitDefaultValue=false)]
        public List<Object> Members { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateQueueParams {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Greeting: ").Append(Greeting).Append("\n");
            sb.Append("  HoldMusic: ").Append(HoldMusic).Append("\n");
            sb.Append("  MaxHoldTime: ").Append(MaxHoldTime).Append("\n");
            sb.Append("  CallerIdType: ").Append(CallerIdType).Append("\n");
            sb.Append("  RingTime: ").Append(RingTime).Append("\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CreateQueueParams);
        }

        /// <summary>
        /// Returns true if CreateQueueParams instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateQueueParams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateQueueParams other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Greeting == other.Greeting ||
                    this.Greeting != null &&
                    this.Greeting.Equals(other.Greeting)
                ) && 
                (
                    this.HoldMusic == other.HoldMusic ||
                    this.HoldMusic != null &&
                    this.HoldMusic.Equals(other.HoldMusic)
                ) && 
                (
                    this.MaxHoldTime == other.MaxHoldTime ||
                    this.MaxHoldTime != null &&
                    this.MaxHoldTime.Equals(other.MaxHoldTime)
                ) && 
                (
                    this.CallerIdType == other.CallerIdType ||
                    this.CallerIdType != null &&
                    this.CallerIdType.Equals(other.CallerIdType)
                ) && 
                (
                    this.RingTime == other.RingTime ||
                    this.RingTime != null &&
                    this.RingTime.Equals(other.RingTime)
                ) && 
                (
                    this.Members == other.Members ||
                    this.Members != null &&
                    this.Members.SequenceEqual(other.Members)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Greeting != null)
                    hash = hash * 59 + this.Greeting.GetHashCode();
                if (this.HoldMusic != null)
                    hash = hash * 59 + this.HoldMusic.GetHashCode();
                if (this.MaxHoldTime != null)
                    hash = hash * 59 + this.MaxHoldTime.GetHashCode();
                if (this.CallerIdType != null)
                    hash = hash * 59 + this.CallerIdType.GetHashCode();
                if (this.RingTime != null)
                    hash = hash * 59 + this.RingTime.GetHashCode();
                if (this.Members != null)
                    hash = hash * 59 + this.Members.GetHashCode();
                return hash;
            }
        }
    }

}
