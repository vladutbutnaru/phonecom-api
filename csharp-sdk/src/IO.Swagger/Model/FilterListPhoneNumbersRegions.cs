/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FilterListPhoneNumbersRegions
    /// </summary>
    [DataContract]
    public partial class FilterListPhoneNumbersRegions :  IEquatable<FilterListPhoneNumbersRegions>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FilterListPhoneNumbersRegions" /> class.
        /// </summary>
        /// <param name="CountryCode">CountryCode.</param>
        /// <param name="Npa">Npa.</param>
        /// <param name="Nxx">Nxx.</param>
        /// <param name="IsTollFree">IsTollFree.</param>
        /// <param name="City">City.</param>
        /// <param name="ProvincePostalCode">ProvincePostalCode.</param>
        /// <param name="CountryPostalCode">CountryPostalCode.</param>
        public FilterListPhoneNumbersRegions(string CountryCode = null, List<int?> Npa = null, string Nxx = null, string IsTollFree = null, string City = null, string ProvincePostalCode = null, string CountryPostalCode = null)
        {
            this.CountryCode = CountryCode;
            this.Npa = Npa;
            this.Nxx = Nxx;
            this.IsTollFree = IsTollFree;
            this.City = City;
            this.ProvincePostalCode = ProvincePostalCode;
            this.CountryPostalCode = CountryPostalCode;
        }
        
        /// <summary>
        /// Gets or Sets CountryCode
        /// </summary>
        [DataMember(Name="country_code", EmitDefaultValue=false)]
        public string CountryCode { get; set; }
        /// <summary>
        /// Gets or Sets Npa
        /// </summary>
        [DataMember(Name="npa", EmitDefaultValue=false)]
        public List<int?> Npa { get; set; }
        /// <summary>
        /// Gets or Sets Nxx
        /// </summary>
        [DataMember(Name="nxx", EmitDefaultValue=false)]
        public string Nxx { get; set; }
        /// <summary>
        /// Gets or Sets IsTollFree
        /// </summary>
        [DataMember(Name="is_toll_free", EmitDefaultValue=false)]
        public string IsTollFree { get; set; }
        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }
        /// <summary>
        /// Gets or Sets ProvincePostalCode
        /// </summary>
        [DataMember(Name="province_postal_code", EmitDefaultValue=false)]
        public string ProvincePostalCode { get; set; }
        /// <summary>
        /// Gets or Sets CountryPostalCode
        /// </summary>
        [DataMember(Name="country_postal_code", EmitDefaultValue=false)]
        public string CountryPostalCode { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FilterListPhoneNumbersRegions {\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  Npa: ").Append(Npa).Append("\n");
            sb.Append("  Nxx: ").Append(Nxx).Append("\n");
            sb.Append("  IsTollFree: ").Append(IsTollFree).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  ProvincePostalCode: ").Append(ProvincePostalCode).Append("\n");
            sb.Append("  CountryPostalCode: ").Append(CountryPostalCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FilterListPhoneNumbersRegions);
        }

        /// <summary>
        /// Returns true if FilterListPhoneNumbersRegions instances are equal
        /// </summary>
        /// <param name="other">Instance of FilterListPhoneNumbersRegions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FilterListPhoneNumbersRegions other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CountryCode == other.CountryCode ||
                    this.CountryCode != null &&
                    this.CountryCode.Equals(other.CountryCode)
                ) && 
                (
                    this.Npa == other.Npa ||
                    this.Npa != null &&
                    this.Npa.SequenceEqual(other.Npa)
                ) && 
                (
                    this.Nxx == other.Nxx ||
                    this.Nxx != null &&
                    this.Nxx.Equals(other.Nxx)
                ) && 
                (
                    this.IsTollFree == other.IsTollFree ||
                    this.IsTollFree != null &&
                    this.IsTollFree.Equals(other.IsTollFree)
                ) && 
                (
                    this.City == other.City ||
                    this.City != null &&
                    this.City.Equals(other.City)
                ) && 
                (
                    this.ProvincePostalCode == other.ProvincePostalCode ||
                    this.ProvincePostalCode != null &&
                    this.ProvincePostalCode.Equals(other.ProvincePostalCode)
                ) && 
                (
                    this.CountryPostalCode == other.CountryPostalCode ||
                    this.CountryPostalCode != null &&
                    this.CountryPostalCode.Equals(other.CountryPostalCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CountryCode != null)
                    hash = hash * 59 + this.CountryCode.GetHashCode();
                if (this.Npa != null)
                    hash = hash * 59 + this.Npa.GetHashCode();
                if (this.Nxx != null)
                    hash = hash * 59 + this.Nxx.GetHashCode();
                if (this.IsTollFree != null)
                    hash = hash * 59 + this.IsTollFree.GetHashCode();
                if (this.City != null)
                    hash = hash * 59 + this.City.GetHashCode();
                if (this.ProvincePostalCode != null)
                    hash = hash * 59 + this.ProvincePostalCode.GetHashCode();
                if (this.CountryPostalCode != null)
                    hash = hash * 59 + this.CountryPostalCode.GetHashCode();
                return hash;
            }
        }
    }

}
