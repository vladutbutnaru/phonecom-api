/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The Full SMS Object includes all of the properties in the SMS Summary Object, along with several more.
    /// </summary>
    [DataContract]
    public partial class SmsFull :  IEquatable<SmsFull>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SmsFull" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SmsFull() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SmsFull" /> class.
        /// </summary>
        /// <param name="Id">Unique SMS ID. Read-only. (required).</param>
        /// <param name="From">Caller ID number to display on the incoming/outgoing SMS message. For an outgoing message, it must be a phone number associated with your Phone.com account. (required).</param>
        /// <param name="To">An array of SMS recipients. (required).</param>
        /// <param name="Direction">Direction of SMS. &#39;in&#39; for Incoming messages, &#39;out&#39; for Outgoing messages. (required).</param>
        /// <param name="CreatedEpoch">Unix time stamp representing the UTC time that the object was created in the Phone.com API system. (required).</param>
        /// <param name="CreatedAt">Date string representing the UTC time that the object was created in the Phone.com API system. (required).</param>
        /// <param name="Text">Body of the SMS text (required).</param>
        public SmsFull(string Id = null, string From = null, List<Recipient> To = null, string Direction = null, int? CreatedEpoch = null, DateTime? CreatedAt = null, string Text = null)
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for SmsFull and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "From" is required (not null)
            if (From == null)
            {
                throw new InvalidDataException("From is a required property for SmsFull and cannot be null");
            }
            else
            {
                this.From = From;
            }
            // to ensure "To" is required (not null)
            if (To == null)
            {
                throw new InvalidDataException("To is a required property for SmsFull and cannot be null");
            }
            else
            {
                this.To = To;
            }
            // to ensure "Direction" is required (not null)
            if (Direction == null)
            {
                throw new InvalidDataException("Direction is a required property for SmsFull and cannot be null");
            }
            else
            {
                this.Direction = Direction;
            }
            // to ensure "CreatedEpoch" is required (not null)
            if (CreatedEpoch == null)
            {
                throw new InvalidDataException("CreatedEpoch is a required property for SmsFull and cannot be null");
            }
            else
            {
                this.CreatedEpoch = CreatedEpoch;
            }
            // to ensure "CreatedAt" is required (not null)
            if (CreatedAt == null)
            {
                throw new InvalidDataException("CreatedAt is a required property for SmsFull and cannot be null");
            }
            else
            {
                this.CreatedAt = CreatedAt;
            }
            // to ensure "Text" is required (not null)
            if (Text == null)
            {
                throw new InvalidDataException("Text is a required property for SmsFull and cannot be null");
            }
            else
            {
                this.Text = Text;
            }
        }
        
        /// <summary>
        /// Unique SMS ID. Read-only.
        /// </summary>
        /// <value>Unique SMS ID. Read-only.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Caller ID number to display on the incoming/outgoing SMS message. For an outgoing message, it must be a phone number associated with your Phone.com account.
        /// </summary>
        /// <value>Caller ID number to display on the incoming/outgoing SMS message. For an outgoing message, it must be a phone number associated with your Phone.com account.</value>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public string From { get; set; }
        /// <summary>
        /// An array of SMS recipients.
        /// </summary>
        /// <value>An array of SMS recipients.</value>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public List<Recipient> To { get; set; }
        /// <summary>
        /// Direction of SMS. &#39;in&#39; for Incoming messages, &#39;out&#39; for Outgoing messages.
        /// </summary>
        /// <value>Direction of SMS. &#39;in&#39; for Incoming messages, &#39;out&#39; for Outgoing messages.</value>
        [DataMember(Name="direction", EmitDefaultValue=false)]
        public string Direction { get; set; }
        /// <summary>
        /// Unix time stamp representing the UTC time that the object was created in the Phone.com API system.
        /// </summary>
        /// <value>Unix time stamp representing the UTC time that the object was created in the Phone.com API system.</value>
        [DataMember(Name="created_epoch", EmitDefaultValue=false)]
        public int? CreatedEpoch { get; set; }
        /// <summary>
        /// Date string representing the UTC time that the object was created in the Phone.com API system.
        /// </summary>
        /// <value>Date string representing the UTC time that the object was created in the Phone.com API system.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }
        /// <summary>
        /// Body of the SMS text
        /// </summary>
        /// <value>Body of the SMS text</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmsFull {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  CreatedEpoch: ").Append(CreatedEpoch).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SmsFull);
        }

        /// <summary>
        /// Returns true if SmsFull instances are equal
        /// </summary>
        /// <param name="other">Instance of SmsFull to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmsFull other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.From == other.From ||
                    this.From != null &&
                    this.From.Equals(other.From)
                ) && 
                (
                    this.To == other.To ||
                    this.To != null &&
                    this.To.SequenceEqual(other.To)
                ) && 
                (
                    this.Direction == other.Direction ||
                    this.Direction != null &&
                    this.Direction.Equals(other.Direction)
                ) && 
                (
                    this.CreatedEpoch == other.CreatedEpoch ||
                    this.CreatedEpoch != null &&
                    this.CreatedEpoch.Equals(other.CreatedEpoch)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.Text == other.Text ||
                    this.Text != null &&
                    this.Text.Equals(other.Text)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.From != null)
                    hash = hash * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hash = hash * 59 + this.To.GetHashCode();
                if (this.Direction != null)
                    hash = hash * 59 + this.Direction.GetHashCode();
                if (this.CreatedEpoch != null)
                    hash = hash * 59 + this.CreatedEpoch.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.Text != null)
                    hash = hash * 59 + this.Text.GetHashCode();
                return hash;
            }
        }
    }

}
