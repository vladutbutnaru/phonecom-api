/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CreateTrunkParams
    /// </summary>
    [DataContract]
    public partial class CreateTrunkParams :  IEquatable<CreateTrunkParams>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTrunkParams" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateTrunkParams() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTrunkParams" /> class.
        /// </summary>
        /// <param name="Name">Name of Trunk (required).</param>
        /// <param name="Url">URI of Trunk (in the form of SIP/user@host.com:port) (required).</param>
        /// <param name="MaxConcurrentCalls">Max concurrent calls.</param>
        /// <param name="MaxMinutesPerMonth">Max minutes per month.</param>
        /// <param name="Greeting">Recording lookup object.</param>
        /// <param name="ErrorMessage">Recording lookup object.</param>
        /// <param name="Codecs">Custom audio codec configuration.</param>
        public CreateTrunkParams(string Name = null, string Url = null, int? MaxConcurrentCalls = null, int? MaxMinutesPerMonth = null, Object Greeting = null, Object ErrorMessage = null, List<Object> Codecs = null)
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for CreateTrunkParams and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Url" is required (not null)
            if (Url == null)
            {
                throw new InvalidDataException("Url is a required property for CreateTrunkParams and cannot be null");
            }
            else
            {
                this.Url = Url;
            }
            this.MaxConcurrentCalls = MaxConcurrentCalls;
            this.MaxMinutesPerMonth = MaxMinutesPerMonth;
            this.Greeting = Greeting;
            this.ErrorMessage = ErrorMessage;
            this.Codecs = Codecs;
        }
        
        /// <summary>
        /// Name of Trunk
        /// </summary>
        /// <value>Name of Trunk</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// URI of Trunk (in the form of SIP/user@host.com:port)
        /// </summary>
        /// <value>URI of Trunk (in the form of SIP/user@host.com:port)</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }
        /// <summary>
        /// Max concurrent calls
        /// </summary>
        /// <value>Max concurrent calls</value>
        [DataMember(Name="max_concurrent_calls", EmitDefaultValue=false)]
        public int? MaxConcurrentCalls { get; set; }
        /// <summary>
        /// Max minutes per month
        /// </summary>
        /// <value>Max minutes per month</value>
        [DataMember(Name="max_minutes_per_month", EmitDefaultValue=false)]
        public int? MaxMinutesPerMonth { get; set; }
        /// <summary>
        /// Recording lookup object
        /// </summary>
        /// <value>Recording lookup object</value>
        [DataMember(Name="greeting", EmitDefaultValue=false)]
        public Object Greeting { get; set; }
        /// <summary>
        /// Recording lookup object
        /// </summary>
        /// <value>Recording lookup object</value>
        [DataMember(Name="error_message", EmitDefaultValue=false)]
        public Object ErrorMessage { get; set; }
        /// <summary>
        /// Custom audio codec configuration
        /// </summary>
        /// <value>Custom audio codec configuration</value>
        [DataMember(Name="codecs", EmitDefaultValue=false)]
        public List<Object> Codecs { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateTrunkParams {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  MaxConcurrentCalls: ").Append(MaxConcurrentCalls).Append("\n");
            sb.Append("  MaxMinutesPerMonth: ").Append(MaxMinutesPerMonth).Append("\n");
            sb.Append("  Greeting: ").Append(Greeting).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  Codecs: ").Append(Codecs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CreateTrunkParams);
        }

        /// <summary>
        /// Returns true if CreateTrunkParams instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateTrunkParams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateTrunkParams other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Url == other.Url ||
                    this.Url != null &&
                    this.Url.Equals(other.Url)
                ) && 
                (
                    this.MaxConcurrentCalls == other.MaxConcurrentCalls ||
                    this.MaxConcurrentCalls != null &&
                    this.MaxConcurrentCalls.Equals(other.MaxConcurrentCalls)
                ) && 
                (
                    this.MaxMinutesPerMonth == other.MaxMinutesPerMonth ||
                    this.MaxMinutesPerMonth != null &&
                    this.MaxMinutesPerMonth.Equals(other.MaxMinutesPerMonth)
                ) && 
                (
                    this.Greeting == other.Greeting ||
                    this.Greeting != null &&
                    this.Greeting.Equals(other.Greeting)
                ) && 
                (
                    this.ErrorMessage == other.ErrorMessage ||
                    this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(other.ErrorMessage)
                ) && 
                (
                    this.Codecs == other.Codecs ||
                    this.Codecs != null &&
                    this.Codecs.SequenceEqual(other.Codecs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Url != null)
                    hash = hash * 59 + this.Url.GetHashCode();
                if (this.MaxConcurrentCalls != null)
                    hash = hash * 59 + this.MaxConcurrentCalls.GetHashCode();
                if (this.MaxMinutesPerMonth != null)
                    hash = hash * 59 + this.MaxMinutesPerMonth.GetHashCode();
                if (this.Greeting != null)
                    hash = hash * 59 + this.Greeting.GetHashCode();
                if (this.ErrorMessage != null)
                    hash = hash * 59 + this.ErrorMessage.GetHashCode();
                if (this.Codecs != null)
                    hash = hash * 59 + this.Codecs.GetHashCode();
                return hash;
            }
        }
    }

}
