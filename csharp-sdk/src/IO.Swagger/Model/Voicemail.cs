/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Voicemail Object. See below for details.
    /// </summary>
    [DataContract]
    public partial class Voicemail :  IEquatable<Voicemail>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Voicemail" /> class.
        /// </summary>
        /// <param name="Enabled">Whether voicemail is enabled. Boolean..</param>
        /// <param name="Password">Password for accessing voicemail box. Must be digits only..</param>
        /// <param name="Greeting">Greeting.</param>
        /// <param name="Attachments">If notification emails are being used, this defines the format of the audio attachments. Can be \&quot;wav\&quot; for WAV format, \&quot;mp3\&quot; for MP3 format, or NULL to disable attachments..</param>
        /// <param name="Notifications">Voicemail Notifications Object. See below for details. Can be set to NULL to disable notifications..</param>
        /// <param name="Transcription">Type of voicemail transcription to use. Can be \&quot;human\&quot; for high-quality manual transcriptions by human operators, \&quot;automated\&quot; for machine-generated transcriptions, or NULL to omit trancriptions. Changing this option will affect your monthly bill. Please see our Control Panel or contact Customer Service for details..</param>
        public Voicemail(bool? Enabled = null, string Password = null, Greeting Greeting = null, string Attachments = null, Notification Notifications = null, string Transcription = null)
        {
            this.Enabled = Enabled;
            this.Password = Password;
            this.Greeting = Greeting;
            this.Attachments = Attachments;
            this.Notifications = Notifications;
            this.Transcription = Transcription;
        }
        
        /// <summary>
        /// Whether voicemail is enabled. Boolean.
        /// </summary>
        /// <value>Whether voicemail is enabled. Boolean.</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }
        /// <summary>
        /// Password for accessing voicemail box. Must be digits only.
        /// </summary>
        /// <value>Password for accessing voicemail box. Must be digits only.</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }
        /// <summary>
        /// Gets or Sets Greeting
        /// </summary>
        [DataMember(Name="greeting", EmitDefaultValue=false)]
        public Greeting Greeting { get; set; }
        /// <summary>
        /// If notification emails are being used, this defines the format of the audio attachments. Can be \&quot;wav\&quot; for WAV format, \&quot;mp3\&quot; for MP3 format, or NULL to disable attachments.
        /// </summary>
        /// <value>If notification emails are being used, this defines the format of the audio attachments. Can be \&quot;wav\&quot; for WAV format, \&quot;mp3\&quot; for MP3 format, or NULL to disable attachments.</value>
        [DataMember(Name="attachments", EmitDefaultValue=false)]
        public string Attachments { get; set; }
        /// <summary>
        /// Voicemail Notifications Object. See below for details. Can be set to NULL to disable notifications.
        /// </summary>
        /// <value>Voicemail Notifications Object. See below for details. Can be set to NULL to disable notifications.</value>
        [DataMember(Name="notifications", EmitDefaultValue=false)]
        public Notification Notifications { get; set; }
        /// <summary>
        /// Type of voicemail transcription to use. Can be \&quot;human\&quot; for high-quality manual transcriptions by human operators, \&quot;automated\&quot; for machine-generated transcriptions, or NULL to omit trancriptions. Changing this option will affect your monthly bill. Please see our Control Panel or contact Customer Service for details.
        /// </summary>
        /// <value>Type of voicemail transcription to use. Can be \&quot;human\&quot; for high-quality manual transcriptions by human operators, \&quot;automated\&quot; for machine-generated transcriptions, or NULL to omit trancriptions. Changing this option will affect your monthly bill. Please see our Control Panel or contact Customer Service for details.</value>
        [DataMember(Name="transcription", EmitDefaultValue=false)]
        public string Transcription { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Voicemail {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Greeting: ").Append(Greeting).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("  Transcription: ").Append(Transcription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Voicemail);
        }

        /// <summary>
        /// Returns true if Voicemail instances are equal
        /// </summary>
        /// <param name="other">Instance of Voicemail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Voicemail other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Enabled == other.Enabled ||
                    this.Enabled != null &&
                    this.Enabled.Equals(other.Enabled)
                ) && 
                (
                    this.Password == other.Password ||
                    this.Password != null &&
                    this.Password.Equals(other.Password)
                ) && 
                (
                    this.Greeting == other.Greeting ||
                    this.Greeting != null &&
                    this.Greeting.Equals(other.Greeting)
                ) && 
                (
                    this.Attachments == other.Attachments ||
                    this.Attachments != null &&
                    this.Attachments.Equals(other.Attachments)
                ) && 
                (
                    this.Notifications == other.Notifications ||
                    this.Notifications != null &&
                    this.Notifications.Equals(other.Notifications)
                ) && 
                (
                    this.Transcription == other.Transcription ||
                    this.Transcription != null &&
                    this.Transcription.Equals(other.Transcription)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Enabled != null)
                    hash = hash * 59 + this.Enabled.GetHashCode();
                if (this.Password != null)
                    hash = hash * 59 + this.Password.GetHashCode();
                if (this.Greeting != null)
                    hash = hash * 59 + this.Greeting.GetHashCode();
                if (this.Attachments != null)
                    hash = hash * 59 + this.Attachments.GetHashCode();
                if (this.Notifications != null)
                    hash = hash * 59 + this.Notifications.GetHashCode();
                if (this.Transcription != null)
                    hash = hash * 59 + this.Transcription.GetHashCode();
                return hash;
            }
        }
    }

}
