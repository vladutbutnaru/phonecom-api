/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing PhonenumbersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class PhonenumbersApiTests
    {
        private PhonenumbersApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PhonenumbersApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PhonenumbersApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' PhonenumbersApi
            //Assert.IsInstanceOfType(typeof(PhonenumbersApi), instance, "instance is a PhonenumbersApi");
        }

        
        /// <summary>
        /// Test CreateAccountPhoneNumber
        /// </summary>
        [Test]
        public void CreateAccountPhoneNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? accountId = null;
            //CreatePhoneNumberParams data = null;
            //var response = instance.CreateAccountPhoneNumber(accountId, data);
            //Assert.IsInstanceOf<PhoneNumberFull> (response, "response is PhoneNumberFull");
        }
        
        /// <summary>
        /// Test GetAccountPhoneNumber
        /// </summary>
        [Test]
        public void GetAccountPhoneNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? accountId = null;
            //int? numberId = null;
            //var response = instance.GetAccountPhoneNumber(accountId, numberId);
            //Assert.IsInstanceOf<PhoneNumberFull> (response, "response is PhoneNumberFull");
        }
        
        /// <summary>
        /// Test ListAccountPhoneNumbers
        /// </summary>
        [Test]
        public void ListAccountPhoneNumbersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? accountId = null;
            //List<string> filtersId = null;
            //List<string> filtersName = null;
            //List<string> filtersPhoneNumber = null;
            //string sortId = null;
            //string sortName = null;
            //string sortPhoneNumber = null;
            //int? limit = null;
            //int? offset = null;
            //string fields = null;
            //var response = instance.ListAccountPhoneNumbers(accountId, filtersId, filtersName, filtersPhoneNumber, sortId, sortName, sortPhoneNumber, limit, offset, fields);
            //Assert.IsInstanceOf<ListPhoneNumbersFull> (response, "response is ListPhoneNumbersFull");
        }
        
        /// <summary>
        /// Test ReplaceAccountPhoneNumber
        /// </summary>
        [Test]
        public void ReplaceAccountPhoneNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? accountId = null;
            //int? numberId = null;
            //ReplacePhoneNumberParams data = null;
            //var response = instance.ReplaceAccountPhoneNumber(accountId, numberId, data);
            //Assert.IsInstanceOf<PhoneNumberFull> (response, "response is PhoneNumberFull");
        }
        
    }

}
