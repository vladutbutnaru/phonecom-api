/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing SmsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SmsApiTests
    {
        private SmsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SmsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SmsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SmsApi
            //Assert.IsInstanceOfType(typeof(SmsApi), instance, "instance is a SmsApi");
        }

        
        /// <summary>
        /// Test CreateAccountSms
        /// </summary>
        [Test]
        public void CreateAccountSmsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? accountId = null;
            //CreateSmsParams data = null;
            //var response = instance.CreateAccountSms(accountId, data);
            //Assert.IsInstanceOf<SmsFull> (response, "response is SmsFull");
        }
        
        /// <summary>
        /// Test GetAccountSms
        /// </summary>
        [Test]
        public void GetAccountSmsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? accountId = null;
            //int? smsId = null;
            //var response = instance.GetAccountSms(accountId, smsId);
            //Assert.IsInstanceOf<SmsFull> (response, "response is SmsFull");
        }
        
        /// <summary>
        /// Test ListAccountSms
        /// </summary>
        [Test]
        public void ListAccountSmsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? accountId = null;
            //List<string> filtersId = null;
            //string filtersDirection = null;
            //string filtersFrom = null;
            //string sortId = null;
            //string sortCreatedAt = null;
            //int? limit = null;
            //int? offset = null;
            //string fields = null;
            //var response = instance.ListAccountSms(accountId, filtersId, filtersDirection, filtersFrom, sortId, sortCreatedAt, limit, offset, fields);
            //Assert.IsInstanceOf<ListSmsFull> (response, "response is ListSmsFull");
        }
        
    }

}
