/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing GroupsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class GroupsApiTests
    {
        private GroupsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new GroupsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of GroupsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' GroupsApi
            //Assert.IsInstanceOfType(typeof(GroupsApi), instance, "instance is a GroupsApi");
        }

        
        /// <summary>
        /// Test CreateAccountExtensionContactGroup
        /// </summary>
        [Test]
        public void CreateAccountExtensionContactGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? accountId = null;
            //int? extensionId = null;
            //CreateGroupParams data = null;
            //var response = instance.CreateAccountExtensionContactGroup(accountId, extensionId, data);
            //Assert.IsInstanceOf<GroupFull> (response, "response is GroupFull");
        }
        
        /// <summary>
        /// Test DeleteAccountExtensionContactGroup
        /// </summary>
        [Test]
        public void DeleteAccountExtensionContactGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? accountId = null;
            //int? extensionId = null;
            //int? groupId = null;
            //var response = instance.DeleteAccountExtensionContactGroup(accountId, extensionId, groupId);
            //Assert.IsInstanceOf<DeleteGroup> (response, "response is DeleteGroup");
        }
        
        /// <summary>
        /// Test GetAccountExtensionContactGroup
        /// </summary>
        [Test]
        public void GetAccountExtensionContactGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? accountId = null;
            //int? extensionId = null;
            //int? groupId = null;
            //var response = instance.GetAccountExtensionContactGroup(accountId, extensionId, groupId);
            //Assert.IsInstanceOf<GroupFull> (response, "response is GroupFull");
        }
        
        /// <summary>
        /// Test ListAccountExtensionContactGroups
        /// </summary>
        [Test]
        public void ListAccountExtensionContactGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? accountId = null;
            //int? extensionId = null;
            //List<string> filtersId = null;
            //List<string> filtersName = null;
            //string sortId = null;
            //string sortName = null;
            //int? limit = null;
            //int? offset = null;
            //string fields = null;
            //var response = instance.ListAccountExtensionContactGroups(accountId, extensionId, filtersId, filtersName, sortId, sortName, limit, offset, fields);
            //Assert.IsInstanceOf<ListGroupsFull> (response, "response is ListGroupsFull");
        }
        
        /// <summary>
        /// Test ReplaceAccountExtensionContactGroup
        /// </summary>
        [Test]
        public void ReplaceAccountExtensionContactGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? accountId = null;
            //int? extensionId = null;
            //int? groupId = null;
            //var response = instance.ReplaceAccountExtensionContactGroup(accountId, extensionId, groupId);
            //Assert.IsInstanceOf<GroupFull> (response, "response is GroupFull");
        }
        
    }

}
