=begin
#Phone.com API

#This is a Phone.com api Swagger definition

OpenAPI spec version: 1.0.0
Contact: apisupport@phone.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class SmsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Send a SMS to one or a group of recipients
    # For more on the input fields, see Intro to SMS.
    # @param account_id Account ID
    # @param data SMS data
    # @param [Hash] opts the optional parameters
    # @return [SmsFull]
    def create_account_sms(account_id, data, opts = {})
      data, _status_code, _headers = create_account_sms_with_http_info(account_id, data, opts)
      return data
    end

    # Send a SMS to one or a group of recipients
    # For more on the input fields, see Intro to SMS.
    # @param account_id Account ID
    # @param data SMS data
    # @param [Hash] opts the optional parameters
    # @return [Array<(SmsFull, Fixnum, Hash)>] SmsFull data, response status code and response headers
    def create_account_sms_with_http_info(account_id, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SmsApi.create_account_sms ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling SmsApi.create_account_sms" if account_id.nil?
      # verify the required parameter 'data' is set
      fail ArgumentError, "Missing the required parameter 'data' when calling SmsApi.create_account_sms" if data.nil?
      # resource path
      local_var_path = "/accounts/{account_id}/sms".sub('{format}','json').sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(data)
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SmsFull')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SmsApi#create_account_sms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show details of an individual SMS
    # This service shows the details of an individual sms. See Intro to SMS for more info on the properties.
    # @param account_id Account ID
    # @param sms_id SMS ID
    # @param [Hash] opts the optional parameters
    # @return [SmsFull]
    def get_account_sms(account_id, sms_id, opts = {})
      data, _status_code, _headers = get_account_sms_with_http_info(account_id, sms_id, opts)
      return data
    end

    # Show details of an individual SMS
    # This service shows the details of an individual sms. See Intro to SMS for more info on the properties.
    # @param account_id Account ID
    # @param sms_id SMS ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(SmsFull, Fixnum, Hash)>] SmsFull data, response status code and response headers
    def get_account_sms_with_http_info(account_id, sms_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SmsApi.get_account_sms ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling SmsApi.get_account_sms" if account_id.nil?
      # verify the required parameter 'sms_id' is set
      fail ArgumentError, "Missing the required parameter 'sms_id' when calling SmsApi.get_account_sms" if sms_id.nil?
      # resource path
      local_var_path = "/accounts/{account_id}/sms/{sms_id}".sub('{format}','json').sub('{' + 'account_id' + '}', account_id.to_s).sub('{' + 'sms_id' + '}', sms_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SmsFull')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SmsApi#get_account_sms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of SMS messages for an account
    # See Intro to SMS for more info on the properties.
    # @param account_id Account ID
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :filters_id ID filter
    # @option opts [String] :filters_direction Direction filter
    # @option opts [String] :filters_from Caller ID filter
    # @option opts [String] :sort_id ID sorting
    # @option opts [String] :sort_created_at Sort by created time of message
    # @option opts [Integer] :limit Max results
    # @option opts [Integer] :offset Results to skip
    # @option opts [String] :fields Field set
    # @return [ListSmsFull]
    def list_account_sms(account_id, opts = {})
      data, _status_code, _headers = list_account_sms_with_http_info(account_id, opts)
      return data
    end

    # Get a list of SMS messages for an account
    # See Intro to SMS for more info on the properties.
    # @param account_id Account ID
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :filters_id ID filter
    # @option opts [String] :filters_direction Direction filter
    # @option opts [String] :filters_from Caller ID filter
    # @option opts [String] :sort_id ID sorting
    # @option opts [String] :sort_created_at Sort by created time of message
    # @option opts [Integer] :limit Max results
    # @option opts [Integer] :offset Results to skip
    # @option opts [String] :fields Field set
    # @return [Array<(ListSmsFull, Fixnum, Hash)>] ListSmsFull data, response status code and response headers
    def list_account_sms_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SmsApi.list_account_sms ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling SmsApi.list_account_sms" if account_id.nil?
      if !opts[:'filters_direction'].nil? && opts[:'filters_direction'] !~ Regexp.new(^eq:.*|^ne:.*|^lt:.*|^gt:.*|^lte:.*|^gte:.*|^starts-with:.*|^ends-with:.*|^contains:.*|^not-starts-with:.*|^not-ends-with:.*|^not-contains:.*|^between:.*,.*|^not-between:.*,.*)
        fail ArgumentError, 'invalid value for "opts[:"filters_direction"]" when calling SmsApi.list_account_sms, must conform to the pattern ^eq:.*|^ne:.*|^lt:.*|^gt:.*|^lte:.*|^gte:.*|^starts-with:.*|^ends-with:.*|^contains:.*|^not-starts-with:.*|^not-ends-with:.*|^not-contains:.*|^between:.*,.*|^not-between:.*,.*.'
      end

      if !opts[:'filters_from'].nil? && opts[:'filters_from'] !~ Regexp.new(^eq:.*|^ne:.*|^lt:.*|^gt:.*|^lte:.*|^gte:.*|^starts-with:.*|^ends-with:.*|^contains:.*|^not-starts-with:.*|^not-ends-with:.*|^not-contains:.*|^between:.*,.*|^not-between:.*,.*)
        fail ArgumentError, 'invalid value for "opts[:"filters_from"]" when calling SmsApi.list_account_sms, must conform to the pattern ^eq:.*|^ne:.*|^lt:.*|^gt:.*|^lte:.*|^gte:.*|^starts-with:.*|^ends-with:.*|^contains:.*|^not-starts-with:.*|^not-ends-with:.*|^not-contains:.*|^between:.*,.*|^not-between:.*,.*.'
      end

      if !opts[:'sort_id'].nil? && opts[:'sort_id'] !~ Regexp.new(asc|desc)
        fail ArgumentError, 'invalid value for "opts[:"sort_id"]" when calling SmsApi.list_account_sms, must conform to the pattern asc|desc.'
      end

      if !opts[:'sort_created_at'].nil? && opts[:'sort_created_at'] !~ Regexp.new(asc|desc)
        fail ArgumentError, 'invalid value for "opts[:"sort_created_at"]" when calling SmsApi.list_account_sms, must conform to the pattern asc|desc.'
      end

      # resource path
      local_var_path = "/accounts/{account_id}/sms".sub('{format}','json').sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filters[id]'] = @api_client.build_collection_param(opts[:'filters_id'], :multi) if !opts[:'filters_id'].nil?
      query_params[:'filters[direction]'] = opts[:'filters_direction'] if !opts[:'filters_direction'].nil?
      query_params[:'filters[from]'] = opts[:'filters_from'] if !opts[:'filters_from'].nil?
      query_params[:'sort[id]'] = opts[:'sort_id'] if !opts[:'sort_id'].nil?
      query_params[:'sort[created_at]'] = opts[:'sort_created_at'] if !opts[:'sort_created_at'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListSmsFull')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SmsApi#list_account_sms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
