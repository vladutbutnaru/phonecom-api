=begin
#Phone.com API

#This is a Phone.com api Swagger definition

OpenAPI spec version: 1.0.0
Contact: apisupport@phone.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class ContactsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Add a new address book contact for an extension
    # For more on the input fields, see Account Contacts.
    # @param account_id Account ID
    # @param extension_id Extension ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateContactParams] :data Contact data
    # @return [ContactFull]
    def create_account_extension_contact(account_id, extension_id, opts = {})
      data, _status_code, _headers = create_account_extension_contact_with_http_info(account_id, extension_id, opts)
      return data
    end

    # Add a new address book contact for an extension
    # For more on the input fields, see Account Contacts.
    # @param account_id Account ID
    # @param extension_id Extension ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateContactParams] :data Contact data
    # @return [Array<(ContactFull, Fixnum, Hash)>] ContactFull data, response status code and response headers
    def create_account_extension_contact_with_http_info(account_id, extension_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContactsApi.create_account_extension_contact ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling ContactsApi.create_account_extension_contact" if account_id.nil?
      # verify the required parameter 'extension_id' is set
      fail ArgumentError, "Missing the required parameter 'extension_id' when calling ContactsApi.create_account_extension_contact" if extension_id.nil?
      # resource path
      local_var_path = "/accounts/{account_id}/extensions/{extension_id}/contacts".sub('{format}','json').sub('{' + 'account_id' + '}', account_id.to_s).sub('{' + 'extension_id' + '}', extension_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContactFull')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#create_account_extension_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param account_id Account ID
    # @param extension_id Extension ID
    # @param contact_id Contact ID
    # @param [Hash] opts the optional parameters
    # @return [DeleteContact]
    def delete_account_extension_contact(account_id, extension_id, contact_id, opts = {})
      data, _status_code, _headers = delete_account_extension_contact_with_http_info(account_id, extension_id, contact_id, opts)
      return data
    end

    # 
    # 
    # @param account_id Account ID
    # @param extension_id Extension ID
    # @param contact_id Contact ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteContact, Fixnum, Hash)>] DeleteContact data, response status code and response headers
    def delete_account_extension_contact_with_http_info(account_id, extension_id, contact_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContactsApi.delete_account_extension_contact ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling ContactsApi.delete_account_extension_contact" if account_id.nil?
      # verify the required parameter 'extension_id' is set
      fail ArgumentError, "Missing the required parameter 'extension_id' when calling ContactsApi.delete_account_extension_contact" if extension_id.nil?
      # verify the required parameter 'contact_id' is set
      fail ArgumentError, "Missing the required parameter 'contact_id' when calling ContactsApi.delete_account_extension_contact" if contact_id.nil?
      # resource path
      local_var_path = "/accounts/{account_id}/extensions/{extension_id}/contacts/{contact_id}".sub('{format}','json').sub('{' + 'account_id' + '}', account_id.to_s).sub('{' + 'extension_id' + '}', extension_id.to_s).sub('{' + 'contact_id' + '}', contact_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeleteContact')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#delete_account_extension_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the details of an address book contact
    # For more info on the fields shown, see Account Contacts.
    # @param account_id Account ID
    # @param extension_id Extension ID
    # @param contact_id Contact ID
    # @param [Hash] opts the optional parameters
    # @return [ContactFull]
    def get_account_extension_contact(account_id, extension_id, contact_id, opts = {})
      data, _status_code, _headers = get_account_extension_contact_with_http_info(account_id, extension_id, contact_id, opts)
      return data
    end

    # Retrieve the details of an address book contact
    # For more info on the fields shown, see Account Contacts.
    # @param account_id Account ID
    # @param extension_id Extension ID
    # @param contact_id Contact ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContactFull, Fixnum, Hash)>] ContactFull data, response status code and response headers
    def get_account_extension_contact_with_http_info(account_id, extension_id, contact_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContactsApi.get_account_extension_contact ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling ContactsApi.get_account_extension_contact" if account_id.nil?
      # verify the required parameter 'extension_id' is set
      fail ArgumentError, "Missing the required parameter 'extension_id' when calling ContactsApi.get_account_extension_contact" if extension_id.nil?
      # verify the required parameter 'contact_id' is set
      fail ArgumentError, "Missing the required parameter 'contact_id' when calling ContactsApi.get_account_extension_contact" if contact_id.nil?
      # resource path
      local_var_path = "/accounts/{account_id}/extensions/{extension_id}/contacts/{contact_id}".sub('{format}','json').sub('{' + 'account_id' + '}', account_id.to_s).sub('{' + 'extension_id' + '}', extension_id.to_s).sub('{' + 'contact_id' + '}', contact_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContactFull')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#get_account_extension_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show a list of address book contacts
    # See Account Contacts for more info on the fields in each item.
    # @param account_id Account ID
    # @param extension_id Extension ID
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :filters_id ID filter
    # @option opts [Array<String>] :filters_group_id Group filter
    # @option opts [Array<String>] :filters_updated_at Updated At filter
    # @option opts [String] :sort_id ID sorting
    # @option opts [String] :sort_updated_at Updated At sorting
    # @option opts [Integer] :limit Max results
    # @option opts [Integer] :offset Results to skip
    # @option opts [String] :fields Field set
    # @return [ListContactsFull]
    def list_account_extension_contacts(account_id, extension_id, opts = {})
      data, _status_code, _headers = list_account_extension_contacts_with_http_info(account_id, extension_id, opts)
      return data
    end

    # Show a list of address book contacts
    # See Account Contacts for more info on the fields in each item.
    # @param account_id Account ID
    # @param extension_id Extension ID
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :filters_id ID filter
    # @option opts [Array<String>] :filters_group_id Group filter
    # @option opts [Array<String>] :filters_updated_at Updated At filter
    # @option opts [String] :sort_id ID sorting
    # @option opts [String] :sort_updated_at Updated At sorting
    # @option opts [Integer] :limit Max results
    # @option opts [Integer] :offset Results to skip
    # @option opts [String] :fields Field set
    # @return [Array<(ListContactsFull, Fixnum, Hash)>] ListContactsFull data, response status code and response headers
    def list_account_extension_contacts_with_http_info(account_id, extension_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContactsApi.list_account_extension_contacts ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling ContactsApi.list_account_extension_contacts" if account_id.nil?
      # verify the required parameter 'extension_id' is set
      fail ArgumentError, "Missing the required parameter 'extension_id' when calling ContactsApi.list_account_extension_contacts" if extension_id.nil?
      if !opts[:'sort_id'].nil? && opts[:'sort_id'] !~ Regexp.new(asc|desc)
        fail ArgumentError, 'invalid value for "opts[:"sort_id"]" when calling ContactsApi.list_account_extension_contacts, must conform to the pattern asc|desc.'
      end

      if !opts[:'sort_updated_at'].nil? && opts[:'sort_updated_at'] !~ Regexp.new(asc|desc)
        fail ArgumentError, 'invalid value for "opts[:"sort_updated_at"]" when calling ContactsApi.list_account_extension_contacts, must conform to the pattern asc|desc.'
      end

      # resource path
      local_var_path = "/accounts/{account_id}/extensions/{extension_id}/contacts".sub('{format}','json').sub('{' + 'account_id' + '}', account_id.to_s).sub('{' + 'extension_id' + '}', extension_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filters[id]'] = @api_client.build_collection_param(opts[:'filters_id'], :multi) if !opts[:'filters_id'].nil?
      query_params[:'filters[group_id]'] = @api_client.build_collection_param(opts[:'filters_group_id'], :multi) if !opts[:'filters_group_id'].nil?
      query_params[:'filters[updated_at]'] = @api_client.build_collection_param(opts[:'filters_updated_at'], :multi) if !opts[:'filters_updated_at'].nil?
      query_params[:'sort[id]'] = opts[:'sort_id'] if !opts[:'sort_id'].nil?
      query_params[:'sort[updated_at]'] = opts[:'sort_updated_at'] if !opts[:'sort_updated_at'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListContactsFull')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#list_account_extension_contacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # For more on the input fields, see Account Contacts.
    # @param account_id Account ID
    # @param extension_id Extension ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateContactParams] :data Contact data
    # @return [ContactFull]
    def replace_account_extension_contact(account_id, extension_id, opts = {})
      data, _status_code, _headers = replace_account_extension_contact_with_http_info(account_id, extension_id, opts)
      return data
    end

    # 
    # For more on the input fields, see Account Contacts.
    # @param account_id Account ID
    # @param extension_id Extension ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateContactParams] :data Contact data
    # @return [Array<(ContactFull, Fixnum, Hash)>] ContactFull data, response status code and response headers
    def replace_account_extension_contact_with_http_info(account_id, extension_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContactsApi.replace_account_extension_contact ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling ContactsApi.replace_account_extension_contact" if account_id.nil?
      # verify the required parameter 'extension_id' is set
      fail ArgumentError, "Missing the required parameter 'extension_id' when calling ContactsApi.replace_account_extension_contact" if extension_id.nil?
      # resource path
      local_var_path = "/accounts/{account_id}/extensions/{extension_id}/contacts".sub('{format}','json').sub('{' + 'account_id' + '}', account_id.to_s).sub('{' + 'extension_id' + '}', extension_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContactFull')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#replace_account_extension_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
