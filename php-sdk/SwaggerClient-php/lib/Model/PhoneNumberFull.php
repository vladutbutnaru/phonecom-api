<?php
/**
 * PhoneNumberFull
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * PhoneNumberFull Class Doc Comment
 *
 * @category    Class */
 // @description The Full Phone Number Object has all of the properties of the Phone Number Summary Object, along with several more, as shown below:
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PhoneNumberFull implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PhoneNumberFull';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'id' => 'int',
        'name' => 'string',
        'phone_number' => 'string',
        'block_incoming' => 'bool',
        'block_anonymous' => 'bool',
        'route' => '\Swagger\Client\Model\RouteSummary',
        'caller_id' => '\Swagger\Client\Model\CallerIdPhoneNumber',
        'sms_forwarding' => '\Swagger\Client\Model\SmsForwarding',
        'call_notifications' => '\Swagger\Client\Model\CallNotifications'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'id' => 'id',
        'name' => 'name',
        'phone_number' => 'phone_number',
        'block_incoming' => 'block_incoming',
        'block_anonymous' => 'block_anonymous',
        'route' => 'route',
        'caller_id' => 'caller_id',
        'sms_forwarding' => 'sms_forwarding',
        'call_notifications' => 'call_notifications'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'id' => 'setId',
        'name' => 'setName',
        'phone_number' => 'setPhoneNumber',
        'block_incoming' => 'setBlockIncoming',
        'block_anonymous' => 'setBlockAnonymous',
        'route' => 'setRoute',
        'caller_id' => 'setCallerId',
        'sms_forwarding' => 'setSmsForwarding',
        'call_notifications' => 'setCallNotifications'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'id' => 'getId',
        'name' => 'getName',
        'phone_number' => 'getPhoneNumber',
        'block_incoming' => 'getBlockIncoming',
        'block_anonymous' => 'getBlockAnonymous',
        'route' => 'getRoute',
        'caller_id' => 'getCallerId',
        'sms_forwarding' => 'getSmsForwarding',
        'call_notifications' => 'getCallNotifications'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['block_incoming'] = isset($data['block_incoming']) ? $data['block_incoming'] : null;
        $this->container['block_anonymous'] = isset($data['block_anonymous']) ? $data['block_anonymous'] : null;
        $this->container['route'] = isset($data['route']) ? $data['route'] : null;
        $this->container['caller_id'] = isset($data['caller_id']) ? $data['caller_id'] : null;
        $this->container['sms_forwarding'] = isset($data['sms_forwarding']) ? $data['sms_forwarding'] : null;
        $this->container['call_notifications'] = isset($data['call_notifications']) ? $data['call_notifications'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Integer Phone number ID. This is the internal Phone.com ID for this number, not the phone number itself. Read-only.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets phone_number
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     * @param string $phone_number Phone number, in E.164 format
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets block_incoming
     * @return bool
     */
    public function getBlockIncoming()
    {
        return $this->container['block_incoming'];
    }

    /**
     * Sets block_incoming
     * @param bool $block_incoming Whether to block incoming calls. Boolean.
     * @return $this
     */
    public function setBlockIncoming($block_incoming)
    {
        $this->container['block_incoming'] = $block_incoming;

        return $this;
    }

    /**
     * Gets block_anonymous
     * @return bool
     */
    public function getBlockAnonymous()
    {
        return $this->container['block_anonymous'];
    }

    /**
     * Sets block_anonymous
     * @param bool $block_anonymous Whether to block anonymous calls. Boolean.
     * @return $this
     */
    public function setBlockAnonymous($block_anonymous)
    {
        $this->container['block_anonymous'] = $block_anonymous;

        return $this;
    }

    /**
     * Gets route
     * @return \Swagger\Client\Model\RouteSummary
     */
    public function getRoute()
    {
        return $this->container['route'];
    }

    /**
     * Sets route
     * @param \Swagger\Client\Model\RouteSummary $route The Route assigned to handle incoming calls for this number, if any. Output is a Route Summary Object, or NULL if not set. Input can be a Route Lookup Object or NULL to unset.
     * @return $this
     */
    public function setRoute($route)
    {
        $this->container['route'] = $route;

        return $this;
    }

    /**
     * Gets caller_id
     * @return \Swagger\Client\Model\CallerIdPhoneNumber
     */
    public function getCallerId()
    {
        return $this->container['caller_id'];
    }

    /**
     * Sets caller_id
     * @param \Swagger\Client\Model\CallerIdPhoneNumber $caller_id Caller ID Object, or NULL
     * @return $this
     */
    public function setCallerId($caller_id)
    {
        $this->container['caller_id'] = $caller_id;

        return $this;
    }

    /**
     * Gets sms_forwarding
     * @return \Swagger\Client\Model\SmsForwarding
     */
    public function getSmsForwarding()
    {
        return $this->container['sms_forwarding'];
    }

    /**
     * Sets sms_forwarding
     * @param \Swagger\Client\Model\SmsForwarding $sms_forwarding SMS Forwarding Object, or NULL
     * @return $this
     */
    public function setSmsForwarding($sms_forwarding)
    {
        $this->container['sms_forwarding'] = $sms_forwarding;

        return $this;
    }

    /**
     * Gets call_notifications
     * @return \Swagger\Client\Model\CallNotifications
     */
    public function getCallNotifications()
    {
        return $this->container['call_notifications'];
    }

    /**
     * Sets call_notifications
     * @param \Swagger\Client\Model\CallNotifications $call_notifications
     * @return $this
     */
    public function setCallNotifications($call_notifications)
    {
        $this->container['call_notifications'] = $call_notifications;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


