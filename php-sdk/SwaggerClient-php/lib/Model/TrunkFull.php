<?php
/**
 * TrunkFull
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * TrunkFull Class Doc Comment
 *
 * @category    Class */
 // @description The Full Trunk Object is identical to the Trunk Summary Object, along with the following:
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TrunkFull implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'TrunkFull';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'id' => 'int',
        'name' => 'string',
        'uri' => 'string',
        'max_concurrent_calls' => 'int',
        'max_minutes_per_month' => 'int',
        'greeting' => '\Swagger\Client\Model\MediaSummary',
        'error_message' => '\Swagger\Client\Model\MediaSummary',
        'codecs' => 'string[]'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'id' => 'id',
        'name' => 'name',
        'uri' => 'uri',
        'max_concurrent_calls' => 'max_concurrent_calls',
        'max_minutes_per_month' => 'max_minutes_per_month',
        'greeting' => 'greeting',
        'error_message' => 'error_message',
        'codecs' => 'codecs'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'id' => 'setId',
        'name' => 'setName',
        'uri' => 'setUri',
        'max_concurrent_calls' => 'setMaxConcurrentCalls',
        'max_minutes_per_month' => 'setMaxMinutesPerMonth',
        'greeting' => 'setGreeting',
        'error_message' => 'setErrorMessage',
        'codecs' => 'setCodecs'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'id' => 'getId',
        'name' => 'getName',
        'uri' => 'getUri',
        'max_concurrent_calls' => 'getMaxConcurrentCalls',
        'max_minutes_per_month' => 'getMaxMinutesPerMonth',
        'greeting' => 'getGreeting',
        'error_message' => 'getErrorMessage',
        'codecs' => 'getCodecs'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['uri'] = isset($data['uri']) ? $data['uri'] : null;
        $this->container['max_concurrent_calls'] = isset($data['max_concurrent_calls']) ? $data['max_concurrent_calls'] : null;
        $this->container['max_minutes_per_month'] = isset($data['max_minutes_per_month']) ? $data['max_minutes_per_month'] : null;
        $this->container['greeting'] = isset($data['greeting']) ? $data['greeting'] : null;
        $this->container['error_message'] = isset($data['error_message']) ? $data['error_message'] : null;
        $this->container['codecs'] = isset($data['codecs']) ? $data['codecs'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['uri'] === null) {
            $invalid_properties[] = "'uri' can't be null";
        }
        if ($this->container['max_concurrent_calls'] === null) {
            $invalid_properties[] = "'max_concurrent_calls' can't be null";
        }
        if ($this->container['max_minutes_per_month'] === null) {
            $invalid_properties[] = "'max_minutes_per_month' can't be null";
        }
        if ($this->container['greeting'] === null) {
            $invalid_properties[] = "'greeting' can't be null";
        }
        if ($this->container['error_message'] === null) {
            $invalid_properties[] = "'error_message' can't be null";
        }
        if ($this->container['codecs'] === null) {
            $invalid_properties[] = "'codecs' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['uri'] === null) {
            return false;
        }
        if ($this->container['max_concurrent_calls'] === null) {
            return false;
        }
        if ($this->container['max_minutes_per_month'] === null) {
            return false;
        }
        if ($this->container['greeting'] === null) {
            return false;
        }
        if ($this->container['error_message'] === null) {
            return false;
        }
        if ($this->container['codecs'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Integer Trunk ID. Read-only.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Name. Required.
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets uri
     * @return string
     */
    public function getUri()
    {
        return $this->container['uri'];
    }

    /**
     * Sets uri
     * @param string $uri Fully-qualified SIP URI. Required.
     * @return $this
     */
    public function setUri($uri)
    {
        $this->container['uri'] = $uri;

        return $this;
    }

    /**
     * Gets max_concurrent_calls
     * @return int
     */
    public function getMaxConcurrentCalls()
    {
        return $this->container['max_concurrent_calls'];
    }

    /**
     * Sets max_concurrent_calls
     * @param int $max_concurrent_calls Max concurrent calls. Default is 10.
     * @return $this
     */
    public function setMaxConcurrentCalls($max_concurrent_calls)
    {
        $this->container['max_concurrent_calls'] = $max_concurrent_calls;

        return $this;
    }

    /**
     * Gets max_minutes_per_month
     * @return int
     */
    public function getMaxMinutesPerMonth()
    {
        return $this->container['max_minutes_per_month'];
    }

    /**
     * Sets max_minutes_per_month
     * @param int $max_minutes_per_month Max minutes per month. Default is 750.
     * @return $this
     */
    public function setMaxMinutesPerMonth($max_minutes_per_month)
    {
        $this->container['max_minutes_per_month'] = $max_minutes_per_month;

        return $this;
    }

    /**
     * Gets greeting
     * @return \Swagger\Client\Model\MediaSummary
     */
    public function getGreeting()
    {
        return $this->container['greeting'];
    }

    /**
     * Sets greeting
     * @param \Swagger\Client\Model\MediaSummary $greeting Greeting. Output is a Media Summary Object. Input must be a Media Lookup Object. Must refer to a media recording that has is_hold_music set to FALSE.
     * @return $this
     */
    public function setGreeting($greeting)
    {
        $this->container['greeting'] = $greeting;

        return $this;
    }

    /**
     * Gets error_message
     * @return \Swagger\Client\Model\MediaSummary
     */
    public function getErrorMessage()
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     * @param \Swagger\Client\Model\MediaSummary $error_message Error Message. Output is a Media Summary Object. Input must be a Media Lookup Object. Must refer to a media recording that has is_hold_music set to FALSE.
     * @return $this
     */
    public function setErrorMessage($error_message)
    {
        $this->container['error_message'] = $error_message;

        return $this;
    }

    /**
     * Gets codecs
     * @return string[]
     */
    public function getCodecs()
    {
        return $this->container['codecs'];
    }

    /**
     * Sets codecs
     * @param string[] $codecs Custom audio codec configuration, if any is needed. If provided, must be a simple array containing the prioritized list of desired codecs. Supported codecs are: g711u 64k, g711u 56k, g711a 64k, g711a 56k, g7231, g728, g729, g729A, g729B, g729AB, gms full, rfc2833, t38, ilbc, h263, g722, g722_1, g729D, g729E, amr, amr_wb, efr, evrc, h264, mpeg4, red, cng, SIP Info to 2833
     * @return $this
     */
    public function setCodecs($codecs)
    {
        $this->container['codecs'] = $codecs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


