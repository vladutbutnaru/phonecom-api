<?php
/**
 * AvailableNumberFull
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * AvailableNumberFull Class Doc Comment
 *
 * @category    Class */
 // @description The Full Available Phone Number Object includes the properties in the Summary Object, along with the following:
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AvailableNumberFull implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'AvailableNumberFull';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'phone_number' => 'string',
        'formatted' => 'string',
        'price' => 'int',
        'is_toll_free' => 'bool',
        'country_code' => 'string',
        'npa' => 'string',
        'nxx' => 'string',
        'xxxx' => 'string',
        'city' => 'string',
        'province' => 'string',
        'country' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'phone_number' => 'phone_number',
        'formatted' => 'formatted',
        'price' => 'price',
        'is_toll_free' => 'is_toll_free',
        'country_code' => 'country_code',
        'npa' => 'npa',
        'nxx' => 'nxx',
        'xxxx' => 'xxxx',
        'city' => 'city',
        'province' => 'province',
        'country' => 'country'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'phone_number' => 'setPhoneNumber',
        'formatted' => 'setFormatted',
        'price' => 'setPrice',
        'is_toll_free' => 'setIsTollFree',
        'country_code' => 'setCountryCode',
        'npa' => 'setNpa',
        'nxx' => 'setNxx',
        'xxxx' => 'setXxxx',
        'city' => 'setCity',
        'province' => 'setProvince',
        'country' => 'setCountry'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'phone_number' => 'getPhoneNumber',
        'formatted' => 'getFormatted',
        'price' => 'getPrice',
        'is_toll_free' => 'getIsTollFree',
        'country_code' => 'getCountryCode',
        'npa' => 'getNpa',
        'nxx' => 'getNxx',
        'xxxx' => 'getXxxx',
        'city' => 'getCity',
        'province' => 'getProvince',
        'country' => 'getCountry'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['formatted'] = isset($data['formatted']) ? $data['formatted'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['is_toll_free'] = isset($data['is_toll_free']) ? $data['is_toll_free'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['npa'] = isset($data['npa']) ? $data['npa'] : null;
        $this->container['nxx'] = isset($data['nxx']) ? $data['nxx'] : null;
        $this->container['xxxx'] = isset($data['xxxx']) ? $data['xxxx'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['province'] = isset($data['province']) ? $data['province'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets phone_number
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     * @param string $phone_number Phone number, in E.164 format
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets formatted
     * @return string
     */
    public function getFormatted()
    {
        return $this->container['formatted'];
    }

    /**
     * Sets formatted
     * @param string $formatted Human-readable formatted version of the phone number
     * @return $this
     */
    public function setFormatted($formatted)
    {
        $this->container['formatted'] = $formatted;

        return $this;
    }

    /**
     * Gets price
     * @return int
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     * @param int $price The one-time initial price for this number, in USD. Some numbers show REQUEST_QUOTE here. Please contact our sales department if you are interested in these numbers.
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets is_toll_free
     * @return bool
     */
    public function getIsTollFree()
    {
        return $this->container['is_toll_free'];
    }

    /**
     * Sets is_toll_free
     * @param bool $is_toll_free Whether the number is toll-free
     * @return $this
     */
    public function setIsTollFree($is_toll_free)
    {
        $this->container['is_toll_free'] = $is_toll_free;

        return $this;
    }

    /**
     * Gets country_code
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     * @param string $country_code The international dialing prefix for this number. For US and Canadian numbers, for example, this will be \"1\".
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets npa
     * @return string
     */
    public function getNpa()
    {
        return $this->container['npa'];
    }

    /**
     * Sets npa
     * @param string $npa Area code (a.k.a. NPA). Included for North American numbers only.
     * @return $this
     */
    public function setNpa($npa)
    {
        $this->container['npa'] = $npa;

        return $this;
    }

    /**
     * Gets nxx
     * @return string
     */
    public function getNxx()
    {
        return $this->container['nxx'];
    }

    /**
     * Sets nxx
     * @param string $nxx Second 3 digits (a.k.a. NXX). Included for North American numbers only.
     * @return $this
     */
    public function setNxx($nxx)
    {
        $this->container['nxx'] = $nxx;

        return $this;
    }

    /**
     * Gets xxxx
     * @return string
     */
    public function getXxxx()
    {
        return $this->container['xxxx'];
    }

    /**
     * Sets xxxx
     * @param string $xxxx Last 4 digits (a.k.a. XXXX). Included for North American numbers only.
     * @return $this
     */
    public function setXxxx($xxxx)
    {
        $this->container['xxxx'] = $xxxx;

        return $this;
    }

    /**
     * Gets city
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     * @param string $city City with which this number is associated, if known. Otherwise NULL.
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets province
     * @return string
     */
    public function getProvince()
    {
        return $this->container['province'];
    }

    /**
     * Sets province
     * @param string $province State or Province with which this number is associated, if known. Postal Code. Otherwise NULL.
     * @return $this
     */
    public function setProvince($province)
    {
        $this->container['province'] = $province;

        return $this;
    }

    /**
     * Gets country
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     * @param string $country Country with which this number is associated, if known. Otherwise NULL.
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


