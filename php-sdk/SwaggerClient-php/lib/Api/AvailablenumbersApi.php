<?php
/**
 * AvailablenumbersApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * AvailablenumbersApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AvailablenumbersApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.phone.com/v4');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return AvailablenumbersApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation listAvailablePhoneNumbers
     *
     * 
     *
     * @param string[] $filters_phone_number Phone number filter (optional)
     * @param string[] $filters_country_code Country Code filter (optional)
     * @param string[] $filters_npa Area Code filter (North America only) (optional)
     * @param string[] $filters_nxx 2nd set of 3 digits filter (North America only) (optional)
     * @param string[] $filters_xxxx NANP XXXX filter (optional)
     * @param string[] $filters_city City filter (optional)
     * @param string[] $filters_province State or Province (postal code) filter (optional)
     * @param string[] $filters_country Country (postal code) filter (optional)
     * @param string[] $filters_price Price filter (optional)
     * @param string[] $filters_category Category filter (optional)
     * @param string[] $filters_is_toll_free Toll-free status filter (optional)
     * @param string $sort_internal Internal (quasi-random) sorting (optional)
     * @param string $sort_price Price sorting (optional)
     * @param string $sort_phone_number Phone number sorting (optional)
     * @param int $limit Max results (optional)
     * @param int $offset Results to skip (optional)
     * @param string $fields Field set (optional)
     * @return \Swagger\Client\Model\ListAvailableNumbersFull
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function listAvailablePhoneNumbers($filters_phone_number = null, $filters_country_code = null, $filters_npa = null, $filters_nxx = null, $filters_xxxx = null, $filters_city = null, $filters_province = null, $filters_country = null, $filters_price = null, $filters_category = null, $filters_is_toll_free = null, $sort_internal = null, $sort_price = null, $sort_phone_number = null, $limit = null, $offset = null, $fields = null)
    {
        list($response) = $this->listAvailablePhoneNumbersWithHttpInfo($filters_phone_number, $filters_country_code, $filters_npa, $filters_nxx, $filters_xxxx, $filters_city, $filters_province, $filters_country, $filters_price, $filters_category, $filters_is_toll_free, $sort_internal, $sort_price, $sort_phone_number, $limit, $offset, $fields);
        return $response;
    }

    /**
     * Operation listAvailablePhoneNumbersWithHttpInfo
     *
     * 
     *
     * @param string[] $filters_phone_number Phone number filter (optional)
     * @param string[] $filters_country_code Country Code filter (optional)
     * @param string[] $filters_npa Area Code filter (North America only) (optional)
     * @param string[] $filters_nxx 2nd set of 3 digits filter (North America only) (optional)
     * @param string[] $filters_xxxx NANP XXXX filter (optional)
     * @param string[] $filters_city City filter (optional)
     * @param string[] $filters_province State or Province (postal code) filter (optional)
     * @param string[] $filters_country Country (postal code) filter (optional)
     * @param string[] $filters_price Price filter (optional)
     * @param string[] $filters_category Category filter (optional)
     * @param string[] $filters_is_toll_free Toll-free status filter (optional)
     * @param string $sort_internal Internal (quasi-random) sorting (optional)
     * @param string $sort_price Price sorting (optional)
     * @param string $sort_phone_number Phone number sorting (optional)
     * @param int $limit Max results (optional)
     * @param int $offset Results to skip (optional)
     * @param string $fields Field set (optional)
     * @return Array of \Swagger\Client\Model\ListAvailableNumbersFull, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function listAvailablePhoneNumbersWithHttpInfo($filters_phone_number = null, $filters_country_code = null, $filters_npa = null, $filters_nxx = null, $filters_xxxx = null, $filters_city = null, $filters_province = null, $filters_country = null, $filters_price = null, $filters_category = null, $filters_is_toll_free = null, $sort_internal = null, $sort_price = null, $sort_phone_number = null, $limit = null, $offset = null, $fields = null)
    {
        if (!is_null($sort_internal) && !preg_match("asc|desc", $sort_internal)) {
            throw new \InvalidArgumentException('invalid value for "sort_internal" when calling AvailablenumbersApi.listAvailablePhoneNumbers, must conform to the pattern asc|desc.');
        }

        if (!is_null($sort_price) && !preg_match("asc|desc", $sort_price)) {
            throw new \InvalidArgumentException('invalid value for "sort_price" when calling AvailablenumbersApi.listAvailablePhoneNumbers, must conform to the pattern asc|desc.');
        }

        if (!is_null($sort_phone_number) && !preg_match("asc|desc", $sort_phone_number)) {
            throw new \InvalidArgumentException('invalid value for "sort_phone_number" when calling AvailablenumbersApi.listAvailablePhoneNumbers, must conform to the pattern asc|desc.');
        }

        // parse inputs
        $resourcePath = "/phone-numbers/available";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if (is_array($filters_phone_number)) {
            $filters_phone_number = $this->apiClient->getSerializer()->serializeCollection($filters_phone_number, 'multi', true);
        }
        if ($filters_phone_number !== null) {
            $queryParams['filters[phone_number]'] = $this->apiClient->getSerializer()->toQueryValue($filters_phone_number);
        }
        // query params
        if (is_array($filters_country_code)) {
            $filters_country_code = $this->apiClient->getSerializer()->serializeCollection($filters_country_code, 'multi', true);
        }
        if ($filters_country_code !== null) {
            $queryParams['filters[country_code]'] = $this->apiClient->getSerializer()->toQueryValue($filters_country_code);
        }
        // query params
        if (is_array($filters_npa)) {
            $filters_npa = $this->apiClient->getSerializer()->serializeCollection($filters_npa, 'multi', true);
        }
        if ($filters_npa !== null) {
            $queryParams['filters[npa]'] = $this->apiClient->getSerializer()->toQueryValue($filters_npa);
        }
        // query params
        if (is_array($filters_nxx)) {
            $filters_nxx = $this->apiClient->getSerializer()->serializeCollection($filters_nxx, 'multi', true);
        }
        if ($filters_nxx !== null) {
            $queryParams['filters[nxx]'] = $this->apiClient->getSerializer()->toQueryValue($filters_nxx);
        }
        // query params
        if (is_array($filters_xxxx)) {
            $filters_xxxx = $this->apiClient->getSerializer()->serializeCollection($filters_xxxx, 'multi', true);
        }
        if ($filters_xxxx !== null) {
            $queryParams['filters[xxxx]'] = $this->apiClient->getSerializer()->toQueryValue($filters_xxxx);
        }
        // query params
        if (is_array($filters_city)) {
            $filters_city = $this->apiClient->getSerializer()->serializeCollection($filters_city, 'multi', true);
        }
        if ($filters_city !== null) {
            $queryParams['filters[city]'] = $this->apiClient->getSerializer()->toQueryValue($filters_city);
        }
        // query params
        if (is_array($filters_province)) {
            $filters_province = $this->apiClient->getSerializer()->serializeCollection($filters_province, 'multi', true);
        }
        if ($filters_province !== null) {
            $queryParams['filters[province]'] = $this->apiClient->getSerializer()->toQueryValue($filters_province);
        }
        // query params
        if (is_array($filters_country)) {
            $filters_country = $this->apiClient->getSerializer()->serializeCollection($filters_country, 'multi', true);
        }
        if ($filters_country !== null) {
            $queryParams['filters[country]'] = $this->apiClient->getSerializer()->toQueryValue($filters_country);
        }
        // query params
        if (is_array($filters_price)) {
            $filters_price = $this->apiClient->getSerializer()->serializeCollection($filters_price, 'multi', true);
        }
        if ($filters_price !== null) {
            $queryParams['filters[price]'] = $this->apiClient->getSerializer()->toQueryValue($filters_price);
        }
        // query params
        if (is_array($filters_category)) {
            $filters_category = $this->apiClient->getSerializer()->serializeCollection($filters_category, 'multi', true);
        }
        if ($filters_category !== null) {
            $queryParams['filters[category]'] = $this->apiClient->getSerializer()->toQueryValue($filters_category);
        }
        // query params
        if (is_array($filters_is_toll_free)) {
            $filters_is_toll_free = $this->apiClient->getSerializer()->serializeCollection($filters_is_toll_free, 'multi', true);
        }
        if ($filters_is_toll_free !== null) {
            $queryParams['filters[is_toll_free]'] = $this->apiClient->getSerializer()->toQueryValue($filters_is_toll_free);
        }
        // query params
        if ($sort_internal !== null) {
            $queryParams['sort[internal]'] = $this->apiClient->getSerializer()->toQueryValue($sort_internal);
        }
        // query params
        if ($sort_price !== null) {
            $queryParams['sort[price]'] = $this->apiClient->getSerializer()->toQueryValue($sort_price);
        }
        // query params
        if ($sort_phone_number !== null) {
            $queryParams['sort[phone_number]'] = $this->apiClient->getSerializer()->toQueryValue($sort_phone_number);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ListAvailableNumbersFull',
                '/phone-numbers/available'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ListAvailableNumbersFull', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ListAvailableNumbersFull', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
