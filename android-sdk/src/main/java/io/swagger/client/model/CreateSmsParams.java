/**
 * Phone.com API
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.model;


import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;


@ApiModel(description = "")
public class CreateSmsParams  {
  
  @SerializedName("from")
  private String from = null;
  @SerializedName("to")
  private String to = null;
  @SerializedName("text")
  private String text = null;

  /**
   * Phone number of sender
   **/
  @ApiModelProperty(required = true, value = "Phone number of sender")
  public String getFrom() {
    return from;
  }
  public void setFrom(String from) {
    this.from = from;
  }

  /**
   * Outgoing destination numbers
   **/
  @ApiModelProperty(required = true, value = "Outgoing destination numbers")
  public String getTo() {
    return to;
  }
  public void setTo(String to) {
    this.to = to;
  }

  /**
   * Text body of the outgoing SMS message. Maximum 160 characters per message.
   **/
  @ApiModelProperty(required = true, value = "Text body of the outgoing SMS message. Maximum 160 characters per message.")
  public String getText() {
    return text;
  }
  public void setText(String text) {
    this.text = text;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSmsParams createSmsParams = (CreateSmsParams) o;
    return (from == null ? createSmsParams.from == null : from.equals(createSmsParams.from)) &&
        (to == null ? createSmsParams.to == null : to.equals(createSmsParams.to)) &&
        (text == null ? createSmsParams.text == null : text.equals(createSmsParams.text));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (from == null ? 0: from.hashCode());
    result = 31 * result + (to == null ? 0: to.hashCode());
    result = 31 * result + (text == null ? 0: text.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSmsParams {\n");
    
    sb.append("  from: ").append(from).append("\n");
    sb.append("  to: ").append(to).append("\n");
    sb.append("  text: ").append(text).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
