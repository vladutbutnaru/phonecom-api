/**
 * Phone.com API
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.model;

import io.swagger.client.model.Recipient;
import java.util.*;
import java.util.Date;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;


/**
 * The Full SMS Object includes all of the properties in the SMS Summary Object, along with several more.
 **/
@ApiModel(description = "The Full SMS Object includes all of the properties in the SMS Summary Object, along with several more.")
public class SmsFull  {
  
  @SerializedName("id")
  private String id = null;
  @SerializedName("from")
  private String from = null;
  @SerializedName("to")
  private List<Recipient> to = null;
  @SerializedName("direction")
  private String direction = null;
  @SerializedName("created_epoch")
  private Integer createdEpoch = null;
  @SerializedName("created_at")
  private Date createdAt = null;
  @SerializedName("text")
  private String text = null;

  /**
   * Unique SMS ID. Read-only.
   **/
  @ApiModelProperty(required = true, value = "Unique SMS ID. Read-only.")
  public String getId() {
    return id;
  }
  public void setId(String id) {
    this.id = id;
  }

  /**
   * Caller ID number to display on the incoming/outgoing SMS message. For an outgoing message, it must be a phone number associated with your Phone.com account.
   **/
  @ApiModelProperty(required = true, value = "Caller ID number to display on the incoming/outgoing SMS message. For an outgoing message, it must be a phone number associated with your Phone.com account.")
  public String getFrom() {
    return from;
  }
  public void setFrom(String from) {
    this.from = from;
  }

  /**
   * An array of SMS recipients.
   **/
  @ApiModelProperty(required = true, value = "An array of SMS recipients.")
  public List<Recipient> getTo() {
    return to;
  }
  public void setTo(List<Recipient> to) {
    this.to = to;
  }

  /**
   * Direction of SMS. 'in' for Incoming messages, 'out' for Outgoing messages.
   **/
  @ApiModelProperty(required = true, value = "Direction of SMS. 'in' for Incoming messages, 'out' for Outgoing messages.")
  public String getDirection() {
    return direction;
  }
  public void setDirection(String direction) {
    this.direction = direction;
  }

  /**
   * Unix time stamp representing the UTC time that the object was created in the Phone.com API system.
   **/
  @ApiModelProperty(required = true, value = "Unix time stamp representing the UTC time that the object was created in the Phone.com API system.")
  public Integer getCreatedEpoch() {
    return createdEpoch;
  }
  public void setCreatedEpoch(Integer createdEpoch) {
    this.createdEpoch = createdEpoch;
  }

  /**
   * Date string representing the UTC time that the object was created in the Phone.com API system.
   **/
  @ApiModelProperty(required = true, value = "Date string representing the UTC time that the object was created in the Phone.com API system.")
  public Date getCreatedAt() {
    return createdAt;
  }
  public void setCreatedAt(Date createdAt) {
    this.createdAt = createdAt;
  }

  /**
   * Body of the SMS text
   **/
  @ApiModelProperty(required = true, value = "Body of the SMS text")
  public String getText() {
    return text;
  }
  public void setText(String text) {
    this.text = text;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SmsFull smsFull = (SmsFull) o;
    return (id == null ? smsFull.id == null : id.equals(smsFull.id)) &&
        (from == null ? smsFull.from == null : from.equals(smsFull.from)) &&
        (to == null ? smsFull.to == null : to.equals(smsFull.to)) &&
        (direction == null ? smsFull.direction == null : direction.equals(smsFull.direction)) &&
        (createdEpoch == null ? smsFull.createdEpoch == null : createdEpoch.equals(smsFull.createdEpoch)) &&
        (createdAt == null ? smsFull.createdAt == null : createdAt.equals(smsFull.createdAt)) &&
        (text == null ? smsFull.text == null : text.equals(smsFull.text));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (id == null ? 0: id.hashCode());
    result = 31 * result + (from == null ? 0: from.hashCode());
    result = 31 * result + (to == null ? 0: to.hashCode());
    result = 31 * result + (direction == null ? 0: direction.hashCode());
    result = 31 * result + (createdEpoch == null ? 0: createdEpoch.hashCode());
    result = 31 * result + (createdAt == null ? 0: createdAt.hashCode());
    result = 31 * result + (text == null ? 0: text.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class SmsFull {\n");
    
    sb.append("  id: ").append(id).append("\n");
    sb.append("  from: ").append(from).append("\n");
    sb.append("  to: ").append(to).append("\n");
    sb.append("  direction: ").append(direction).append("\n");
    sb.append("  createdEpoch: ").append(createdEpoch).append("\n");
    sb.append("  createdAt: ").append(createdAt).append("\n");
    sb.append("  text: ").append(text).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
