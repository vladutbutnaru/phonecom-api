/**
 * Phone.com API
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.swagger.client.model.ListPhoneNumbersRegionsFull;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class NumberregionsApi {
  String basePath = "https://api.phone.com/v4";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * 
  * This service lists the quantities of available phone numbers by region.
   * @param filtersCountryCode Country Code filter
   * @param filtersNpa Area Code filter (North America only)
   * @param filtersNxx 2nd set of 3 digits filter (North America only)
   * @param filtersIsTollFree Toll-free status filter
   * @param filtersCity City filter
   * @param filtersProvincePostalCode State or Province filter
   * @param filtersCountryPostalCode Country filter
   * @param sortCountryCode International calling code sorting
   * @param sortNpa Area Code sorting (North America only)
   * @param sortNxx 2nd set of 3 digits sorting (North America)
   * @param sortIsTollFree Toll Free status sorting
   * @param sortCity City sorting
   * @param sortProvincePostalCode State or Province sorting
   * @param sortCountryPostalCode Country sorting
   * @param limit Max results
   * @param offset Results to skip
   * @param fields Field set
   * @param groupBy Fields to group by (supports the same set of fields as the filters and sorting)
   * @return ListPhoneNumbersRegionsFull
  */
  public ListPhoneNumbersRegionsFull listAvailablePhoneNumberRegions (List<String> filtersCountryCode, List<String> filtersNpa, List<String> filtersNxx, List<String> filtersIsTollFree, List<String> filtersCity, List<String> filtersProvincePostalCode, List<String> filtersCountryPostalCode, String sortCountryCode, String sortNpa, String sortNxx, String sortIsTollFree, String sortCity, String sortProvincePostalCode, String sortCountryPostalCode, Integer limit, Integer offset, String fields, List<String> groupBy) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/phone-numbers/available/regions".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("multi", "filters[country_code]", filtersCountryCode));
          queryParams.addAll(ApiInvoker.parameterToPairs("multi", "filters[npa]", filtersNpa));
          queryParams.addAll(ApiInvoker.parameterToPairs("multi", "filters[nxx]", filtersNxx));
          queryParams.addAll(ApiInvoker.parameterToPairs("multi", "filters[is_toll_free]", filtersIsTollFree));
          queryParams.addAll(ApiInvoker.parameterToPairs("multi", "filters[city]", filtersCity));
          queryParams.addAll(ApiInvoker.parameterToPairs("multi", "filters[province_postal_code]", filtersProvincePostalCode));
          queryParams.addAll(ApiInvoker.parameterToPairs("multi", "filters[country_postal_code]", filtersCountryPostalCode));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "sort[country_code]", sortCountryCode));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "sort[npa]", sortNpa));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "sort[nxx]", sortNxx));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "sort[is_toll_free]", sortIsTollFree));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "sort[city]", sortCity));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "sort[province_postal_code]", sortProvincePostalCode));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "sort[country_postal_code]", sortCountryPostalCode));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "fields", fields));
          queryParams.addAll(ApiInvoker.parameterToPairs("csv", "group_by", groupBy));


      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] { "apiKey" };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (ListPhoneNumbersRegionsFull) ApiInvoker.deserialize(localVarResponse, "", ListPhoneNumbersRegionsFull.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 
   * This service lists the quantities of available phone numbers by region.
   * @param filtersCountryCode Country Code filter   * @param filtersNpa Area Code filter (North America only)   * @param filtersNxx 2nd set of 3 digits filter (North America only)   * @param filtersIsTollFree Toll-free status filter   * @param filtersCity City filter   * @param filtersProvincePostalCode State or Province filter   * @param filtersCountryPostalCode Country filter   * @param sortCountryCode International calling code sorting   * @param sortNpa Area Code sorting (North America only)   * @param sortNxx 2nd set of 3 digits sorting (North America)   * @param sortIsTollFree Toll Free status sorting   * @param sortCity City sorting   * @param sortProvincePostalCode State or Province sorting   * @param sortCountryPostalCode Country sorting   * @param limit Max results   * @param offset Results to skip   * @param fields Field set   * @param groupBy Fields to group by (supports the same set of fields as the filters and sorting)
  */
  public void listAvailablePhoneNumberRegions (List<String> filtersCountryCode, List<String> filtersNpa, List<String> filtersNxx, List<String> filtersIsTollFree, List<String> filtersCity, List<String> filtersProvincePostalCode, List<String> filtersCountryPostalCode, String sortCountryCode, String sortNpa, String sortNxx, String sortIsTollFree, String sortCity, String sortProvincePostalCode, String sortCountryPostalCode, Integer limit, Integer offset, String fields, List<String> groupBy, final Response.Listener<ListPhoneNumbersRegionsFull> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/phone-numbers/available/regions".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "filters[country_code]", filtersCountryCode));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "filters[npa]", filtersNpa));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "filters[nxx]", filtersNxx));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "filters[is_toll_free]", filtersIsTollFree));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "filters[city]", filtersCity));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "filters[province_postal_code]", filtersProvincePostalCode));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "filters[country_postal_code]", filtersCountryPostalCode));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort[country_code]", sortCountryCode));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort[npa]", sortNpa));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort[nxx]", sortNxx));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort[is_toll_free]", sortIsTollFree));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort[city]", sortCity));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort[province_postal_code]", sortProvincePostalCode));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort[country_postal_code]", sortCountryPostalCode));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "fields", fields));
    queryParams.addAll(ApiInvoker.parameterToPairs("csv", "group_by", groupBy));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "apiKey" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ListPhoneNumbersRegionsFull) ApiInvoker.deserialize(localVarResponse,  "", ListPhoneNumbersRegionsFull.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
