//
// MenusAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class MenusAPI: APIBase {
    /**
     Create an individual menu
     
     - parameter accountId: (path) Account ID 
     - parameter data: (body) Menu data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createAccountMenu(accountId accountId: Int32, data: CreateMenuParams? = nil, completion: ((data: MenuFull?, error: ErrorType?) -> Void)) {
        createAccountMenuWithRequestBuilder(accountId: accountId, data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create an individual menu
     - POST /accounts/{accountId}/menus
     - This service creates an individual menu. See Account Menus for more info on the properties.
     - API Key:
       - type: apiKey Authorization 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "allow_extension_dial" : true,
  "greeting" : {
    "name" : "aeiou",
    "id" : ""
  },
  "timeout_handler" : {
    "name" : "aeiou",
    "id" : ""
  },
  "name" : "aeiou",
  "options" : "",
  "id" : "",
  "keypress_wait_time" : "",
  "keypress_error" : ""
}}]
     
     - parameter accountId: (path) Account ID 
     - parameter data: (body) Menu data (optional)

     - returns: RequestBuilder<MenuFull> 
     */
    public class func createAccountMenuWithRequestBuilder(accountId accountId: Int32, data: CreateMenuParams? = nil) -> RequestBuilder<MenuFull> {
        var path = "/accounts/{accountId}/menus"
        path = path.stringByReplacingOccurrencesOfString("{accountId}", withString: "\(accountId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<MenuFull>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete an individual menu
     
     - parameter accountId: (path) Account ID 
     - parameter menuId: (path) Menu ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteAccountMenu(accountId accountId: Int32, menuId: Int32, completion: ((data: DeleteMenu?, error: ErrorType?) -> Void)) {
        deleteAccountMenuWithRequestBuilder(accountId: accountId, menuId: menuId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Delete an individual menu
     - DELETE /accounts/{accountId}/menus/{menuId}
     - This service shows the details of an individual menu.
     - API Key:
       - type: apiKey Authorization 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "success" : true
}}]
     
     - parameter accountId: (path) Account ID 
     - parameter menuId: (path) Menu ID 

     - returns: RequestBuilder<DeleteMenu> 
     */
    public class func deleteAccountMenuWithRequestBuilder(accountId accountId: Int32, menuId: Int32) -> RequestBuilder<DeleteMenu> {
        var path = "/accounts/{accountId}/menus/{menuId}"
        path = path.stringByReplacingOccurrencesOfString("{accountId}", withString: "\(accountId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{menuId}", withString: "\(menuId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<DeleteMenu>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Show details of an individual menu
     
     - parameter accountId: (path) Account ID 
     - parameter menuId: (path) Menu ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAccountMenu(accountId accountId: Int32, menuId: Int32, completion: ((data: MenuFull?, error: ErrorType?) -> Void)) {
        getAccountMenuWithRequestBuilder(accountId: accountId, menuId: menuId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Show details of an individual menu
     - GET /accounts/{accountId}/menus/{menuId}
     - This service shows the details of an individual Menu.
     - API Key:
       - type: apiKey Authorization 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "allow_extension_dial" : true,
  "greeting" : {
    "name" : "aeiou",
    "id" : ""
  },
  "timeout_handler" : {
    "name" : "aeiou",
    "id" : ""
  },
  "name" : "aeiou",
  "options" : "",
  "id" : "",
  "keypress_wait_time" : "",
  "keypress_error" : ""
}}]
     
     - parameter accountId: (path) Account ID 
     - parameter menuId: (path) Menu ID 

     - returns: RequestBuilder<MenuFull> 
     */
    public class func getAccountMenuWithRequestBuilder(accountId accountId: Int32, menuId: Int32) -> RequestBuilder<MenuFull> {
        var path = "/accounts/{accountId}/menus/{menuId}"
        path = path.stringByReplacingOccurrencesOfString("{accountId}", withString: "\(accountId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{menuId}", withString: "\(menuId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<MenuFull>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a list of menus for an account
     
     - parameter accountId: (path) Account ID 
     - parameter filtersId: (query) ID filter (optional)
     - parameter filtersName: (query) Name filter (optional)
     - parameter sortId: (query) ID sorting (optional)
     - parameter sortName: (query) Name sorting (optional)
     - parameter limit: (query) Max results (optional)
     - parameter offset: (query) Results to skip (optional)
     - parameter fields: (query) Field set (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listAccountMenus(accountId accountId: Int32, filtersId: [String]? = nil, filtersName: [String]? = nil, sortId: String? = nil, sortName: String? = nil, limit: Int32? = nil, offset: Int32? = nil, fields: String? = nil, completion: ((data: ListMenusFull?, error: ErrorType?) -> Void)) {
        listAccountMenusWithRequestBuilder(accountId: accountId, filtersId: filtersId, filtersName: filtersName, sortId: sortId, sortName: sortName, limit: limit, offset: offset, fields: fields).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a list of menus for an account
     - GET /accounts/{accountId}/menus
     - See Account Menus for more info on the properties.
     - API Key:
       - type: apiKey Authorization 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "total" : "",
  "offset" : "",
  "limit" : "",
  "filters" : {
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "sort" : {
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "items" : ""
}}]
     
     - parameter accountId: (path) Account ID 
     - parameter filtersId: (query) ID filter (optional)
     - parameter filtersName: (query) Name filter (optional)
     - parameter sortId: (query) ID sorting (optional)
     - parameter sortName: (query) Name sorting (optional)
     - parameter limit: (query) Max results (optional)
     - parameter offset: (query) Results to skip (optional)
     - parameter fields: (query) Field set (optional)

     - returns: RequestBuilder<ListMenusFull> 
     */
    public class func listAccountMenusWithRequestBuilder(accountId accountId: Int32, filtersId: [String]? = nil, filtersName: [String]? = nil, sortId: String? = nil, sortName: String? = nil, limit: Int32? = nil, offset: Int32? = nil, fields: String? = nil) -> RequestBuilder<ListMenusFull> {
        var path = "/accounts/{accountId}/menus"
        path = path.stringByReplacingOccurrencesOfString("{accountId}", withString: "\(accountId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "filters[id]": filtersId,
            "filters[name]": filtersName,
            "sort[id]": sortId,
            "sort[name]": sortName,
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "fields": fields
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ListMenusFull>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Replace an individual menu
     
     - parameter accountId: (path) Account ID 
     - parameter menuId: (path) Menu ID 
     - parameter data: (body) Menu data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func replaceAccountMenu(accountId accountId: Int32, menuId: Int32, data: ReplaceMenuParams? = nil, completion: ((data: MenuFull?, error: ErrorType?) -> Void)) {
        replaceAccountMenuWithRequestBuilder(accountId: accountId, menuId: menuId, data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Replace an individual menu
     - PUT /accounts/{accountId}/menus/{menuId}
     - This service replaces the details of an individual Menu.
     - API Key:
       - type: apiKey Authorization 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "allow_extension_dial" : true,
  "greeting" : {
    "name" : "aeiou",
    "id" : ""
  },
  "timeout_handler" : {
    "name" : "aeiou",
    "id" : ""
  },
  "name" : "aeiou",
  "options" : "",
  "id" : "",
  "keypress_wait_time" : "",
  "keypress_error" : ""
}}]
     
     - parameter accountId: (path) Account ID 
     - parameter menuId: (path) Menu ID 
     - parameter data: (body) Menu data (optional)

     - returns: RequestBuilder<MenuFull> 
     */
    public class func replaceAccountMenuWithRequestBuilder(accountId accountId: Int32, menuId: Int32, data: ReplaceMenuParams? = nil) -> RequestBuilder<MenuFull> {
        var path = "/accounts/{accountId}/menus/{menuId}"
        path = path.stringByReplacingOccurrencesOfString("{accountId}", withString: "\(accountId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{menuId}", withString: "\(menuId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<MenuFull>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
