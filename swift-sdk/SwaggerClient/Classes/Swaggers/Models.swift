// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T

    public init(statusCode: Int, header: [String: String], body: T) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if T.self is NSUUID.Type && source is String {
            return NSUUID(UUIDString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is NSData.Type && source is String {
            return NSData(base64EncodedString: source as! String, options: NSDataBase64DecodingOptions()) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            } 

            // Decoder for [AccountFull]
            Decoders.addDecoder(clazz: [AccountFull].self) { (source: AnyObject) -> [AccountFull] in
                return Decoders.decode(clazz: [AccountFull].self, source: source)
            }
            // Decoder for AccountFull
            Decoders.addDecoder(clazz: AccountFull.self) { (source: AnyObject) -> AccountFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AccountFull()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"])
                instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"])
                instance.masterAccount = Decoders.decodeOptional(clazz: AccountSummary.self, source: sourceDictionary["master_account"])
                instance.contact = Decoders.decodeOptional(clazz: ContactAccount.self, source: sourceDictionary["contact"])
                instance.billingContact = Decoders.decodeOptional(clazz: ContactAccount.self, source: sourceDictionary["billing_contact"])
                return instance
            }


            // Decoder for [AccountSummary]
            Decoders.addDecoder(clazz: [AccountSummary].self) { (source: AnyObject) -> [AccountSummary] in
                return Decoders.decode(clazz: [AccountSummary].self, source: source)
            }
            // Decoder for AccountSummary
            Decoders.addDecoder(clazz: AccountSummary.self) { (source: AnyObject) -> AccountSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AccountSummary()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [Address]
            Decoders.addDecoder(clazz: [Address].self) { (source: AnyObject) -> [Address] in
                return Decoders.decode(clazz: [Address].self, source: source)
            }
            // Decoder for Address
            Decoders.addDecoder(clazz: Address.self) { (source: AnyObject) -> Address in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Address()
                instance.line1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["line_1"])
                instance.line2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["line_2"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.province = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["province"])
                instance.postalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["postal_code"])
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"])
                return instance
            }


            // Decoder for [AddressListContacts]
            Decoders.addDecoder(clazz: [AddressListContacts].self) { (source: AnyObject) -> [AddressListContacts] in
                return Decoders.decode(clazz: [AddressListContacts].self, source: source)
            }
            // Decoder for AddressListContacts
            Decoders.addDecoder(clazz: AddressListContacts.self) { (source: AnyObject) -> AddressListContacts in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AddressListContacts()
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.street = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["street"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"])
                instance.zip = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["zip"])
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"])
                return instance
            }


            // Decoder for [Addresses]
            Decoders.addDecoder(clazz: [Addresses].self) { (source: AnyObject) -> [Addresses] in
                return Decoders.decode(clazz: [Addresses].self, source: source)
            }
            // Decoder for Addresses
            Decoders.addDecoder(clazz: Addresses.self) { (source: AnyObject) -> Addresses in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Addresses()
                return instance
            }


            // Decoder for [ApplicationFull]
            Decoders.addDecoder(clazz: [ApplicationFull].self) { (source: AnyObject) -> [ApplicationFull] in
                return Decoders.decode(clazz: [ApplicationFull].self, source: source)
            }
            // Decoder for ApplicationFull
            Decoders.addDecoder(clazz: ApplicationFull.self) { (source: AnyObject) -> ApplicationFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ApplicationFull()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [ApplicationSummary]
            Decoders.addDecoder(clazz: [ApplicationSummary].self) { (source: AnyObject) -> [ApplicationSummary] in
                return Decoders.decode(clazz: [ApplicationSummary].self, source: source)
            }
            // Decoder for ApplicationSummary
            Decoders.addDecoder(clazz: ApplicationSummary.self) { (source: AnyObject) -> ApplicationSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ApplicationSummary()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [AvailableNumberFull]
            Decoders.addDecoder(clazz: [AvailableNumberFull].self) { (source: AnyObject) -> [AvailableNumberFull] in
                return Decoders.decode(clazz: [AvailableNumberFull].self, source: source)
            }
            // Decoder for AvailableNumberFull
            Decoders.addDecoder(clazz: AvailableNumberFull.self) { (source: AnyObject) -> AvailableNumberFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AvailableNumberFull()
                instance.phoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone_number"])
                instance.formatted = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["formatted"])
                instance.price = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["price"])
                instance.isTollFree = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_toll_free"])
                instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_code"])
                instance.npa = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["npa"])
                instance.nxx = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nxx"])
                instance.xxxx = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["xxxx"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.province = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["province"])
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"])
                return instance
            }


            // Decoder for [AvailableNumberSummary]
            Decoders.addDecoder(clazz: [AvailableNumberSummary].self) { (source: AnyObject) -> [AvailableNumberSummary] in
                return Decoders.decode(clazz: [AvailableNumberSummary].self, source: source)
            }
            // Decoder for AvailableNumberSummary
            Decoders.addDecoder(clazz: AvailableNumberSummary.self) { (source: AnyObject) -> AvailableNumberSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AvailableNumberSummary()
                instance.phoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone_number"])
                instance.formatted = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["formatted"])
                return instance
            }


            // Decoder for [AvailableNumbersFull]
            Decoders.addDecoder(clazz: [AvailableNumbersFull].self) { (source: AnyObject) -> [AvailableNumbersFull] in
                return Decoders.decode(clazz: [AvailableNumbersFull].self, source: source)
            }
            // Decoder for AvailableNumbersFull
            Decoders.addDecoder(clazz: AvailableNumbersFull.self) { (source: AnyObject) -> AvailableNumbersFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AvailableNumbersFull()
                return instance
            }


            // Decoder for [AvailableNumbersSummary]
            Decoders.addDecoder(clazz: [AvailableNumbersSummary].self) { (source: AnyObject) -> [AvailableNumbersSummary] in
                return Decoders.decode(clazz: [AvailableNumbersSummary].self, source: source)
            }
            // Decoder for AvailableNumbersSummary
            Decoders.addDecoder(clazz: AvailableNumbersSummary.self) { (source: AnyObject) -> AvailableNumbersSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AvailableNumbersSummary()
                return instance
            }


            // Decoder for [CallDetails]
            Decoders.addDecoder(clazz: [CallDetails].self) { (source: AnyObject) -> [CallDetails] in
                return Decoders.decode(clazz: [CallDetails].self, source: source)
            }
            // Decoder for CallDetails
            Decoders.addDecoder(clazz: CallDetails.self) { (source: AnyObject) -> CallDetails in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CallDetails()
                instance.startTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["start_time"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.idValue = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id_value"])
                instance.voipId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["voip_id"])
                instance.voipPhoneId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["voip_phone_id"])
                return instance
            }


            // Decoder for [CallLogFull]
            Decoders.addDecoder(clazz: [CallLogFull].self) { (source: AnyObject) -> [CallLogFull] in
                return Decoders.decode(clazz: [CallLogFull].self, source: source)
            }
            // Decoder for CallLogFull
            Decoders.addDecoder(clazz: CallLogFull.self) { (source: AnyObject) -> CallLogFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CallLogFull()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.uuid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uuid"])
                instance._extension = Decoders.decodeOptional(clazz: ExtensionSummary.self, source: sourceDictionary["extension"])
                instance.callerId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["caller_id"])
                instance.calledNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["called_number"])
                instance.startTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["start_time"])
                instance.createdAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["created_at"])
                instance.direction = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["direction"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.callDuration = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["call_duration"])
                instance.isMonitored = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["is_monitored"])
                instance.callNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["call_number"])
                instance.finalAction = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["final_action"])
                instance.callRecording = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["call_recording"])
                instance.details = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["details"])
                instance.callerCnam = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["caller_cnam"])
                return instance
            }


            // Decoder for [CallLogSummary]
            Decoders.addDecoder(clazz: [CallLogSummary].self) { (source: AnyObject) -> [CallLogSummary] in
                return Decoders.decode(clazz: [CallLogSummary].self, source: source)
            }
            // Decoder for CallLogSummary
            Decoders.addDecoder(clazz: CallLogSummary.self) { (source: AnyObject) -> CallLogSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CallLogSummary()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.uuid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uuid"])
                instance._extension = Decoders.decodeOptional(clazz: ExtensionSummary.self, source: sourceDictionary["extension"])
                instance.callerId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["caller_id"])
                instance.calledNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["called_number"])
                instance.startTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["start_time"])
                instance.createdAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["created_at"])
                instance.direction = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["direction"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.callDuration = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["call_duration"])
                instance.isMonitored = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["is_monitored"])
                instance.callNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["call_number"])
                instance.finalAction = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["final_action"])
                instance.callRecording = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["call_recording"])
                return instance
            }


            // Decoder for [CallNotifications]
            Decoders.addDecoder(clazz: [CallNotifications].self) { (source: AnyObject) -> [CallNotifications] in
                return Decoders.decode(clazz: [CallNotifications].self, source: source)
            }
            // Decoder for CallNotifications
            Decoders.addDecoder(clazz: CallNotifications.self) { (source: AnyObject) -> CallNotifications in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CallNotifications()
                instance.emails = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["emails"])
                instance.sms = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sms"])
                return instance
            }


            // Decoder for [CallerIdFull]
            Decoders.addDecoder(clazz: [CallerIdFull].self) { (source: AnyObject) -> [CallerIdFull] in
                return Decoders.decode(clazz: [CallerIdFull].self, source: source)
            }
            // Decoder for CallerIdFull
            Decoders.addDecoder(clazz: CallerIdFull.self) { (source: AnyObject) -> CallerIdFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CallerIdFull()
                instance.number = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["number"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                return instance
            }


            // Decoder for [CallerIdPhoneNumber]
            Decoders.addDecoder(clazz: [CallerIdPhoneNumber].self) { (source: AnyObject) -> [CallerIdPhoneNumber] in
                return Decoders.decode(clazz: [CallerIdPhoneNumber].self, source: source)
            }
            // Decoder for CallerIdPhoneNumber
            Decoders.addDecoder(clazz: CallerIdPhoneNumber.self) { (source: AnyObject) -> CallerIdPhoneNumber in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CallerIdPhoneNumber()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                return instance
            }


            // Decoder for [ContactAccount]
            Decoders.addDecoder(clazz: [ContactAccount].self) { (source: AnyObject) -> [ContactAccount] in
                return Decoders.decode(clazz: [ContactAccount].self, source: source)
            }
            // Decoder for ContactAccount
            Decoders.addDecoder(clazz: ContactAccount.self) { (source: AnyObject) -> ContactAccount in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ContactAccount()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.company = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["company"])
                instance.address = Decoders.decodeOptional(clazz: Address.self, source: sourceDictionary["address"])
                instance.phone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone"])
                instance.fax = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fax"])
                instance.primaryEmail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["primary_email"])
                instance.alternateEmail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["alternate_email"])
                return instance
            }


            // Decoder for [ContactFull]
            Decoders.addDecoder(clazz: [ContactFull].self) { (source: AnyObject) -> [ContactFull] in
                return Decoders.decode(clazz: [ContactFull].self, source: source)
            }
            // Decoder for ContactFull
            Decoders.addDecoder(clazz: ContactFull.self) { (source: AnyObject) -> ContactFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ContactFull()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance._prefix = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["prefix"])
                instance.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["first_name"])
                instance.middleName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["middle_name"])
                instance.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["last_name"])
                instance.suffix = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["suffix"])
                instance.nickname = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nickname"])
                instance.company = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["company"])
                instance.phoneticFirstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phonetic_first_name"])
                instance.phoneticMiddleName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phonetic_middle_name"])
                instance.phoneticLastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phonetic_last_name"])
                instance.department = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["department"])
                instance.jobTitle = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["job_title"])
                instance.emails = Decoders.decodeOptional(clazz: Emails.self, source: sourceDictionary["emails"])
                instance.phoneNumbers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["phone_numbers"])
                instance.addresses = Decoders.decodeOptional(clazz: Addresses.self, source: sourceDictionary["addresses"])
                instance.group = Decoders.decodeOptional(clazz: GroupListContacts.self, source: sourceDictionary["group"])
                instance.createdAt = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["created_at"])
                instance.updatedAt = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["updated_at"])
                return instance
            }


            // Decoder for [ContactSubaccount]
            Decoders.addDecoder(clazz: [ContactSubaccount].self) { (source: AnyObject) -> [ContactSubaccount] in
                return Decoders.decode(clazz: [ContactSubaccount].self, source: source)
            }
            // Decoder for ContactSubaccount
            Decoders.addDecoder(clazz: ContactSubaccount.self) { (source: AnyObject) -> ContactSubaccount in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ContactSubaccount()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.address = Decoders.decodeOptional(clazz: Address.self, source: sourceDictionary["address"])
                instance.primaryEmail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["primary_email"])
                instance.alternateEmail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["alternate_email"])
                instance.company = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["company"])
                instance.phone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone"])
                instance.fax = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fax"])
                return instance
            }


            // Decoder for [ContactSummary]
            Decoders.addDecoder(clazz: [ContactSummary].self) { (source: AnyObject) -> [ContactSummary] in
                return Decoders.decode(clazz: [ContactSummary].self, source: source)
            }
            // Decoder for ContactSummary
            Decoders.addDecoder(clazz: ContactSummary.self) { (source: AnyObject) -> ContactSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ContactSummary()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance._prefix = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["prefix"])
                instance.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["first_name"])
                instance.middleName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["middle_name"])
                instance.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["last_name"])
                instance.suffix = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["suffix"])
                instance.nickname = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nickname"])
                instance.company = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["company"])
                return instance
            }


            // Decoder for [CreateContactParams]
            Decoders.addDecoder(clazz: [CreateContactParams].self) { (source: AnyObject) -> [CreateContactParams] in
                return Decoders.decode(clazz: [CreateContactParams].self, source: source)
            }
            // Decoder for CreateContactParams
            Decoders.addDecoder(clazz: CreateContactParams.self) { (source: AnyObject) -> CreateContactParams in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CreateContactParams()
                instance.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["first_name"])
                instance.middleName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["middle_name"])
                instance.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["last_name"])
                instance._prefix = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["prefix"])
                instance.phoneticFirstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phonetic_first_name"])
                instance.phoneticMiddleName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phonetic_middle_name"])
                instance.phoneticLastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phonetic_last_name"])
                instance.suffix = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["suffix"])
                instance.nickname = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nickname"])
                instance.company = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["company"])
                instance.department = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["department"])
                instance.jobTitle = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["job_title"])
                instance.emails = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["emails"])
                instance.phoneNumbers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["phone_numbers"])
                instance.addresses = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["addresses"])
                instance.group = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["group"])
                return instance
            }


            // Decoder for [CreateDeviceParams]
            Decoders.addDecoder(clazz: [CreateDeviceParams].self) { (source: AnyObject) -> [CreateDeviceParams] in
                return Decoders.decode(clazz: [CreateDeviceParams].self, source: source)
            }
            // Decoder for CreateDeviceParams
            Decoders.addDecoder(clazz: CreateDeviceParams.self) { (source: AnyObject) -> CreateDeviceParams in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CreateDeviceParams()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.lines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["lines"])
                return instance
            }


            // Decoder for [CreateExtensionParams]
            Decoders.addDecoder(clazz: [CreateExtensionParams].self) { (source: AnyObject) -> [CreateExtensionParams] in
                return Decoders.decode(clazz: [CreateExtensionParams].self, source: source)
            }
            // Decoder for CreateExtensionParams
            Decoders.addDecoder(clazz: CreateExtensionParams.self) { (source: AnyObject) -> CreateExtensionParams in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CreateExtensionParams()
                instance.callerId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["caller_id"])
                instance.usageType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["usage_type"])
                instance.allowsCallWaiting = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["allows_call_waiting"])
                instance._extension = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["extension"])
                instance.includeInDirectory = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["include_in_directory"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.fullName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["full_name"])
                instance.timezone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["timezone"])
                instance.nameGreeting = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["name_greeting"])
                instance.voicemailGreetingAlternate = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["voicemail[greeting][alternate]"])
                instance.localAreaCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["local_area_code"])
                instance.voicemailGreetingEnableLeaveMessagePrompt = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["voicemail[greeting][enable_leave_message_prompt]"])
                instance.voicemailEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["voicemail[enabled]"])
                instance.enableOutboundCalls = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enable_outbound_calls"])
                instance.enableCallWaiting = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enable_call_waiting"])
                instance.voicemailPassword = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["voicemail[password]"])
                instance.voicemailGreetingType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["voicemail[greeting][type]"])
                instance.voicemailGreetingStandard = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["voicemail[greeting][standard]"])
                instance.voicemailTranscription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["voicemail[transcription]"])
                instance.voicemailNotificationsEmails = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["voicemail[notifications][emails]"])
                instance.voicemailNotificationsSms = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["voicemail[notifications][sms]"])
                instance.callNotificationsEmails = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["call_notifications[emails]"])
                instance.callNotificationsSms = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["call_notifications[sms]"])
                return instance
            }


            // Decoder for [CreateGroupParams]
            Decoders.addDecoder(clazz: [CreateGroupParams].self) { (source: AnyObject) -> [CreateGroupParams] in
                return Decoders.decode(clazz: [CreateGroupParams].self, source: source)
            }
            // Decoder for CreateGroupParams
            Decoders.addDecoder(clazz: CreateGroupParams.self) { (source: AnyObject) -> CreateGroupParams in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CreateGroupParams()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [CreateMenuParams]
            Decoders.addDecoder(clazz: [CreateMenuParams].self) { (source: AnyObject) -> [CreateMenuParams] in
                return Decoders.decode(clazz: [CreateMenuParams].self, source: source)
            }
            // Decoder for CreateMenuParams
            Decoders.addDecoder(clazz: CreateMenuParams.self) { (source: AnyObject) -> CreateMenuParams in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CreateMenuParams()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.mainMessage = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["main_message"])
                instance.invalidKeypressMessage = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["invalid_keypress_message"])
                instance.allowExtensionDial = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["allow_extension_dial"])
                instance.keypressWaitTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["keypress_wait_time"])
                instance.timeoutHandler = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["timeout_handler"])
                instance.options = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["options"])
                return instance
            }


            // Decoder for [CreatePhoneNumberParams]
            Decoders.addDecoder(clazz: [CreatePhoneNumberParams].self) { (source: AnyObject) -> [CreatePhoneNumberParams] in
                return Decoders.decode(clazz: [CreatePhoneNumberParams].self, source: source)
            }
            // Decoder for CreatePhoneNumberParams
            Decoders.addDecoder(clazz: CreatePhoneNumberParams.self) { (source: AnyObject) -> CreatePhoneNumberParams in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CreatePhoneNumberParams()
                instance.phoneNumber = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["phone_number"])
                instance.route = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["route"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.blockIncoming = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["block_incoming"])
                instance.blockAnonymous = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["block_anonymous"])
                instance.callerIdName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["caller_id[name]"])
                instance.callerIdType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["caller_id[type]"])
                instance.smsForwardingType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sms_forwarding[type]"])
                instance.smsForwardingApplication = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["sms_forwarding[application]"])
                instance.smsForwardingExtension = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["sms_forwarding[extension]"])
                instance.callNotificationsEmails = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["call_notifications[emails]"])
                instance.callNotificationsSms = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["call_notifications[sms]"])
                return instance
            }


            // Decoder for [CreateQueueParams]
            Decoders.addDecoder(clazz: [CreateQueueParams].self) { (source: AnyObject) -> [CreateQueueParams] in
                return Decoders.decode(clazz: [CreateQueueParams].self, source: source)
            }
            // Decoder for CreateQueueParams
            Decoders.addDecoder(clazz: CreateQueueParams.self) { (source: AnyObject) -> CreateQueueParams in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CreateQueueParams()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.greeting = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["greeting"])
                instance.holdMusic = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["hold_music"])
                instance.maxHoldTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_hold_time"])
                instance.callerIdType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["caller_id_type"])
                instance.ringTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ring_time"])
                instance.members = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["members"])
                return instance
            }


            // Decoder for [CreateRouteParams]
            Decoders.addDecoder(clazz: [CreateRouteParams].self) { (source: AnyObject) -> [CreateRouteParams] in
                return Decoders.decode(clazz: [CreateRouteParams].self, source: source)
            }
            // Decoder for CreateRouteParams
            Decoders.addDecoder(clazz: CreateRouteParams.self) { (source: AnyObject) -> CreateRouteParams in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CreateRouteParams()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.rules = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["rules"])
                instance._extension = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["extension"])
                return instance
            }


            // Decoder for [CreateSmsParams]
            Decoders.addDecoder(clazz: [CreateSmsParams].self) { (source: AnyObject) -> [CreateSmsParams] in
                return Decoders.decode(clazz: [CreateSmsParams].self, source: source)
            }
            // Decoder for CreateSmsParams
            Decoders.addDecoder(clazz: CreateSmsParams.self) { (source: AnyObject) -> CreateSmsParams in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CreateSmsParams()
                instance.from = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["from"])
                instance.to = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["to"])
                instance.text = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["text"])
                return instance
            }


            // Decoder for [CreateSubaccountParams]
            Decoders.addDecoder(clazz: [CreateSubaccountParams].self) { (source: AnyObject) -> [CreateSubaccountParams] in
                return Decoders.decode(clazz: [CreateSubaccountParams].self, source: source)
            }
            // Decoder for CreateSubaccountParams
            Decoders.addDecoder(clazz: CreateSubaccountParams.self) { (source: AnyObject) -> CreateSubaccountParams in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CreateSubaccountParams()
                instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"])
                instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"])
                instance.contact = Decoders.decodeOptional(clazz: ContactSubaccount.self, source: sourceDictionary["contact"])
                instance.billingContact = Decoders.decodeOptional(clazz: ContactSubaccount.self, source: sourceDictionary["billing_contact"])
                return instance
            }


            // Decoder for [CreateTrunkParams]
            Decoders.addDecoder(clazz: [CreateTrunkParams].self) { (source: AnyObject) -> [CreateTrunkParams] in
                return Decoders.decode(clazz: [CreateTrunkParams].self, source: source)
            }
            // Decoder for CreateTrunkParams
            Decoders.addDecoder(clazz: CreateTrunkParams.self) { (source: AnyObject) -> CreateTrunkParams in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CreateTrunkParams()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance.maxConcurrentCalls = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_concurrent_calls"])
                instance.maxMinutesPerMonth = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_minutes_per_month"])
                instance.greeting = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["greeting"])
                instance.errorMessage = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["error_message"])
                instance.codecs = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["codecs"])
                return instance
            }


            // Decoder for [DeleteContact]
            Decoders.addDecoder(clazz: [DeleteContact].self) { (source: AnyObject) -> [DeleteContact] in
                return Decoders.decode(clazz: [DeleteContact].self, source: source)
            }
            // Decoder for DeleteContact
            Decoders.addDecoder(clazz: DeleteContact.self) { (source: AnyObject) -> DeleteContact in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DeleteContact()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }


            // Decoder for [DeleteGroup]
            Decoders.addDecoder(clazz: [DeleteGroup].self) { (source: AnyObject) -> [DeleteGroup] in
                return Decoders.decode(clazz: [DeleteGroup].self, source: source)
            }
            // Decoder for DeleteGroup
            Decoders.addDecoder(clazz: DeleteGroup.self) { (source: AnyObject) -> DeleteGroup in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DeleteGroup()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }


            // Decoder for [DeleteMenu]
            Decoders.addDecoder(clazz: [DeleteMenu].self) { (source: AnyObject) -> [DeleteMenu] in
                return Decoders.decode(clazz: [DeleteMenu].self, source: source)
            }
            // Decoder for DeleteMenu
            Decoders.addDecoder(clazz: DeleteMenu.self) { (source: AnyObject) -> DeleteMenu in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DeleteMenu()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }


            // Decoder for [DeleteQueue]
            Decoders.addDecoder(clazz: [DeleteQueue].self) { (source: AnyObject) -> [DeleteQueue] in
                return Decoders.decode(clazz: [DeleteQueue].self, source: source)
            }
            // Decoder for DeleteQueue
            Decoders.addDecoder(clazz: DeleteQueue.self) { (source: AnyObject) -> DeleteQueue in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DeleteQueue()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }


            // Decoder for [DeleteRoute]
            Decoders.addDecoder(clazz: [DeleteRoute].self) { (source: AnyObject) -> [DeleteRoute] in
                return Decoders.decode(clazz: [DeleteRoute].self, source: source)
            }
            // Decoder for DeleteRoute
            Decoders.addDecoder(clazz: DeleteRoute.self) { (source: AnyObject) -> DeleteRoute in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DeleteRoute()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }


            // Decoder for [DeleteTrunk]
            Decoders.addDecoder(clazz: [DeleteTrunk].self) { (source: AnyObject) -> [DeleteTrunk] in
                return Decoders.decode(clazz: [DeleteTrunk].self, source: source)
            }
            // Decoder for DeleteTrunk
            Decoders.addDecoder(clazz: DeleteTrunk.self) { (source: AnyObject) -> DeleteTrunk in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DeleteTrunk()
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }


            // Decoder for [DeviceFull]
            Decoders.addDecoder(clazz: [DeviceFull].self) { (source: AnyObject) -> [DeviceFull] in
                return Decoders.decode(clazz: [DeviceFull].self, source: source)
            }
            // Decoder for DeviceFull
            Decoders.addDecoder(clazz: DeviceFull.self) { (source: AnyObject) -> DeviceFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DeviceFull()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.sipAuthentication = Decoders.decodeOptional(clazz: SipAuthentication.self, source: sourceDictionary["sip_authentication"])
                instance.lines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["lines"])
                return instance
            }


            // Decoder for [DeviceMembership]
            Decoders.addDecoder(clazz: [DeviceMembership].self) { (source: AnyObject) -> [DeviceMembership] in
                return Decoders.decode(clazz: [DeviceMembership].self, source: source)
            }
            // Decoder for DeviceMembership
            Decoders.addDecoder(clazz: DeviceMembership.self) { (source: AnyObject) -> DeviceMembership in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DeviceMembership()
                instance.line = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["line"])
                instance.device = Decoders.decodeOptional(clazz: DeviceSummary.self, source: sourceDictionary["device"])
                return instance
            }


            // Decoder for [DeviceSummary]
            Decoders.addDecoder(clazz: [DeviceSummary].self) { (source: AnyObject) -> [DeviceSummary] in
                return Decoders.decode(clazz: [DeviceSummary].self, source: source)
            }
            // Decoder for DeviceSummary
            Decoders.addDecoder(clazz: DeviceSummary.self) { (source: AnyObject) -> DeviceSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DeviceSummary()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [DevicesFull]
            Decoders.addDecoder(clazz: [DevicesFull].self) { (source: AnyObject) -> [DevicesFull] in
                return Decoders.decode(clazz: [DevicesFull].self, source: source)
            }
            // Decoder for DevicesFull
            Decoders.addDecoder(clazz: DevicesFull.self) { (source: AnyObject) -> DevicesFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DevicesFull()
                return instance
            }


            // Decoder for [DevicesSummary]
            Decoders.addDecoder(clazz: [DevicesSummary].self) { (source: AnyObject) -> [DevicesSummary] in
                return Decoders.decode(clazz: [DevicesSummary].self, source: source)
            }
            // Decoder for DevicesSummary
            Decoders.addDecoder(clazz: DevicesSummary.self) { (source: AnyObject) -> DevicesSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DevicesSummary()
                return instance
            }


            // Decoder for [Email]
            Decoders.addDecoder(clazz: [Email].self) { (source: AnyObject) -> [Email] in
                return Decoders.decode(clazz: [Email].self, source: source)
            }
            // Decoder for Email
            Decoders.addDecoder(clazz: Email.self) { (source: AnyObject) -> Email in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Email()
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                return instance
            }


            // Decoder for [Emails]
            Decoders.addDecoder(clazz: [Emails].self) { (source: AnyObject) -> [Emails] in
                return Decoders.decode(clazz: [Emails].self, source: source)
            }
            // Decoder for Emails
            Decoders.addDecoder(clazz: Emails.self) { (source: AnyObject) -> Emails in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Emails()
                return instance
            }


            // Decoder for [ExpressServiceCodeFull]
            Decoders.addDecoder(clazz: [ExpressServiceCodeFull].self) { (source: AnyObject) -> [ExpressServiceCodeFull] in
                return Decoders.decode(clazz: [ExpressServiceCodeFull].self, source: source)
            }
            // Decoder for ExpressServiceCodeFull
            Decoders.addDecoder(clazz: ExpressServiceCodeFull.self) { (source: AnyObject) -> ExpressServiceCodeFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ExpressServiceCodeFull()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.expressServiceCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["express_service_code"])
                instance.expireDate = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["expire_date"])
                return instance
            }


            // Decoder for [ExpressServiceCodeSummary]
            Decoders.addDecoder(clazz: [ExpressServiceCodeSummary].self) { (source: AnyObject) -> [ExpressServiceCodeSummary] in
                return Decoders.decode(clazz: [ExpressServiceCodeSummary].self, source: source)
            }
            // Decoder for ExpressServiceCodeSummary
            Decoders.addDecoder(clazz: ExpressServiceCodeSummary.self) { (source: AnyObject) -> ExpressServiceCodeSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ExpressServiceCodeSummary()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.expressServiceCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["express_service_code"])
                return instance
            }


            // Decoder for [ExpressServiceCodesFull]
            Decoders.addDecoder(clazz: [ExpressServiceCodesFull].self) { (source: AnyObject) -> [ExpressServiceCodesFull] in
                return Decoders.decode(clazz: [ExpressServiceCodesFull].self, source: source)
            }
            // Decoder for ExpressServiceCodesFull
            Decoders.addDecoder(clazz: ExpressServiceCodesFull.self) { (source: AnyObject) -> ExpressServiceCodesFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ExpressServiceCodesFull()
                return instance
            }


            // Decoder for [ExpressServiceCodesSummary]
            Decoders.addDecoder(clazz: [ExpressServiceCodesSummary].self) { (source: AnyObject) -> [ExpressServiceCodesSummary] in
                return Decoders.decode(clazz: [ExpressServiceCodesSummary].self, source: source)
            }
            // Decoder for ExpressServiceCodesSummary
            Decoders.addDecoder(clazz: ExpressServiceCodesSummary.self) { (source: AnyObject) -> ExpressServiceCodesSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ExpressServiceCodesSummary()
                return instance
            }


            // Decoder for [ExtensionFull]
            Decoders.addDecoder(clazz: [ExtensionFull].self) { (source: AnyObject) -> [ExtensionFull] in
                return Decoders.decode(clazz: [ExtensionFull].self, source: source)
            }
            // Decoder for ExtensionFull
            Decoders.addDecoder(clazz: ExtensionFull.self) { (source: AnyObject) -> ExtensionFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ExtensionFull()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance._extension = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["extension"])
                instance.fullName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["full_name"])
                instance.usageType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["usage_type"])
                instance.deviceMembership = Decoders.decodeOptional(clazz: DeviceMembership.self, source: sourceDictionary["device_membership"])
                instance.timezone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["timezone"])
                instance.nameGreeting = Decoders.decodeOptional(clazz: MediaSummary.self, source: sourceDictionary["name_greeting"])
                instance.includeInDirectory = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["include_in_directory"])
                instance.callerId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["caller_id"])
                instance.localAreaCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["local_area_code"])
                instance.enableCallWaiting = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enable_call_waiting"])
                instance.enableOutboundCalls = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enable_outbound_calls"])
                instance.voicemail = Decoders.decodeOptional(clazz: Voicemail.self, source: sourceDictionary["voicemail"])
                instance.callNotifications = Decoders.decodeOptional(clazz: Notification.self, source: sourceDictionary["call_notifications"])
                instance.route = Decoders.decodeOptional(clazz: RouteSummary.self, source: sourceDictionary["route"])
                return instance
            }


            // Decoder for [ExtensionSummary]
            Decoders.addDecoder(clazz: [ExtensionSummary].self) { (source: AnyObject) -> [ExtensionSummary] in
                return Decoders.decode(clazz: [ExtensionSummary].self, source: source)
            }
            // Decoder for ExtensionSummary
            Decoders.addDecoder(clazz: ExtensionSummary.self) { (source: AnyObject) -> ExtensionSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ExtensionSummary()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance._extension = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["extension"])
                return instance
            }


            // Decoder for [FilterCallLogs]
            Decoders.addDecoder(clazz: [FilterCallLogs].self) { (source: AnyObject) -> [FilterCallLogs] in
                return Decoders.decode(clazz: [FilterCallLogs].self, source: source)
            }
            // Decoder for FilterCallLogs
            Decoders.addDecoder(clazz: FilterCallLogs.self) { (source: AnyObject) -> FilterCallLogs in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FilterCallLogs()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.startTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["start_time"])
                instance.createdAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["created_at"])
                instance.direction = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["direction"])
                instance.calledNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["called_number"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                return instance
            }


            // Decoder for [FilterIdArray]
            Decoders.addDecoder(clazz: [FilterIdArray].self) { (source: AnyObject) -> [FilterIdArray] in
                return Decoders.decode(clazz: [FilterIdArray].self, source: source)
            }
            // Decoder for FilterIdArray
            Decoders.addDecoder(clazz: FilterIdArray.self) { (source: AnyObject) -> FilterIdArray in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FilterIdArray()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                return instance
            }


            // Decoder for [FilterIdDirectionFrom]
            Decoders.addDecoder(clazz: [FilterIdDirectionFrom].self) { (source: AnyObject) -> [FilterIdDirectionFrom] in
                return Decoders.decode(clazz: [FilterIdDirectionFrom].self, source: source)
            }
            // Decoder for FilterIdDirectionFrom
            Decoders.addDecoder(clazz: FilterIdDirectionFrom.self) { (source: AnyObject) -> FilterIdDirectionFrom in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FilterIdDirectionFrom()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.direction = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["direction"])
                instance.from = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["from"])
                return instance
            }


            // Decoder for [FilterIdExtensionNameArray]
            Decoders.addDecoder(clazz: [FilterIdExtensionNameArray].self) { (source: AnyObject) -> [FilterIdExtensionNameArray] in
                return Decoders.decode(clazz: [FilterIdExtensionNameArray].self, source: source)
            }
            // Decoder for FilterIdExtensionNameArray
            Decoders.addDecoder(clazz: FilterIdExtensionNameArray.self) { (source: AnyObject) -> FilterIdExtensionNameArray in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FilterIdExtensionNameArray()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance._extension = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["extension"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [FilterIdGroupIdUpdatedAtArray]
            Decoders.addDecoder(clazz: [FilterIdGroupIdUpdatedAtArray].self) { (source: AnyObject) -> [FilterIdGroupIdUpdatedAtArray] in
                return Decoders.decode(clazz: [FilterIdGroupIdUpdatedAtArray].self, source: source)
            }
            // Decoder for FilterIdGroupIdUpdatedAtArray
            Decoders.addDecoder(clazz: FilterIdGroupIdUpdatedAtArray.self) { (source: AnyObject) -> FilterIdGroupIdUpdatedAtArray in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FilterIdGroupIdUpdatedAtArray()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.groupId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["group_id"])
                instance.updatedAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["updated_at"])
                return instance
            }


            // Decoder for [FilterIdNameArray]
            Decoders.addDecoder(clazz: [FilterIdNameArray].self) { (source: AnyObject) -> [FilterIdNameArray] in
                return Decoders.decode(clazz: [FilterIdNameArray].self, source: source)
            }
            // Decoder for FilterIdNameArray
            Decoders.addDecoder(clazz: FilterIdNameArray.self) { (source: AnyObject) -> FilterIdNameArray in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FilterIdNameArray()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [FilterIdNamePhoneNumberArray]
            Decoders.addDecoder(clazz: [FilterIdNamePhoneNumberArray].self) { (source: AnyObject) -> [FilterIdNamePhoneNumberArray] in
                return Decoders.decode(clazz: [FilterIdNamePhoneNumberArray].self, source: source)
            }
            // Decoder for FilterIdNamePhoneNumberArray
            Decoders.addDecoder(clazz: FilterIdNamePhoneNumberArray.self) { (source: AnyObject) -> FilterIdNamePhoneNumberArray in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FilterIdNamePhoneNumberArray()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.phoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone_number"])
                return instance
            }


            // Decoder for [FilterListAvailableNumbers]
            Decoders.addDecoder(clazz: [FilterListAvailableNumbers].self) { (source: AnyObject) -> [FilterListAvailableNumbers] in
                return Decoders.decode(clazz: [FilterListAvailableNumbers].self, source: source)
            }
            // Decoder for FilterListAvailableNumbers
            Decoders.addDecoder(clazz: FilterListAvailableNumbers.self) { (source: AnyObject) -> FilterListAvailableNumbers in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FilterListAvailableNumbers()
                instance.phoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone_number"])
                instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_code"])
                instance.npa = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["npa"])
                instance.nxx = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nxx"])
                instance.xxxx = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["xxxx"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.province = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["province"])
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"])
                instance.price = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["price"])
                instance.category = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category"])
                return instance
            }


            // Decoder for [FilterListPhoneNumbersRegions]
            Decoders.addDecoder(clazz: [FilterListPhoneNumbersRegions].self) { (source: AnyObject) -> [FilterListPhoneNumbersRegions] in
                return Decoders.decode(clazz: [FilterListPhoneNumbersRegions].self, source: source)
            }
            // Decoder for FilterListPhoneNumbersRegions
            Decoders.addDecoder(clazz: FilterListPhoneNumbersRegions.self) { (source: AnyObject) -> FilterListPhoneNumbersRegions in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FilterListPhoneNumbersRegions()
                instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_code"])
                instance.npa = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["npa"])
                instance.nxx = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nxx"])
                instance.isTollFree = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["is_toll_free"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.provincePostalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["province_postal_code"])
                instance.countryPostalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_postal_code"])
                return instance
            }


            // Decoder for [FilterNameNumberArray]
            Decoders.addDecoder(clazz: [FilterNameNumberArray].self) { (source: AnyObject) -> [FilterNameNumberArray] in
                return Decoders.decode(clazz: [FilterNameNumberArray].self, source: source)
            }
            // Decoder for FilterNameNumberArray
            Decoders.addDecoder(clazz: FilterNameNumberArray.self) { (source: AnyObject) -> FilterNameNumberArray in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FilterNameNumberArray()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.number = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["number"])
                return instance
            }


            // Decoder for [Greeting]
            Decoders.addDecoder(clazz: [Greeting].self) { (source: AnyObject) -> [Greeting] in
                return Decoders.decode(clazz: [Greeting].self, source: source)
            }
            // Decoder for Greeting
            Decoders.addDecoder(clazz: Greeting.self) { (source: AnyObject) -> Greeting in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Greeting()
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.alternate = Decoders.decodeOptional(clazz: MediaSummary.self, source: sourceDictionary["alternate"])
                instance.standard = Decoders.decodeOptional(clazz: MediaSummary.self, source: sourceDictionary["standard"])
                instance.enableLeaveMessagePrompt = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enable_leave_message_prompt"])
                return instance
            }


            // Decoder for [GroupByListPhoneNumbersRegions]
            Decoders.addDecoder(clazz: [GroupByListPhoneNumbersRegions].self) { (source: AnyObject) -> [GroupByListPhoneNumbersRegions] in
                return Decoders.decode(clazz: [GroupByListPhoneNumbersRegions].self, source: source)
            }
            // Decoder for GroupByListPhoneNumbersRegions
            Decoders.addDecoder(clazz: GroupByListPhoneNumbersRegions.self) { (source: AnyObject) -> GroupByListPhoneNumbersRegions in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GroupByListPhoneNumbersRegions()
                return instance
            }


            // Decoder for [GroupFull]
            Decoders.addDecoder(clazz: [GroupFull].self) { (source: AnyObject) -> [GroupFull] in
                return Decoders.decode(clazz: [GroupFull].self, source: source)
            }
            // Decoder for GroupFull
            Decoders.addDecoder(clazz: GroupFull.self) { (source: AnyObject) -> GroupFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GroupFull()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [GroupListContacts]
            Decoders.addDecoder(clazz: [GroupListContacts].self) { (source: AnyObject) -> [GroupListContacts] in
                return Decoders.decode(clazz: [GroupListContacts].self, source: source)
            }
            // Decoder for GroupListContacts
            Decoders.addDecoder(clazz: GroupListContacts.self) { (source: AnyObject) -> GroupListContacts in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GroupListContacts()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [GroupSummary]
            Decoders.addDecoder(clazz: [GroupSummary].self) { (source: AnyObject) -> [GroupSummary] in
                return Decoders.decode(clazz: [GroupSummary].self, source: source)
            }
            // Decoder for GroupSummary
            Decoders.addDecoder(clazz: GroupSummary.self) { (source: AnyObject) -> GroupSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GroupSummary()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [GroupsFull]
            Decoders.addDecoder(clazz: [GroupsFull].self) { (source: AnyObject) -> [GroupsFull] in
                return Decoders.decode(clazz: [GroupsFull].self, source: source)
            }
            // Decoder for GroupsFull
            Decoders.addDecoder(clazz: GroupsFull.self) { (source: AnyObject) -> GroupsFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GroupsFull()
                return instance
            }


            // Decoder for [GroupsSummary]
            Decoders.addDecoder(clazz: [GroupsSummary].self) { (source: AnyObject) -> [GroupsSummary] in
                return Decoders.decode(clazz: [GroupsSummary].self, source: source)
            }
            // Decoder for GroupsSummary
            Decoders.addDecoder(clazz: GroupsSummary.self) { (source: AnyObject) -> GroupsSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GroupsSummary()
                return instance
            }


            // Decoder for [HoldMusic]
            Decoders.addDecoder(clazz: [HoldMusic].self) { (source: AnyObject) -> [HoldMusic] in
                return Decoders.decode(clazz: [HoldMusic].self, source: source)
            }
            // Decoder for HoldMusic
            Decoders.addDecoder(clazz: HoldMusic.self) { (source: AnyObject) -> HoldMusic in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HoldMusic()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [Line]
            Decoders.addDecoder(clazz: [Line].self) { (source: AnyObject) -> [Line] in
                return Decoders.decode(clazz: [Line].self, source: source)
            }
            // Decoder for Line
            Decoders.addDecoder(clazz: Line.self) { (source: AnyObject) -> Line in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Line()
                instance.line = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["line"])
                instance._extension = Decoders.decodeOptional(clazz: ExtensionSummary.self, source: sourceDictionary["extension"])
                return instance
            }


            // Decoder for [ListAccountsFull]
            Decoders.addDecoder(clazz: [ListAccountsFull].self) { (source: AnyObject) -> [ListAccountsFull] in
                return Decoders.decode(clazz: [ListAccountsFull].self, source: source)
            }
            // Decoder for ListAccountsFull
            Decoders.addDecoder(clazz: ListAccountsFull.self) { (source: AnyObject) -> ListAccountsFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListAccountsFull()
                instance.filters = Decoders.decodeOptional(clazz: FilterIdArray.self, source: sourceDictionary["filters"])
                instance.sort = Decoders.decodeOptional(clazz: SortId.self, source: sourceDictionary["sort"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [ListAccountsSummary]
            Decoders.addDecoder(clazz: [ListAccountsSummary].self) { (source: AnyObject) -> [ListAccountsSummary] in
                return Decoders.decode(clazz: [ListAccountsSummary].self, source: source)
            }
            // Decoder for ListAccountsSummary
            Decoders.addDecoder(clazz: ListAccountsSummary.self) { (source: AnyObject) -> ListAccountsSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListAccountsSummary()
                instance.filters = Decoders.decodeOptional(clazz: FilterIdArray.self, source: sourceDictionary["filters"])
                instance.sort = Decoders.decodeOptional(clazz: SortId.self, source: sourceDictionary["sort"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [ListApplicationsFull]
            Decoders.addDecoder(clazz: [ListApplicationsFull].self) { (source: AnyObject) -> [ListApplicationsFull] in
                return Decoders.decode(clazz: [ListApplicationsFull].self, source: source)
            }
            // Decoder for ListApplicationsFull
            Decoders.addDecoder(clazz: ListApplicationsFull.self) { (source: AnyObject) -> ListApplicationsFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListApplicationsFull()
                instance.filters = Decoders.decodeOptional(clazz: FilterIdNameArray.self, source: sourceDictionary["filters"])
                instance.sort = Decoders.decodeOptional(clazz: SortIdName.self, source: sourceDictionary["sort"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [ListApplicationsSummary]
            Decoders.addDecoder(clazz: [ListApplicationsSummary].self) { (source: AnyObject) -> [ListApplicationsSummary] in
                return Decoders.decode(clazz: [ListApplicationsSummary].self, source: source)
            }
            // Decoder for ListApplicationsSummary
            Decoders.addDecoder(clazz: ListApplicationsSummary.self) { (source: AnyObject) -> ListApplicationsSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListApplicationsSummary()
                instance.filters = Decoders.decodeOptional(clazz: FilterIdNameArray.self, source: sourceDictionary["filters"])
                instance.sort = Decoders.decodeOptional(clazz: SortIdName.self, source: sourceDictionary["sort"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [ListAvailableNumbersFull]
            Decoders.addDecoder(clazz: [ListAvailableNumbersFull].self) { (source: AnyObject) -> [ListAvailableNumbersFull] in
                return Decoders.decode(clazz: [ListAvailableNumbersFull].self, source: source)
            }
            // Decoder for ListAvailableNumbersFull
            Decoders.addDecoder(clazz: ListAvailableNumbersFull.self) { (source: AnyObject) -> ListAvailableNumbersFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListAvailableNumbersFull()
                instance.filters = Decoders.decodeOptional(clazz: FilterListAvailableNumbers.self, source: sourceDictionary["filters"])
                instance.sort = Decoders.decodeOptional(clazz: SortListAvailableNumbers.self, source: sourceDictionary["sort"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.items = Decoders.decodeOptional(clazz: AvailableNumbersFull.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [ListAvailableNumbersSummary]
            Decoders.addDecoder(clazz: [ListAvailableNumbersSummary].self) { (source: AnyObject) -> [ListAvailableNumbersSummary] in
                return Decoders.decode(clazz: [ListAvailableNumbersSummary].self, source: source)
            }
            // Decoder for ListAvailableNumbersSummary
            Decoders.addDecoder(clazz: ListAvailableNumbersSummary.self) { (source: AnyObject) -> ListAvailableNumbersSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListAvailableNumbersSummary()
                instance.filters = Decoders.decodeOptional(clazz: FilterListAvailableNumbers.self, source: sourceDictionary["filters"])
                instance.sort = Decoders.decodeOptional(clazz: SortListAvailableNumbers.self, source: sourceDictionary["sort"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.items = Decoders.decodeOptional(clazz: AvailableNumbersSummary.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [ListCallLogsFull]
            Decoders.addDecoder(clazz: [ListCallLogsFull].self) { (source: AnyObject) -> [ListCallLogsFull] in
                return Decoders.decode(clazz: [ListCallLogsFull].self, source: source)
            }
            // Decoder for ListCallLogsFull
            Decoders.addDecoder(clazz: ListCallLogsFull.self) { (source: AnyObject) -> ListCallLogsFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListCallLogsFull()
                instance.filters = Decoders.decodeOptional(clazz: FilterCallLogs.self, source: sourceDictionary["filters"])
                instance.sort = Decoders.decodeOptional(clazz: SortCallLogs.self, source: sourceDictionary["sort"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [ListCallLogsSummary]
            Decoders.addDecoder(clazz: [ListCallLogsSummary].self) { (source: AnyObject) -> [ListCallLogsSummary] in
                return Decoders.decode(clazz: [ListCallLogsSummary].self, source: source)
            }
            // Decoder for ListCallLogsSummary
            Decoders.addDecoder(clazz: ListCallLogsSummary.self) { (source: AnyObject) -> ListCallLogsSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListCallLogsSummary()
                instance.filters = Decoders.decodeOptional(clazz: FilterCallLogs.self, source: sourceDictionary["filters"])
                instance.sort = Decoders.decodeOptional(clazz: SortCallLogs.self, source: sourceDictionary["sort"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [ListCallerIdsFull]
            Decoders.addDecoder(clazz: [ListCallerIdsFull].self) { (source: AnyObject) -> [ListCallerIdsFull] in
                return Decoders.decode(clazz: [ListCallerIdsFull].self, source: source)
            }
            // Decoder for ListCallerIdsFull
            Decoders.addDecoder(clazz: ListCallerIdsFull.self) { (source: AnyObject) -> ListCallerIdsFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListCallerIdsFull()
                instance.filters = Decoders.decodeOptional(clazz: FilterNameNumberArray.self, source: sourceDictionary["filters"])
                instance.sort = Decoders.decodeOptional(clazz: SortNameNumber.self, source: sourceDictionary["sort"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [ListCallerIdsSummary]
            Decoders.addDecoder(clazz: [ListCallerIdsSummary].self) { (source: AnyObject) -> [ListCallerIdsSummary] in
                return Decoders.decode(clazz: [ListCallerIdsSummary].self, source: source)
            }
            // Decoder for ListCallerIdsSummary
            Decoders.addDecoder(clazz: ListCallerIdsSummary.self) { (source: AnyObject) -> ListCallerIdsSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListCallerIdsSummary()
                instance.filters = Decoders.decodeOptional(clazz: FilterNameNumberArray.self, source: sourceDictionary["filters"])
                instance.sort = Decoders.decodeOptional(clazz: SortNameNumber.self, source: sourceDictionary["sort"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [ListContactsFull]
            Decoders.addDecoder(clazz: [ListContactsFull].self) { (source: AnyObject) -> [ListContactsFull] in
                return Decoders.decode(clazz: [ListContactsFull].self, source: source)
            }
            // Decoder for ListContactsFull
            Decoders.addDecoder(clazz: ListContactsFull.self) { (source: AnyObject) -> ListContactsFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListContactsFull()
                instance.filters = Decoders.decodeOptional(clazz: FilterIdGroupIdUpdatedAtArray.self, source: sourceDictionary["filters"])
                instance.sort = Decoders.decodeOptional(clazz: SortIdUpdatedAt.self, source: sourceDictionary["sort"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [ListContactsSummary]
            Decoders.addDecoder(clazz: [ListContactsSummary].self) { (source: AnyObject) -> [ListContactsSummary] in
                return Decoders.decode(clazz: [ListContactsSummary].self, source: source)
            }
            // Decoder for ListContactsSummary
            Decoders.addDecoder(clazz: ListContactsSummary.self) { (source: AnyObject) -> ListContactsSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListContactsSummary()
                instance.filters = Decoders.decodeOptional(clazz: FilterIdGroupIdUpdatedAtArray.self, source: sourceDictionary["filters"])
                instance.sort = Decoders.decodeOptional(clazz: SortIdUpdatedAt.self, source: sourceDictionary["sort"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [ListDevicesFull]
            Decoders.addDecoder(clazz: [ListDevicesFull].self) { (source: AnyObject) -> [ListDevicesFull] in
                return Decoders.decode(clazz: [ListDevicesFull].self, source: source)
            }
            // Decoder for ListDevicesFull
            Decoders.addDecoder(clazz: ListDevicesFull.self) { (source: AnyObject) -> ListDevicesFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListDevicesFull()
                instance.filters = Decoders.decodeOptional(clazz: FilterIdNameArray.self, source: sourceDictionary["filters"])
                instance.sort = Decoders.decodeOptional(clazz: SortIdName.self, source: sourceDictionary["sort"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.items = Decoders.decodeOptional(clazz: DevicesFull.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [ListDevicesSummary]
            Decoders.addDecoder(clazz: [ListDevicesSummary].self) { (source: AnyObject) -> [ListDevicesSummary] in
                return Decoders.decode(clazz: [ListDevicesSummary].self, source: source)
            }
            // Decoder for ListDevicesSummary
            Decoders.addDecoder(clazz: ListDevicesSummary.self) { (source: AnyObject) -> ListDevicesSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListDevicesSummary()
                instance.filters = Decoders.decodeOptional(clazz: FilterIdNameArray.self, source: sourceDictionary["filters"])
                instance.sort = Decoders.decodeOptional(clazz: SortIdName.self, source: sourceDictionary["sort"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.items = Decoders.decodeOptional(clazz: DevicesSummary.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [ListExpressServiceCodesFull]
            Decoders.addDecoder(clazz: [ListExpressServiceCodesFull].self) { (source: AnyObject) -> [ListExpressServiceCodesFull] in
                return Decoders.decode(clazz: [ListExpressServiceCodesFull].self, source: source)
            }
            // Decoder for ListExpressServiceCodesFull
            Decoders.addDecoder(clazz: ListExpressServiceCodesFull.self) { (source: AnyObject) -> ListExpressServiceCodesFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListExpressServiceCodesFull()
                instance.filters = Decoders.decodeOptional(clazz: FilterIdArray.self, source: sourceDictionary["filters"])
                instance.sort = Decoders.decodeOptional(clazz: SortIdArray.self, source: sourceDictionary["sort"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.items = Decoders.decodeOptional(clazz: ExpressServiceCodesFull.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [ListExpressServiceCodesSummary]
            Decoders.addDecoder(clazz: [ListExpressServiceCodesSummary].self) { (source: AnyObject) -> [ListExpressServiceCodesSummary] in
                return Decoders.decode(clazz: [ListExpressServiceCodesSummary].self, source: source)
            }
            // Decoder for ListExpressServiceCodesSummary
            Decoders.addDecoder(clazz: ListExpressServiceCodesSummary.self) { (source: AnyObject) -> ListExpressServiceCodesSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListExpressServiceCodesSummary()
                instance.filters = Decoders.decodeOptional(clazz: FilterIdArray.self, source: sourceDictionary["filters"])
                instance.sort = Decoders.decodeOptional(clazz: SortIdArray.self, source: sourceDictionary["sort"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.items = Decoders.decodeOptional(clazz: ExpressServiceCodesSummary.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [ListExtensionsFull]
            Decoders.addDecoder(clazz: [ListExtensionsFull].self) { (source: AnyObject) -> [ListExtensionsFull] in
                return Decoders.decode(clazz: [ListExtensionsFull].self, source: source)
            }
            // Decoder for ListExtensionsFull
            Decoders.addDecoder(clazz: ListExtensionsFull.self) { (source: AnyObject) -> ListExtensionsFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListExtensionsFull()
                instance.filters = Decoders.decodeOptional(clazz: FilterIdExtensionNameArray.self, source: sourceDictionary["filters"])
                instance.sort = Decoders.decodeOptional(clazz: SortIdExtensionName.self, source: sourceDictionary["sort"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [ListExtensionsSummary]
            Decoders.addDecoder(clazz: [ListExtensionsSummary].self) { (source: AnyObject) -> [ListExtensionsSummary] in
                return Decoders.decode(clazz: [ListExtensionsSummary].self, source: source)
            }
            // Decoder for ListExtensionsSummary
            Decoders.addDecoder(clazz: ListExtensionsSummary.self) { (source: AnyObject) -> ListExtensionsSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListExtensionsSummary()
                instance.filters = Decoders.decodeOptional(clazz: FilterIdExtensionNameArray.self, source: sourceDictionary["filters"])
                instance.sort = Decoders.decodeOptional(clazz: SortIdExtensionName.self, source: sourceDictionary["sort"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [ListGroupsFull]
            Decoders.addDecoder(clazz: [ListGroupsFull].self) { (source: AnyObject) -> [ListGroupsFull] in
                return Decoders.decode(clazz: [ListGroupsFull].self, source: source)
            }
            // Decoder for ListGroupsFull
            Decoders.addDecoder(clazz: ListGroupsFull.self) { (source: AnyObject) -> ListGroupsFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListGroupsFull()
                instance.filters = Decoders.decodeOptional(clazz: FilterIdNameArray.self, source: sourceDictionary["filters"])
                instance.sort = Decoders.decodeOptional(clazz: SortIdName.self, source: sourceDictionary["sort"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.items = Decoders.decodeOptional(clazz: GroupsFull.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [ListGroupsSummary]
            Decoders.addDecoder(clazz: [ListGroupsSummary].self) { (source: AnyObject) -> [ListGroupsSummary] in
                return Decoders.decode(clazz: [ListGroupsSummary].self, source: source)
            }
            // Decoder for ListGroupsSummary
            Decoders.addDecoder(clazz: ListGroupsSummary.self) { (source: AnyObject) -> ListGroupsSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListGroupsSummary()
                instance.filters = Decoders.decodeOptional(clazz: FilterIdNameArray.self, source: sourceDictionary["filters"])
                instance.sort = Decoders.decodeOptional(clazz: SortIdName.self, source: sourceDictionary["sort"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.items = Decoders.decodeOptional(clazz: GroupsSummary.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [ListMediaFull]
            Decoders.addDecoder(clazz: [ListMediaFull].self) { (source: AnyObject) -> [ListMediaFull] in
                return Decoders.decode(clazz: [ListMediaFull].self, source: source)
            }
            // Decoder for ListMediaFull
            Decoders.addDecoder(clazz: ListMediaFull.self) { (source: AnyObject) -> ListMediaFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListMediaFull()
                instance.filters = Decoders.decodeOptional(clazz: FilterIdNameArray.self, source: sourceDictionary["filters"])
                instance.sort = Decoders.decodeOptional(clazz: SortIdName.self, source: sourceDictionary["sort"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [ListMediaSummary]
            Decoders.addDecoder(clazz: [ListMediaSummary].self) { (source: AnyObject) -> [ListMediaSummary] in
                return Decoders.decode(clazz: [ListMediaSummary].self, source: source)
            }
            // Decoder for ListMediaSummary
            Decoders.addDecoder(clazz: ListMediaSummary.self) { (source: AnyObject) -> ListMediaSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListMediaSummary()
                instance.filters = Decoders.decodeOptional(clazz: FilterIdNameArray.self, source: sourceDictionary["filters"])
                instance.sort = Decoders.decodeOptional(clazz: SortIdName.self, source: sourceDictionary["sort"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [ListMenusFull]
            Decoders.addDecoder(clazz: [ListMenusFull].self) { (source: AnyObject) -> [ListMenusFull] in
                return Decoders.decode(clazz: [ListMenusFull].self, source: source)
            }
            // Decoder for ListMenusFull
            Decoders.addDecoder(clazz: ListMenusFull.self) { (source: AnyObject) -> ListMenusFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListMenusFull()
                instance.filters = Decoders.decodeOptional(clazz: FilterIdNameArray.self, source: sourceDictionary["filters"])
                instance.sort = Decoders.decodeOptional(clazz: SortIdName.self, source: sourceDictionary["sort"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.items = Decoders.decodeOptional(clazz: MenusFull.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [ListMenusSummary]
            Decoders.addDecoder(clazz: [ListMenusSummary].self) { (source: AnyObject) -> [ListMenusSummary] in
                return Decoders.decode(clazz: [ListMenusSummary].self, source: source)
            }
            // Decoder for ListMenusSummary
            Decoders.addDecoder(clazz: ListMenusSummary.self) { (source: AnyObject) -> ListMenusSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListMenusSummary()
                instance.filters = Decoders.decodeOptional(clazz: FilterIdNameArray.self, source: sourceDictionary["filters"])
                instance.sort = Decoders.decodeOptional(clazz: SortIdName.self, source: sourceDictionary["sort"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.items = Decoders.decodeOptional(clazz: MenusSummary.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [ListPhoneNumbersFull]
            Decoders.addDecoder(clazz: [ListPhoneNumbersFull].self) { (source: AnyObject) -> [ListPhoneNumbersFull] in
                return Decoders.decode(clazz: [ListPhoneNumbersFull].self, source: source)
            }
            // Decoder for ListPhoneNumbersFull
            Decoders.addDecoder(clazz: ListPhoneNumbersFull.self) { (source: AnyObject) -> ListPhoneNumbersFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListPhoneNumbersFull()
                instance.filters = Decoders.decodeOptional(clazz: FilterIdNamePhoneNumberArray.self, source: sourceDictionary["filters"])
                instance.sort = Decoders.decodeOptional(clazz: SortIdNamePhoneNumber.self, source: sourceDictionary["sort"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.items = Decoders.decodeOptional(clazz: PhoneNumbersFull.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [ListPhoneNumbersRegionsFull]
            Decoders.addDecoder(clazz: [ListPhoneNumbersRegionsFull].self) { (source: AnyObject) -> [ListPhoneNumbersRegionsFull] in
                return Decoders.decode(clazz: [ListPhoneNumbersRegionsFull].self, source: source)
            }
            // Decoder for ListPhoneNumbersRegionsFull
            Decoders.addDecoder(clazz: ListPhoneNumbersRegionsFull.self) { (source: AnyObject) -> ListPhoneNumbersRegionsFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListPhoneNumbersRegionsFull()
                instance.groupBy = Decoders.decodeOptional(clazz: GroupByListPhoneNumbersRegions.self, source: sourceDictionary["group_by"])
                instance.filters = Decoders.decodeOptional(clazz: FilterListPhoneNumbersRegions.self, source: sourceDictionary["filters"])
                instance.sort = Decoders.decodeOptional(clazz: SortListPhoneNumbersRegions.self, source: sourceDictionary["sort"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.items = Decoders.decodeOptional(clazz: PhoneNumbersRegionsFull.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [ListPhoneNumbersRegionsSummary]
            Decoders.addDecoder(clazz: [ListPhoneNumbersRegionsSummary].self) { (source: AnyObject) -> [ListPhoneNumbersRegionsSummary] in
                return Decoders.decode(clazz: [ListPhoneNumbersRegionsSummary].self, source: source)
            }
            // Decoder for ListPhoneNumbersRegionsSummary
            Decoders.addDecoder(clazz: ListPhoneNumbersRegionsSummary.self) { (source: AnyObject) -> ListPhoneNumbersRegionsSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListPhoneNumbersRegionsSummary()
                instance.groupBy = Decoders.decodeOptional(clazz: GroupByListPhoneNumbersRegions.self, source: sourceDictionary["group_by"])
                instance.filters = Decoders.decodeOptional(clazz: FilterListPhoneNumbersRegions.self, source: sourceDictionary["filters"])
                instance.sort = Decoders.decodeOptional(clazz: SortListPhoneNumbersRegions.self, source: sourceDictionary["sort"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.items = Decoders.decodeOptional(clazz: PhoneNumbersRegionsFull.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [ListPhoneNumbersSummary]
            Decoders.addDecoder(clazz: [ListPhoneNumbersSummary].self) { (source: AnyObject) -> [ListPhoneNumbersSummary] in
                return Decoders.decode(clazz: [ListPhoneNumbersSummary].self, source: source)
            }
            // Decoder for ListPhoneNumbersSummary
            Decoders.addDecoder(clazz: ListPhoneNumbersSummary.self) { (source: AnyObject) -> ListPhoneNumbersSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListPhoneNumbersSummary()
                instance.filters = Decoders.decodeOptional(clazz: FilterIdNamePhoneNumberArray.self, source: sourceDictionary["filters"])
                instance.sort = Decoders.decodeOptional(clazz: SortIdNamePhoneNumber.self, source: sourceDictionary["sort"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.items = Decoders.decodeOptional(clazz: PhoneNumbersSummary.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [ListQueuesFull]
            Decoders.addDecoder(clazz: [ListQueuesFull].self) { (source: AnyObject) -> [ListQueuesFull] in
                return Decoders.decode(clazz: [ListQueuesFull].self, source: source)
            }
            // Decoder for ListQueuesFull
            Decoders.addDecoder(clazz: ListQueuesFull.self) { (source: AnyObject) -> ListQueuesFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListQueuesFull()
                instance.filters = Decoders.decodeOptional(clazz: FilterIdNameArray.self, source: sourceDictionary["filters"])
                instance.sort = Decoders.decodeOptional(clazz: SortIdName.self, source: sourceDictionary["sort"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.items = Decoders.decodeOptional(clazz: Queues.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [ListQueuesSummary]
            Decoders.addDecoder(clazz: [ListQueuesSummary].self) { (source: AnyObject) -> [ListQueuesSummary] in
                return Decoders.decode(clazz: [ListQueuesSummary].self, source: source)
            }
            // Decoder for ListQueuesSummary
            Decoders.addDecoder(clazz: ListQueuesSummary.self) { (source: AnyObject) -> ListQueuesSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListQueuesSummary()
                instance.filters = Decoders.decodeOptional(clazz: FilterIdNameArray.self, source: sourceDictionary["filters"])
                instance.sort = Decoders.decodeOptional(clazz: SortIdName.self, source: sourceDictionary["sort"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.items = Decoders.decodeOptional(clazz: QueuesSummary.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [ListRoutesFull]
            Decoders.addDecoder(clazz: [ListRoutesFull].self) { (source: AnyObject) -> [ListRoutesFull] in
                return Decoders.decode(clazz: [ListRoutesFull].self, source: source)
            }
            // Decoder for ListRoutesFull
            Decoders.addDecoder(clazz: ListRoutesFull.self) { (source: AnyObject) -> ListRoutesFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListRoutesFull()
                instance.filters = Decoders.decodeOptional(clazz: FilterIdNameArray.self, source: sourceDictionary["filters"])
                instance.sort = Decoders.decodeOptional(clazz: SortIdName.self, source: sourceDictionary["sort"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.items = Decoders.decodeOptional(clazz: RoutesFull.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [ListRoutesSummary]
            Decoders.addDecoder(clazz: [ListRoutesSummary].self) { (source: AnyObject) -> [ListRoutesSummary] in
                return Decoders.decode(clazz: [ListRoutesSummary].self, source: source)
            }
            // Decoder for ListRoutesSummary
            Decoders.addDecoder(clazz: ListRoutesSummary.self) { (source: AnyObject) -> ListRoutesSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListRoutesSummary()
                instance.filters = Decoders.decodeOptional(clazz: FilterIdNameArray.self, source: sourceDictionary["filters"])
                instance.sort = Decoders.decodeOptional(clazz: SortIdName.self, source: sourceDictionary["sort"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.items = Decoders.decodeOptional(clazz: RoutesSummary.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [ListSchedulesFull]
            Decoders.addDecoder(clazz: [ListSchedulesFull].self) { (source: AnyObject) -> [ListSchedulesFull] in
                return Decoders.decode(clazz: [ListSchedulesFull].self, source: source)
            }
            // Decoder for ListSchedulesFull
            Decoders.addDecoder(clazz: ListSchedulesFull.self) { (source: AnyObject) -> ListSchedulesFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListSchedulesFull()
                instance.filters = Decoders.decodeOptional(clazz: FilterIdNameArray.self, source: sourceDictionary["filters"])
                instance.sort = Decoders.decodeOptional(clazz: SortIdName.self, source: sourceDictionary["sort"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [ListSchedulesSummary]
            Decoders.addDecoder(clazz: [ListSchedulesSummary].self) { (source: AnyObject) -> [ListSchedulesSummary] in
                return Decoders.decode(clazz: [ListSchedulesSummary].self, source: source)
            }
            // Decoder for ListSchedulesSummary
            Decoders.addDecoder(clazz: ListSchedulesSummary.self) { (source: AnyObject) -> ListSchedulesSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListSchedulesSummary()
                instance.filters = Decoders.decodeOptional(clazz: FilterIdNameArray.self, source: sourceDictionary["filters"])
                instance.sort = Decoders.decodeOptional(clazz: SortIdName.self, source: sourceDictionary["sort"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [ListSmsFull]
            Decoders.addDecoder(clazz: [ListSmsFull].self) { (source: AnyObject) -> [ListSmsFull] in
                return Decoders.decode(clazz: [ListSmsFull].self, source: source)
            }
            // Decoder for ListSmsFull
            Decoders.addDecoder(clazz: ListSmsFull.self) { (source: AnyObject) -> ListSmsFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListSmsFull()
                instance.filters = Decoders.decodeOptional(clazz: FilterIdDirectionFrom.self, source: sourceDictionary["filters"])
                instance.sort = Decoders.decodeOptional(clazz: SortIdCreatedAt.self, source: sourceDictionary["sort"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [ListSmsSummary]
            Decoders.addDecoder(clazz: [ListSmsSummary].self) { (source: AnyObject) -> [ListSmsSummary] in
                return Decoders.decode(clazz: [ListSmsSummary].self, source: source)
            }
            // Decoder for ListSmsSummary
            Decoders.addDecoder(clazz: ListSmsSummary.self) { (source: AnyObject) -> ListSmsSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListSmsSummary()
                instance.filters = Decoders.decodeOptional(clazz: FilterIdDirectionFrom.self, source: sourceDictionary["filters"])
                instance.sort = Decoders.decodeOptional(clazz: SortIdCreatedAt.self, source: sourceDictionary["sort"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [ListTrunksFull]
            Decoders.addDecoder(clazz: [ListTrunksFull].self) { (source: AnyObject) -> [ListTrunksFull] in
                return Decoders.decode(clazz: [ListTrunksFull].self, source: source)
            }
            // Decoder for ListTrunksFull
            Decoders.addDecoder(clazz: ListTrunksFull.self) { (source: AnyObject) -> ListTrunksFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListTrunksFull()
                instance.filters = Decoders.decodeOptional(clazz: FilterIdNameArray.self, source: sourceDictionary["filters"])
                instance.sort = Decoders.decodeOptional(clazz: SortIdName.self, source: sourceDictionary["sort"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [ListTrunksSummary]
            Decoders.addDecoder(clazz: [ListTrunksSummary].self) { (source: AnyObject) -> [ListTrunksSummary] in
                return Decoders.decode(clazz: [ListTrunksSummary].self, source: source)
            }
            // Decoder for ListTrunksSummary
            Decoders.addDecoder(clazz: ListTrunksSummary.self) { (source: AnyObject) -> ListTrunksSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListTrunksSummary()
                instance.filters = Decoders.decodeOptional(clazz: FilterIdNameArray.self, source: sourceDictionary["filters"])
                instance.sort = Decoders.decodeOptional(clazz: SortIdName.self, source: sourceDictionary["sort"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [MediaFull]
            Decoders.addDecoder(clazz: [MediaFull].self) { (source: AnyObject) -> [MediaFull] in
                return Decoders.decode(clazz: [MediaFull].self, source: source)
            }
            // Decoder for MediaFull
            Decoders.addDecoder(clazz: MediaFull.self) { (source: AnyObject) -> MediaFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MediaFull()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                return instance
            }


            // Decoder for [MediaSummary]
            Decoders.addDecoder(clazz: [MediaSummary].self) { (source: AnyObject) -> [MediaSummary] in
                return Decoders.decode(clazz: [MediaSummary].self, source: source)
            }
            // Decoder for MediaSummary
            Decoders.addDecoder(clazz: MediaSummary.self) { (source: AnyObject) -> MediaSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MediaSummary()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [Member]
            Decoders.addDecoder(clazz: [Member].self) { (source: AnyObject) -> [Member] in
                return Decoders.decode(clazz: [Member].self, source: source)
            }
            // Decoder for Member
            Decoders.addDecoder(clazz: Member.self) { (source: AnyObject) -> Member in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Member()
                instance._extension = Decoders.decodeOptional(clazz: ExtensionSummary.self, source: sourceDictionary["extension"])
                instance.phoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone_number"])
                return instance
            }


            // Decoder for [Members]
            Decoders.addDecoder(clazz: [Members].self) { (source: AnyObject) -> [Members] in
                return Decoders.decode(clazz: [Members].self, source: source)
            }
            // Decoder for Members
            Decoders.addDecoder(clazz: Members.self) { (source: AnyObject) -> Members in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Members()
                return instance
            }


            // Decoder for [MenuFull]
            Decoders.addDecoder(clazz: [MenuFull].self) { (source: AnyObject) -> [MenuFull] in
                return Decoders.decode(clazz: [MenuFull].self, source: source)
            }
            // Decoder for MenuFull
            Decoders.addDecoder(clazz: MenuFull.self) { (source: AnyObject) -> MenuFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MenuFull()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.allowExtensionDial = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["allow_extension_dial"])
                instance.keypressWaitTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["keypress_wait_time"])
                instance.greeting = Decoders.decodeOptional(clazz: MediaSummary.self, source: sourceDictionary["greeting"])
                instance.keypressError = Decoders.decodeOptional(clazz: MediaSummary.self, source: sourceDictionary["keypress_error"])
                instance.timeoutHandler = Decoders.decodeOptional(clazz: RouteSummary.self, source: sourceDictionary["timeout_handler"])
                instance.options = Decoders.decodeOptional(clazz: OptionsListMenus.self, source: sourceDictionary["options"])
                return instance
            }


            // Decoder for [MenuSummary]
            Decoders.addDecoder(clazz: [MenuSummary].self) { (source: AnyObject) -> [MenuSummary] in
                return Decoders.decode(clazz: [MenuSummary].self, source: source)
            }
            // Decoder for MenuSummary
            Decoders.addDecoder(clazz: MenuSummary.self) { (source: AnyObject) -> MenuSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MenuSummary()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [MenusFull]
            Decoders.addDecoder(clazz: [MenusFull].self) { (source: AnyObject) -> [MenusFull] in
                return Decoders.decode(clazz: [MenusFull].self, source: source)
            }
            // Decoder for MenusFull
            Decoders.addDecoder(clazz: MenusFull.self) { (source: AnyObject) -> MenusFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MenusFull()
                return instance
            }


            // Decoder for [MenusSummary]
            Decoders.addDecoder(clazz: [MenusSummary].self) { (source: AnyObject) -> [MenusSummary] in
                return Decoders.decode(clazz: [MenusSummary].self, source: source)
            }
            // Decoder for MenusSummary
            Decoders.addDecoder(clazz: MenusSummary.self) { (source: AnyObject) -> MenusSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MenusSummary()
                return instance
            }


            // Decoder for [Notification]
            Decoders.addDecoder(clazz: [Notification].self) { (source: AnyObject) -> [Notification] in
                return Decoders.decode(clazz: [Notification].self, source: source)
            }
            // Decoder for Notification
            Decoders.addDecoder(clazz: Notification.self) { (source: AnyObject) -> Notification in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Notification()
                instance.emails = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["emails"])
                instance.sms = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sms"])
                return instance
            }


            // Decoder for [Option]
            Decoders.addDecoder(clazz: [Option].self) { (source: AnyObject) -> [Option] in
                return Decoders.decode(clazz: [Option].self, source: source)
            }
            // Decoder for Option
            Decoders.addDecoder(clazz: Option.self) { (source: AnyObject) -> Option in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Option()
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                instance.route = Decoders.decodeOptional(clazz: RouteSummary.self, source: sourceDictionary["route"])
                return instance
            }


            // Decoder for [OptionsListMenus]
            Decoders.addDecoder(clazz: [OptionsListMenus].self) { (source: AnyObject) -> [OptionsListMenus] in
                return Decoders.decode(clazz: [OptionsListMenus].self, source: source)
            }
            // Decoder for OptionsListMenus
            Decoders.addDecoder(clazz: OptionsListMenus.self) { (source: AnyObject) -> OptionsListMenus in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OptionsListMenus()
                return instance
            }


            // Decoder for [PhoneNumberContact]
            Decoders.addDecoder(clazz: [PhoneNumberContact].self) { (source: AnyObject) -> [PhoneNumberContact] in
                return Decoders.decode(clazz: [PhoneNumberContact].self, source: source)
            }
            // Decoder for PhoneNumberContact
            Decoders.addDecoder(clazz: PhoneNumberContact.self) { (source: AnyObject) -> PhoneNumberContact in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PhoneNumberContact()
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.number = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["number"])
                instance.normalized = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["normalized"])
                return instance
            }


            // Decoder for [PhoneNumberFull]
            Decoders.addDecoder(clazz: [PhoneNumberFull].self) { (source: AnyObject) -> [PhoneNumberFull] in
                return Decoders.decode(clazz: [PhoneNumberFull].self, source: source)
            }
            // Decoder for PhoneNumberFull
            Decoders.addDecoder(clazz: PhoneNumberFull.self) { (source: AnyObject) -> PhoneNumberFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PhoneNumberFull()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.phoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone_number"])
                instance.blockIncoming = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["block_incoming"])
                instance.blockAnonymous = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["block_anonymous"])
                instance.route = Decoders.decodeOptional(clazz: RouteSummary.self, source: sourceDictionary["route"])
                instance.callerId = Decoders.decodeOptional(clazz: CallerIdPhoneNumber.self, source: sourceDictionary["caller_id"])
                instance.smsForwarding = Decoders.decodeOptional(clazz: SmsForwarding.self, source: sourceDictionary["sms_forwarding"])
                instance.callNotifications = Decoders.decodeOptional(clazz: CallNotifications.self, source: sourceDictionary["call_notifications"])
                return instance
            }


            // Decoder for [PhoneNumberSummary]
            Decoders.addDecoder(clazz: [PhoneNumberSummary].self) { (source: AnyObject) -> [PhoneNumberSummary] in
                return Decoders.decode(clazz: [PhoneNumberSummary].self, source: source)
            }
            // Decoder for PhoneNumberSummary
            Decoders.addDecoder(clazz: PhoneNumberSummary.self) { (source: AnyObject) -> PhoneNumberSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PhoneNumberSummary()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.phoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone_number"])
                return instance
            }


            // Decoder for [PhoneNumbersFull]
            Decoders.addDecoder(clazz: [PhoneNumbersFull].self) { (source: AnyObject) -> [PhoneNumbersFull] in
                return Decoders.decode(clazz: [PhoneNumbersFull].self, source: source)
            }
            // Decoder for PhoneNumbersFull
            Decoders.addDecoder(clazz: PhoneNumbersFull.self) { (source: AnyObject) -> PhoneNumbersFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PhoneNumbersFull()
                return instance
            }


            // Decoder for [PhoneNumbersRegionFull]
            Decoders.addDecoder(clazz: [PhoneNumbersRegionFull].self) { (source: AnyObject) -> [PhoneNumbersRegionFull] in
                return Decoders.decode(clazz: [PhoneNumbersRegionFull].self, source: source)
            }
            // Decoder for PhoneNumbersRegionFull
            Decoders.addDecoder(clazz: PhoneNumbersRegionFull.self) { (source: AnyObject) -> PhoneNumbersRegionFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PhoneNumbersRegionFull()
                instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_code"])
                instance.npa = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["npa"])
                instance.nxx = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nxx"])
                instance.isTollFree = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["is_toll_free"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.provincePostalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["province_postal_code"])
                instance.countryPostalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_postal_code"])
                instance.quantity = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["quantity"])
                return instance
            }


            // Decoder for [PhoneNumbersRegionsFull]
            Decoders.addDecoder(clazz: [PhoneNumbersRegionsFull].self) { (source: AnyObject) -> [PhoneNumbersRegionsFull] in
                return Decoders.decode(clazz: [PhoneNumbersRegionsFull].self, source: source)
            }
            // Decoder for PhoneNumbersRegionsFull
            Decoders.addDecoder(clazz: PhoneNumbersRegionsFull.self) { (source: AnyObject) -> PhoneNumbersRegionsFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PhoneNumbersRegionsFull()
                return instance
            }


            // Decoder for [PhoneNumbersSummary]
            Decoders.addDecoder(clazz: [PhoneNumbersSummary].self) { (source: AnyObject) -> [PhoneNumbersSummary] in
                return Decoders.decode(clazz: [PhoneNumbersSummary].self, source: source)
            }
            // Decoder for PhoneNumbersSummary
            Decoders.addDecoder(clazz: PhoneNumbersSummary.self) { (source: AnyObject) -> PhoneNumbersSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PhoneNumbersSummary()
                return instance
            }


            // Decoder for [QueueFull]
            Decoders.addDecoder(clazz: [QueueFull].self) { (source: AnyObject) -> [QueueFull] in
                return Decoders.decode(clazz: [QueueFull].self, source: source)
            }
            // Decoder for QueueFull
            Decoders.addDecoder(clazz: QueueFull.self) { (source: AnyObject) -> QueueFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = QueueFull()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.greeting = Decoders.decodeOptional(clazz: MediaSummary.self, source: sourceDictionary["greeting"])
                instance.holdMusic = Decoders.decodeOptional(clazz: HoldMusic.self, source: sourceDictionary["hold_music"])
                instance.maxHoldTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_hold_time"])
                instance.callerIdType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["caller_id_type"])
                instance.ringTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ring_time"])
                instance.members = Decoders.decodeOptional(clazz: Members.self, source: sourceDictionary["members"])
                return instance
            }


            // Decoder for [QueueSummary]
            Decoders.addDecoder(clazz: [QueueSummary].self) { (source: AnyObject) -> [QueueSummary] in
                return Decoders.decode(clazz: [QueueSummary].self, source: source)
            }
            // Decoder for QueueSummary
            Decoders.addDecoder(clazz: QueueSummary.self) { (source: AnyObject) -> QueueSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = QueueSummary()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [Queues]
            Decoders.addDecoder(clazz: [Queues].self) { (source: AnyObject) -> [Queues] in
                return Decoders.decode(clazz: [Queues].self, source: source)
            }
            // Decoder for Queues
            Decoders.addDecoder(clazz: Queues.self) { (source: AnyObject) -> Queues in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Queues()
                return instance
            }


            // Decoder for [QueuesSummary]
            Decoders.addDecoder(clazz: [QueuesSummary].self) { (source: AnyObject) -> [QueuesSummary] in
                return Decoders.decode(clazz: [QueuesSummary].self, source: source)
            }
            // Decoder for QueuesSummary
            Decoders.addDecoder(clazz: QueuesSummary.self) { (source: AnyObject) -> QueuesSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = QueuesSummary()
                return instance
            }


            // Decoder for [Recipient]
            Decoders.addDecoder(clazz: [Recipient].self) { (source: AnyObject) -> [Recipient] in
                return Decoders.decode(clazz: [Recipient].self, source: source)
            }
            // Decoder for Recipient
            Decoders.addDecoder(clazz: Recipient.self) { (source: AnyObject) -> Recipient in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Recipient()
                instance.number = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["number"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                return instance
            }


            // Decoder for [ReplaceExtensionParams]
            Decoders.addDecoder(clazz: [ReplaceExtensionParams].self) { (source: AnyObject) -> [ReplaceExtensionParams] in
                return Decoders.decode(clazz: [ReplaceExtensionParams].self, source: source)
            }
            // Decoder for ReplaceExtensionParams
            Decoders.addDecoder(clazz: ReplaceExtensionParams.self) { (source: AnyObject) -> ReplaceExtensionParams in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ReplaceExtensionParams()
                instance.voicemailGreetingAlternate = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["voicemail[greeting][alternate]"])
                instance.nameGreeting = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["name_greeting"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.timezone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["timezone"])
                instance.includeInDirectory = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["include_in_directory"])
                instance._extension = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["extension"])
                instance.enableOutboundCalls = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enable_outbound_calls"])
                instance.usageType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["usage_type"])
                instance.voicemailPassword = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["voicemail[password]"])
                instance.fullName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["full_name"])
                instance.enableCallWaiting = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enable_call_waiting"])
                instance.voicemailGreetingStandard = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["voicemail[greeting][standard]"])
                instance.voicemailGreetingType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["voicemail[greeting][type]"])
                instance.callerId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["caller_id"])
                instance.localAreaCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["local_area_code"])
                instance.voicemailEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["voicemail[enabled]"])
                instance.voicemailGreetingEnableLeaveMessagePrompt = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["voicemail[greeting][enable_leave_message_prompt]"])
                instance.voicemailTranscription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["voicemail[transcription]"])
                instance.voicemailNotificationsEmails = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["voicemail[notifications][emails]"])
                instance.voicemailNotificationsSms = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["voicemail[notifications][sms]"])
                instance.callNotificationsEmails = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["call_notifications[emails]"])
                instance.callNotificationsSms = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["call_notifications[sms]"])
                instance.route = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["route"])
                return instance
            }


            // Decoder for [ReplaceMenuParams]
            Decoders.addDecoder(clazz: [ReplaceMenuParams].self) { (source: AnyObject) -> [ReplaceMenuParams] in
                return Decoders.decode(clazz: [ReplaceMenuParams].self, source: source)
            }
            // Decoder for ReplaceMenuParams
            Decoders.addDecoder(clazz: ReplaceMenuParams.self) { (source: AnyObject) -> ReplaceMenuParams in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ReplaceMenuParams()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.greeting = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["greeting"])
                instance.invalidKeypress = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["invalid_keypress"])
                instance.allowExtensionDial = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["allow_extension_dial"])
                instance.keypressWaitTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["keypress_wait_time"])
                instance.timeoutHandler = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["timeout_handler"])
                instance.options = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["options"])
                return instance
            }


            // Decoder for [ReplacePhoneNumberParams]
            Decoders.addDecoder(clazz: [ReplacePhoneNumberParams].self) { (source: AnyObject) -> [ReplacePhoneNumberParams] in
                return Decoders.decode(clazz: [ReplacePhoneNumberParams].self, source: source)
            }
            // Decoder for ReplacePhoneNumberParams
            Decoders.addDecoder(clazz: ReplacePhoneNumberParams.self) { (source: AnyObject) -> ReplacePhoneNumberParams in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ReplacePhoneNumberParams()
                instance.route = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["route"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.blockIncoming = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["block_incoming"])
                instance.blockAnonymous = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["block_anonymous"])
                instance.callerIdName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["caller_id[name]"])
                instance.callerIdType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["caller_id[type]"])
                instance.smsForwardingType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sms_forwarding[type]"])
                instance.smsForwardingApplication = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["sms_forwarding[application]"])
                instance.smsForwardingExtension = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["sms_forwarding[extension]"])
                instance.poolItem = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["pool_item"])
                instance.callNotificationsEmails = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["call_notifications[emails]"])
                instance.callNotificationsSms = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["call_notifications[sms]"])
                return instance
            }


            // Decoder for [RouteFull]
            Decoders.addDecoder(clazz: [RouteFull].self) { (source: AnyObject) -> [RouteFull] in
                return Decoders.decode(clazz: [RouteFull].self, source: source)
            }
            // Decoder for RouteFull
            Decoders.addDecoder(clazz: RouteFull.self) { (source: AnyObject) -> RouteFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RouteFull()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance._extension = Decoders.decodeOptional(clazz: ExtensionSummary.self, source: sourceDictionary["extension"])
                instance.rules = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["rules"])
                return instance
            }


            // Decoder for [RouteSummary]
            Decoders.addDecoder(clazz: [RouteSummary].self) { (source: AnyObject) -> [RouteSummary] in
                return Decoders.decode(clazz: [RouteSummary].self, source: source)
            }
            // Decoder for RouteSummary
            Decoders.addDecoder(clazz: RouteSummary.self) { (source: AnyObject) -> RouteSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RouteSummary()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [RoutesFull]
            Decoders.addDecoder(clazz: [RoutesFull].self) { (source: AnyObject) -> [RoutesFull] in
                return Decoders.decode(clazz: [RoutesFull].self, source: source)
            }
            // Decoder for RoutesFull
            Decoders.addDecoder(clazz: RoutesFull.self) { (source: AnyObject) -> RoutesFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RoutesFull()
                return instance
            }


            // Decoder for [RoutesSummary]
            Decoders.addDecoder(clazz: [RoutesSummary].self) { (source: AnyObject) -> [RoutesSummary] in
                return Decoders.decode(clazz: [RoutesSummary].self, source: source)
            }
            // Decoder for RoutesSummary
            Decoders.addDecoder(clazz: RoutesSummary.self) { (source: AnyObject) -> RoutesSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RoutesSummary()
                return instance
            }


            // Decoder for [RuleSet]
            Decoders.addDecoder(clazz: [RuleSet].self) { (source: AnyObject) -> [RuleSet] in
                return Decoders.decode(clazz: [RuleSet].self, source: source)
            }
            // Decoder for RuleSet
            Decoders.addDecoder(clazz: RuleSet.self) { (source: AnyObject) -> RuleSet in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RuleSet()
                instance.filter = Decoders.decodeOptional(clazz: RuleSetFilter.self, source: sourceDictionary["filter"])
                instance.actions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["actions"])
                return instance
            }


            // Decoder for [RuleSetAction]
            Decoders.addDecoder(clazz: [RuleSetAction].self) { (source: AnyObject) -> [RuleSetAction] in
                return Decoders.decode(clazz: [RuleSetAction].self, source: source)
            }
            // Decoder for RuleSetAction
            Decoders.addDecoder(clazz: RuleSetAction.self) { (source: AnyObject) -> RuleSetAction in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RuleSetAction()
                instance.action = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["action"])
                instance._extension = Decoders.decodeOptional(clazz: ExtensionSummary.self, source: sourceDictionary["extension"])
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                instance.timeout = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["timeout"])
                instance.holdMusic = Decoders.decodeOptional(clazz: MediaSummary.self, source: sourceDictionary["hold_music"])
                instance.greeting = Decoders.decodeOptional(clazz: MediaSummary.self, source: sourceDictionary["greeting"])
                instance.duration = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["duration"])
                instance.menu = Decoders.decodeOptional(clazz: MenuSummary.self, source: sourceDictionary["menu"])
                instance.queue = Decoders.decodeOptional(clazz: QueueSummary.self, source: sourceDictionary["queue"])
                instance.trunk = Decoders.decodeOptional(clazz: TrunkSummary.self, source: sourceDictionary["trunk"])
                return instance
            }


            // Decoder for [RuleSetFilter]
            Decoders.addDecoder(clazz: [RuleSetFilter].self) { (source: AnyObject) -> [RuleSetFilter] in
                return Decoders.decode(clazz: [RuleSetFilter].self, source: source)
            }
            // Decoder for RuleSetFilter
            Decoders.addDecoder(clazz: RuleSetFilter.self) { (source: AnyObject) -> RuleSetFilter in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RuleSetFilter()
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.schedule = Decoders.decodeOptional(clazz: ScheduleSummary.self, source: sourceDictionary["schedule"])
                instance.contact = Decoders.decodeOptional(clazz: ContactSummary.self, source: sourceDictionary["contact"])
                instance.group = Decoders.decodeOptional(clazz: GroupSummary.self, source: sourceDictionary["group"])
                return instance
            }


            // Decoder for [RuleSetForwardItem]
            Decoders.addDecoder(clazz: [RuleSetForwardItem].self) { (source: AnyObject) -> [RuleSetForwardItem] in
                return Decoders.decode(clazz: [RuleSetForwardItem].self, source: source)
            }
            // Decoder for RuleSetForwardItem
            Decoders.addDecoder(clazz: RuleSetForwardItem.self) { (source: AnyObject) -> RuleSetForwardItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RuleSetForwardItem()
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance._extension = Decoders.decodeOptional(clazz: ExtensionSummary.self, source: sourceDictionary["extension"])
                instance.number = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["number"])
                instance.screening = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["screening"])
                instance.callerId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["caller_id"])
                instance.voiceTag = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["voice_tag"])
                instance.distinctiveRing = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["distinctive_ring"])
                return instance
            }


            // Decoder for [ScheduleFull]
            Decoders.addDecoder(clazz: [ScheduleFull].self) { (source: AnyObject) -> [ScheduleFull] in
                return Decoders.decode(clazz: [ScheduleFull].self, source: source)
            }
            // Decoder for ScheduleFull
            Decoders.addDecoder(clazz: ScheduleFull.self) { (source: AnyObject) -> ScheduleFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ScheduleFull()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [ScheduleSummary]
            Decoders.addDecoder(clazz: [ScheduleSummary].self) { (source: AnyObject) -> [ScheduleSummary] in
                return Decoders.decode(clazz: [ScheduleSummary].self, source: source)
            }
            // Decoder for ScheduleSummary
            Decoders.addDecoder(clazz: ScheduleSummary.self) { (source: AnyObject) -> ScheduleSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ScheduleSummary()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [SipAuthentication]
            Decoders.addDecoder(clazz: [SipAuthentication].self) { (source: AnyObject) -> [SipAuthentication] in
                return Decoders.decode(clazz: [SipAuthentication].self, source: source)
            }
            // Decoder for SipAuthentication
            Decoders.addDecoder(clazz: SipAuthentication.self) { (source: AnyObject) -> SipAuthentication in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SipAuthentication()
                instance.host = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["host"])
                instance.port = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["port"])
                instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"])
                instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"])
                return instance
            }


            // Decoder for [SmsForwarding]
            Decoders.addDecoder(clazz: [SmsForwarding].self) { (source: AnyObject) -> [SmsForwarding] in
                return Decoders.decode(clazz: [SmsForwarding].self, source: source)
            }
            // Decoder for SmsForwarding
            Decoders.addDecoder(clazz: SmsForwarding.self) { (source: AnyObject) -> SmsForwarding in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SmsForwarding()
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance._extension = Decoders.decodeOptional(clazz: ExtensionSummary.self, source: sourceDictionary["extension"])
                instance.application = Decoders.decodeOptional(clazz: ApplicationSummary.self, source: sourceDictionary["application"])
                return instance
            }


            // Decoder for [SmsFull]
            Decoders.addDecoder(clazz: [SmsFull].self) { (source: AnyObject) -> [SmsFull] in
                return Decoders.decode(clazz: [SmsFull].self, source: source)
            }
            // Decoder for SmsFull
            Decoders.addDecoder(clazz: SmsFull.self) { (source: AnyObject) -> SmsFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SmsFull()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.from = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["from"])
                instance.to = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["to"])
                instance.direction = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["direction"])
                instance.createdEpoch = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["created_epoch"])
                instance.createdAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["created_at"])
                instance.text = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["text"])
                return instance
            }


            // Decoder for [SmsSummary]
            Decoders.addDecoder(clazz: [SmsSummary].self) { (source: AnyObject) -> [SmsSummary] in
                return Decoders.decode(clazz: [SmsSummary].self, source: source)
            }
            // Decoder for SmsSummary
            Decoders.addDecoder(clazz: SmsSummary.self) { (source: AnyObject) -> SmsSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SmsSummary()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.from = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["from"])
                instance.to = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["to"])
                instance.direction = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["direction"])
                return instance
            }


            // Decoder for [SortCallLogs]
            Decoders.addDecoder(clazz: [SortCallLogs].self) { (source: AnyObject) -> [SortCallLogs] in
                return Decoders.decode(clazz: [SortCallLogs].self, source: source)
            }
            // Decoder for SortCallLogs
            Decoders.addDecoder(clazz: SortCallLogs.self) { (source: AnyObject) -> SortCallLogs in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SortCallLogs()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.startTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["start_time"])
                instance.createdAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["created_at"])
                return instance
            }


            // Decoder for [SortId]
            Decoders.addDecoder(clazz: [SortId].self) { (source: AnyObject) -> [SortId] in
                return Decoders.decode(clazz: [SortId].self, source: source)
            }
            // Decoder for SortId
            Decoders.addDecoder(clazz: SortId.self) { (source: AnyObject) -> SortId in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SortId()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                return instance
            }


            // Decoder for [SortIdArray]
            Decoders.addDecoder(clazz: [SortIdArray].self) { (source: AnyObject) -> [SortIdArray] in
                return Decoders.decode(clazz: [SortIdArray].self, source: source)
            }
            // Decoder for SortIdArray
            Decoders.addDecoder(clazz: SortIdArray.self) { (source: AnyObject) -> SortIdArray in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SortIdArray()
                return instance
            }


            // Decoder for [SortIdCreatedAt]
            Decoders.addDecoder(clazz: [SortIdCreatedAt].self) { (source: AnyObject) -> [SortIdCreatedAt] in
                return Decoders.decode(clazz: [SortIdCreatedAt].self, source: source)
            }
            // Decoder for SortIdCreatedAt
            Decoders.addDecoder(clazz: SortIdCreatedAt.self) { (source: AnyObject) -> SortIdCreatedAt in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SortIdCreatedAt()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.createdAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["created_at"])
                return instance
            }


            // Decoder for [SortIdExtensionName]
            Decoders.addDecoder(clazz: [SortIdExtensionName].self) { (source: AnyObject) -> [SortIdExtensionName] in
                return Decoders.decode(clazz: [SortIdExtensionName].self, source: source)
            }
            // Decoder for SortIdExtensionName
            Decoders.addDecoder(clazz: SortIdExtensionName.self) { (source: AnyObject) -> SortIdExtensionName in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SortIdExtensionName()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance._extension = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["extension"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [SortIdName]
            Decoders.addDecoder(clazz: [SortIdName].self) { (source: AnyObject) -> [SortIdName] in
                return Decoders.decode(clazz: [SortIdName].self, source: source)
            }
            // Decoder for SortIdName
            Decoders.addDecoder(clazz: SortIdName.self) { (source: AnyObject) -> SortIdName in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SortIdName()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [SortIdNamePhoneNumber]
            Decoders.addDecoder(clazz: [SortIdNamePhoneNumber].self) { (source: AnyObject) -> [SortIdNamePhoneNumber] in
                return Decoders.decode(clazz: [SortIdNamePhoneNumber].self, source: source)
            }
            // Decoder for SortIdNamePhoneNumber
            Decoders.addDecoder(clazz: SortIdNamePhoneNumber.self) { (source: AnyObject) -> SortIdNamePhoneNumber in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SortIdNamePhoneNumber()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.phoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone_number"])
                return instance
            }


            // Decoder for [SortIdUpdatedAt]
            Decoders.addDecoder(clazz: [SortIdUpdatedAt].self) { (source: AnyObject) -> [SortIdUpdatedAt] in
                return Decoders.decode(clazz: [SortIdUpdatedAt].self, source: source)
            }
            // Decoder for SortIdUpdatedAt
            Decoders.addDecoder(clazz: SortIdUpdatedAt.self) { (source: AnyObject) -> SortIdUpdatedAt in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SortIdUpdatedAt()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.updatedAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["updated_at"])
                return instance
            }


            // Decoder for [SortListAvailableNumbers]
            Decoders.addDecoder(clazz: [SortListAvailableNumbers].self) { (source: AnyObject) -> [SortListAvailableNumbers] in
                return Decoders.decode(clazz: [SortListAvailableNumbers].self, source: source)
            }
            // Decoder for SortListAvailableNumbers
            Decoders.addDecoder(clazz: SortListAvailableNumbers.self) { (source: AnyObject) -> SortListAvailableNumbers in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SortListAvailableNumbers()
                instance._internal = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["internal"])
                instance.price = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["price"])
                instance.phoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone_number"])
                return instance
            }


            // Decoder for [SortListPhoneNumbersRegions]
            Decoders.addDecoder(clazz: [SortListPhoneNumbersRegions].self) { (source: AnyObject) -> [SortListPhoneNumbersRegions] in
                return Decoders.decode(clazz: [SortListPhoneNumbersRegions].self, source: source)
            }
            // Decoder for SortListPhoneNumbersRegions
            Decoders.addDecoder(clazz: SortListPhoneNumbersRegions.self) { (source: AnyObject) -> SortListPhoneNumbersRegions in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SortListPhoneNumbersRegions()
                instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_code"])
                instance.npa = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["npa"])
                instance.nxx = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nxx"])
                instance.isTollFree = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["is_toll_free"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.provincePostalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["province_postal_code"])
                instance.countryPostalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_postal_code"])
                return instance
            }


            // Decoder for [SortNameNumber]
            Decoders.addDecoder(clazz: [SortNameNumber].self) { (source: AnyObject) -> [SortNameNumber] in
                return Decoders.decode(clazz: [SortNameNumber].self, source: source)
            }
            // Decoder for SortNameNumber
            Decoders.addDecoder(clazz: SortNameNumber.self) { (source: AnyObject) -> SortNameNumber in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SortNameNumber()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.number = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["number"])
                return instance
            }


            // Decoder for [TrunkFull]
            Decoders.addDecoder(clazz: [TrunkFull].self) { (source: AnyObject) -> [TrunkFull] in
                return Decoders.decode(clazz: [TrunkFull].self, source: source)
            }
            // Decoder for TrunkFull
            Decoders.addDecoder(clazz: TrunkFull.self) { (source: AnyObject) -> TrunkFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TrunkFull()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                instance.maxConcurrentCalls = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_concurrent_calls"])
                instance.maxMinutesPerMonth = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_minutes_per_month"])
                instance.greeting = Decoders.decodeOptional(clazz: MediaSummary.self, source: sourceDictionary["greeting"])
                instance.errorMessage = Decoders.decodeOptional(clazz: MediaSummary.self, source: sourceDictionary["error_message"])
                instance.codecs = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["codecs"])
                return instance
            }


            // Decoder for [TrunkSummary]
            Decoders.addDecoder(clazz: [TrunkSummary].self) { (source: AnyObject) -> [TrunkSummary] in
                return Decoders.decode(clazz: [TrunkSummary].self, source: source)
            }
            // Decoder for TrunkSummary
            Decoders.addDecoder(clazz: TrunkSummary.self) { (source: AnyObject) -> TrunkSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TrunkSummary()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [Voicemail]
            Decoders.addDecoder(clazz: [Voicemail].self) { (source: AnyObject) -> [Voicemail] in
                return Decoders.decode(clazz: [Voicemail].self, source: source)
            }
            // Decoder for Voicemail
            Decoders.addDecoder(clazz: Voicemail.self) { (source: AnyObject) -> Voicemail in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Voicemail()
                instance.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"])
                instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"])
                instance.greeting = Decoders.decodeOptional(clazz: Greeting.self, source: sourceDictionary["greeting"])
                instance.attachments = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["attachments"])
                instance.notifications = Decoders.decodeOptional(clazz: Notification.self, source: sourceDictionary["notifications"])
                instance.transcription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["transcription"])
                return instance
            }
        }
    }
}
