/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package swagger

import (
	"net/url"
	"encoding/json"
)

type AvailablenumbersApi struct {
	Configuration Configuration
}

func NewAvailablenumbersApi() *AvailablenumbersApi {
	configuration := NewConfiguration()
	return &AvailablenumbersApi{
		Configuration: *configuration,
	}
}

func NewAvailablenumbersApiWithBasePath(basePath string) *AvailablenumbersApi {
	configuration := NewConfiguration()
	configuration.BasePath = basePath

	return &AvailablenumbersApi{
		Configuration: *configuration,
	}
}

/**
 * 
 * 
 *
 * @param filtersPhoneNumber Phone number filter
 * @param filtersCountryCode Country Code filter
 * @param filtersNpa Area Code filter (North America only)
 * @param filtersNxx 2nd set of 3 digits filter (North America only)
 * @param filtersXxxx NANP XXXX filter
 * @param filtersCity City filter
 * @param filtersProvince State or Province (postal code) filter
 * @param filtersCountry Country (postal code) filter
 * @param filtersPrice Price filter
 * @param filtersCategory Category filter
 * @param filtersIsTollFree Toll-free status filter
 * @param sortInternal Internal (quasi-random) sorting
 * @param sortPrice Price sorting
 * @param sortPhoneNumber Phone number sorting
 * @param limit Max results
 * @param offset Results to skip
 * @param fields Field set
 * @return *ListAvailableNumbersFull
 */
func (a AvailablenumbersApi) ListAvailablePhoneNumbers(filtersPhoneNumber []string, filtersCountryCode []string, filtersNpa []string, filtersNxx []string, filtersXxxx []string, filtersCity []string, filtersProvince []string, filtersCountry []string, filtersPrice []string, filtersCategory []string, filtersIsTollFree []string, sortInternal string, sortPrice string, sortPhoneNumber string, limit int32, offset int32, fields string) (*ListAvailableNumbersFull, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/phone-numbers/available"


	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte
	// authentication '(apiKey)' required
	// set key with prefix in header
	headerParams["Authorization"] = a.Configuration.GetAPIKeyWithPrefix("Authorization")
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}
	var collectionFormat = "multi"
	if collectionFormat == "multi" {
		for _, value := range filtersPhoneNumber {
			queryParams.Add("filters[phone_number]", value)
		}
	} else {
		queryParams.Add("filters[phone_number]", a.Configuration.APIClient.ParameterToString(filtersPhoneNumber, collectionFormat))
	}
		 collectionFormat = "multi"
	if collectionFormat == "multi" {
		for _, value := range filtersCountryCode {
			queryParams.Add("filters[country_code]", value)
		}
	} else {
		queryParams.Add("filters[country_code]", a.Configuration.APIClient.ParameterToString(filtersCountryCode, collectionFormat))
	}
		 collectionFormat = "multi"
	if collectionFormat == "multi" {
		for _, value := range filtersNpa {
			queryParams.Add("filters[npa]", value)
		}
	} else {
		queryParams.Add("filters[npa]", a.Configuration.APIClient.ParameterToString(filtersNpa, collectionFormat))
	}
		 collectionFormat = "multi"
	if collectionFormat == "multi" {
		for _, value := range filtersNxx {
			queryParams.Add("filters[nxx]", value)
		}
	} else {
		queryParams.Add("filters[nxx]", a.Configuration.APIClient.ParameterToString(filtersNxx, collectionFormat))
	}
		collectionFormat = "multi"
	if collectionFormat == "multi" {
		for _, value := range filtersXxxx {
			queryParams.Add("filters[xxxx]", value)
		}
	} else {
		queryParams.Add("filters[xxxx]", a.Configuration.APIClient.ParameterToString(filtersXxxx, collectionFormat))
	}
		 collectionFormat = "multi"
	if collectionFormat == "multi" {
		for _, value := range filtersCity {
			queryParams.Add("filters[city]", value)
		}
	} else {
		queryParams.Add("filters[city]", a.Configuration.APIClient.ParameterToString(filtersCity, collectionFormat))
	}
		 collectionFormat = "multi"
	if collectionFormat == "multi" {
		for _, value := range filtersProvince {
			queryParams.Add("filters[province]", value)
		}
	} else {
		queryParams.Add("filters[province]", a.Configuration.APIClient.ParameterToString(filtersProvince, collectionFormat))
	}
		 collectionFormat = "multi"
	if collectionFormat == "multi" {
		for _, value := range filtersCountry {
			queryParams.Add("filters[country]", value)
		}
	} else {
		queryParams.Add("filters[country]", a.Configuration.APIClient.ParameterToString(filtersCountry, collectionFormat))
	}
		 collectionFormat = "multi"
	if collectionFormat == "multi" {
		for _, value := range filtersPrice {
			queryParams.Add("filters[price]", value)
		}
	} else {
		queryParams.Add("filters[price]", a.Configuration.APIClient.ParameterToString(filtersPrice, collectionFormat))
	}
		collectionFormat = "multi"
	if collectionFormat == "multi" {
		for _, value := range filtersCategory {
			queryParams.Add("filters[category]", value)
		}
	} else {
		queryParams.Add("filters[category]", a.Configuration.APIClient.ParameterToString(filtersCategory, collectionFormat))
	}
		 collectionFormat = "multi"
	if collectionFormat == "multi" {
		for _, value := range filtersIsTollFree {
			queryParams.Add("filters[is_toll_free]", value)
		}
	} else {
		queryParams.Add("filters[is_toll_free]", a.Configuration.APIClient.ParameterToString(filtersIsTollFree, collectionFormat))
	}
			queryParams.Add("sort[internal]", a.Configuration.APIClient.ParameterToString(sortInternal, ""))
			queryParams.Add("sort[price]", a.Configuration.APIClient.ParameterToString(sortPrice, ""))
			queryParams.Add("sort[phone_number]", a.Configuration.APIClient.ParameterToString(sortPhoneNumber, ""))
			queryParams.Add("limit", a.Configuration.APIClient.ParameterToString(limit, ""))
			queryParams.Add("offset", a.Configuration.APIClient.ParameterToString(offset, ""))
			queryParams.Add("fields", a.Configuration.APIClient.ParameterToString(fields, ""))
	

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}
	var successPayload = new(ListAvailableNumbersFull)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

