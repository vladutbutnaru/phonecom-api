/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package swagger

import (
	"net/url"
	"encoding/json"
)

type NumberregionsApi struct {
	Configuration Configuration
}

func NewNumberregionsApi() *NumberregionsApi {
	configuration := NewConfiguration()
	return &NumberregionsApi{
		Configuration: *configuration,
	}
}

func NewNumberregionsApiWithBasePath(basePath string) *NumberregionsApi {
	configuration := NewConfiguration()
	configuration.BasePath = basePath

	return &NumberregionsApi{
		Configuration: *configuration,
	}
}

/**
 * 
 * This service lists the quantities of available phone numbers by region.
 *
 * @param filtersCountryCode Country Code filter
 * @param filtersNpa Area Code filter (North America only)
 * @param filtersNxx 2nd set of 3 digits filter (North America only)
 * @param filtersIsTollFree Toll-free status filter
 * @param filtersCity City filter
 * @param filtersProvincePostalCode State or Province filter
 * @param filtersCountryPostalCode Country filter
 * @param sortCountryCode International calling code sorting
 * @param sortNpa Area Code sorting (North America only)
 * @param sortNxx 2nd set of 3 digits sorting (North America)
 * @param sortIsTollFree Toll Free status sorting
 * @param sortCity City sorting
 * @param sortProvincePostalCode State or Province sorting
 * @param sortCountryPostalCode Country sorting
 * @param limit Max results
 * @param offset Results to skip
 * @param fields Field set
 * @param groupBy Fields to group by (supports the same set of fields as the filters and sorting)
 * @return *ListPhoneNumbersRegionsFull
 */
func (a NumberregionsApi) ListAvailablePhoneNumberRegions(filtersCountryCode []string, filtersNpa []string, filtersNxx []string, filtersIsTollFree []string, filtersCity []string, filtersProvincePostalCode []string, filtersCountryPostalCode []string, sortCountryCode string, sortNpa string, sortNxx string, sortIsTollFree string, sortCity string, sortProvincePostalCode string, sortCountryPostalCode string, limit int32, offset int32, fields string, groupBy []string) (*ListPhoneNumbersRegionsFull, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/phone-numbers/available/regions"


	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte
	// authentication '(apiKey)' required
	// set key with prefix in header
	headerParams["Authorization"] = a.Configuration.GetAPIKeyWithPrefix("Authorization")
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}
	var collectionFormat = "multi"
	if collectionFormat == "multi" {
		for _, value := range filtersCountryCode {
			queryParams.Add("filters[country_code]", value)
		}
	} else {
		queryParams.Add("filters[country_code]", a.Configuration.APIClient.ParameterToString(filtersCountryCode, collectionFormat))
	}
		collectionFormat = "multi"
	if collectionFormat == "multi" {
		for _, value := range filtersNpa {
			queryParams.Add("filters[npa]", value)
		}
	} else {
		queryParams.Add("filters[npa]", a.Configuration.APIClient.ParameterToString(filtersNpa, collectionFormat))
	}
		collectionFormat = "multi"
	if collectionFormat == "multi" {
		for _, value := range filtersNxx {
			queryParams.Add("filters[nxx]", value)
		}
	} else {
		queryParams.Add("filters[nxx]", a.Configuration.APIClient.ParameterToString(filtersNxx, collectionFormat))
	}
		collectionFormat = "multi"
	if collectionFormat == "multi" {
		for _, value := range filtersIsTollFree {
			queryParams.Add("filters[is_toll_free]", value)
		}
	} else {
		queryParams.Add("filters[is_toll_free]", a.Configuration.APIClient.ParameterToString(filtersIsTollFree, collectionFormat))
	}
		collectionFormat = "multi"
	if collectionFormat == "multi" {
		for _, value := range filtersCity {
			queryParams.Add("filters[city]", value)
		}
	} else {
		queryParams.Add("filters[city]", a.Configuration.APIClient.ParameterToString(filtersCity, collectionFormat))
	}
		collectionFormat = "multi"
	if collectionFormat == "multi" {
		for _, value := range filtersProvincePostalCode {
			queryParams.Add("filters[province_postal_code]", value)
		}
	} else {
		queryParams.Add("filters[province_postal_code]", a.Configuration.APIClient.ParameterToString(filtersProvincePostalCode, collectionFormat))
	}
		collectionFormat = "multi"
	if collectionFormat == "multi" {
		for _, value := range filtersCountryPostalCode {
			queryParams.Add("filters[country_postal_code]", value)
		}
	} else {
		queryParams.Add("filters[country_postal_code]", a.Configuration.APIClient.ParameterToString(filtersCountryPostalCode, collectionFormat))
	}
			queryParams.Add("sort[country_code]", a.Configuration.APIClient.ParameterToString(sortCountryCode, ""))
			queryParams.Add("sort[npa]", a.Configuration.APIClient.ParameterToString(sortNpa, ""))
			queryParams.Add("sort[nxx]", a.Configuration.APIClient.ParameterToString(sortNxx, ""))
			queryParams.Add("sort[is_toll_free]", a.Configuration.APIClient.ParameterToString(sortIsTollFree, ""))
			queryParams.Add("sort[city]", a.Configuration.APIClient.ParameterToString(sortCity, ""))
			queryParams.Add("sort[province_postal_code]", a.Configuration.APIClient.ParameterToString(sortProvincePostalCode, ""))
			queryParams.Add("sort[country_postal_code]", a.Configuration.APIClient.ParameterToString(sortCountryPostalCode, ""))
			queryParams.Add("limit", a.Configuration.APIClient.ParameterToString(limit, ""))
			queryParams.Add("offset", a.Configuration.APIClient.ParameterToString(offset, ""))
			queryParams.Add("fields", a.Configuration.APIClient.ParameterToString(fields, ""))
		collectionFormat = "csv"
	if collectionFormat == "multi" {
		for _, value := range groupBy {
			queryParams.Add("group_by", value)
		}
	} else {
		queryParams.Add("group_by", a.Configuration.APIClient.ParameterToString(groupBy, collectionFormat))
	}
	

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}
	var successPayload = new(ListPhoneNumbersRegionsFull)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

