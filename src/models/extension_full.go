package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExtensionFull The Full Extension Object has the same properties as the Extension Summary Object, along with the following:
// swagger:model ExtensionFull
type ExtensionFull struct {

	// Call Notifications Object. See below for details.
	// Required: true
	CallNotifications *Notification `json:"call_notifications"`

	// Phone number to use as Caller ID for outgoing calls. Must be a phone number belonging to this account, or one of any additional authorized phone numbers. You can use our List Caller Ids service to see a current list. To unassign, you may set this to "private", NULL, or an empty string.
	// Required: true
	CallerID *string `json:"caller_id"`

	// device membership
	DeviceMembership *DeviceMembership `json:"device_membership,omitempty"`

	// Whether Call Waiting is enabled. Boolean. Default is TRUE.
	// Required: true
	EnableCallWaiting *bool `json:"enable_call_waiting"`

	// Whether outgoing calls are enabled. Boolean. Default is TRUE.
	// Required: true
	EnableOutboundCalls *bool `json:"enable_outbound_calls"`

	// Extension number that callers may dial. On POST, leaving this empty will result in an auto-generated value. On PUT, this field is required.
	// Required: true
	Extension *int64 `json:"extension"`

	// Full name of the individual or department to which this extension is assigned
	// Required: true
	FullName *string `json:"full_name"`

	// ID of the extension. This is the internal Phone.com ID, not the extension number callers may dial.
	// Required: true
	ID *int64 `json:"id"`

	// Whether this extension should be included in the dial-by-name directory for this account. Boolean.
	// Required: true
	IncludeInDirectory *bool `json:"include_in_directory"`

	// For outbound calls, this is the North American area code that this extension is calling from.
	// Required: true
	LocalAreaCode *string `json:"local_area_code"`

	// User-supplied name for the extension. On POST, leaving this empty will result in an auto-generated value. On PUT, this field is required.
	// Required: true
	Name *string `json:"name"`

	// Greeting that communicates the extension's name. Output is a Greeting Summary Object. Input must be a Greeting Lookup Object.
	// Required: true
	NameGreeting *MediaSummary `json:"name_greeting"`

	// Route which will handle incoming voice and fax calls. Only valid on PUT requests, not POST. Output is a Route Summary Object if the route is named, otherwise the Full Route Object will be shown. Input must be a Route Lookup Object pointing to a named route. Route must belong to this extension already.
	Route *RouteSummary `json:"route,omitempty"`

	// Time zone. Can be in any commonly recognized format, such as "America/Los_Angeles".
	// Required: true
	Timezone *string `json:"timezone"`

	// Can be "limited" or "unlimited". In most cases, changing this will affect your monthly bill. Please see our Control Panel or contact Customer Service for pricing.
	// Required: true
	UsageType *string `json:"usage_type"`

	// voicemail
	// Required: true
	Voicemail *Voicemail `json:"voicemail"`
}

// Validate validates this extension full
func (m *ExtensionFull) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCallNotifications(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCallerID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDeviceMembership(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEnableCallWaiting(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEnableOutboundCalls(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateExtension(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFullName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIncludeInDirectory(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLocalAreaCode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNameGreeting(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRoute(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTimezone(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUsageType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVoicemail(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExtensionFull) validateCallNotifications(formats strfmt.Registry) error {

	if err := validate.Required("call_notifications", "body", m.CallNotifications); err != nil {
		return err
	}

	if m.CallNotifications != nil {

		if err := m.CallNotifications.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("call_notifications")
			}
			return err
		}
	}

	return nil
}

func (m *ExtensionFull) validateCallerID(formats strfmt.Registry) error {

	if err := validate.Required("caller_id", "body", m.CallerID); err != nil {
		return err
	}

	return nil
}

func (m *ExtensionFull) validateDeviceMembership(formats strfmt.Registry) error {

	if swag.IsZero(m.DeviceMembership) { // not required
		return nil
	}

	if m.DeviceMembership != nil {

		if err := m.DeviceMembership.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device_membership")
			}
			return err
		}
	}

	return nil
}

func (m *ExtensionFull) validateEnableCallWaiting(formats strfmt.Registry) error {

	if err := validate.Required("enable_call_waiting", "body", m.EnableCallWaiting); err != nil {
		return err
	}

	return nil
}

func (m *ExtensionFull) validateEnableOutboundCalls(formats strfmt.Registry) error {

	if err := validate.Required("enable_outbound_calls", "body", m.EnableOutboundCalls); err != nil {
		return err
	}

	return nil
}

func (m *ExtensionFull) validateExtension(formats strfmt.Registry) error {

	if err := validate.Required("extension", "body", m.Extension); err != nil {
		return err
	}

	return nil
}

func (m *ExtensionFull) validateFullName(formats strfmt.Registry) error {

	if err := validate.Required("full_name", "body", m.FullName); err != nil {
		return err
	}

	return nil
}

func (m *ExtensionFull) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ExtensionFull) validateIncludeInDirectory(formats strfmt.Registry) error {

	if err := validate.Required("include_in_directory", "body", m.IncludeInDirectory); err != nil {
		return err
	}

	return nil
}

func (m *ExtensionFull) validateLocalAreaCode(formats strfmt.Registry) error {

	if err := validate.Required("local_area_code", "body", m.LocalAreaCode); err != nil {
		return err
	}

	return nil
}

func (m *ExtensionFull) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ExtensionFull) validateNameGreeting(formats strfmt.Registry) error {

	if err := validate.Required("name_greeting", "body", m.NameGreeting); err != nil {
		return err
	}

	if m.NameGreeting != nil {

		if err := m.NameGreeting.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("name_greeting")
			}
			return err
		}
	}

	return nil
}

func (m *ExtensionFull) validateRoute(formats strfmt.Registry) error {

	if swag.IsZero(m.Route) { // not required
		return nil
	}

	if m.Route != nil {

		if err := m.Route.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("route")
			}
			return err
		}
	}

	return nil
}

func (m *ExtensionFull) validateTimezone(formats strfmt.Registry) error {

	if err := validate.Required("timezone", "body", m.Timezone); err != nil {
		return err
	}

	return nil
}

func (m *ExtensionFull) validateUsageType(formats strfmt.Registry) error {

	if err := validate.Required("usage_type", "body", m.UsageType); err != nil {
		return err
	}

	return nil
}

func (m *ExtensionFull) validateVoicemail(formats strfmt.Registry) error {

	if err := validate.Required("voicemail", "body", m.Voicemail); err != nil {
		return err
	}

	if m.Voicemail != nil {

		if err := m.Voicemail.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("voicemail")
			}
			return err
		}
	}

	return nil
}
