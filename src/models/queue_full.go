package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QueueFull The Full QueueObject has the same properties as the Queue Summary Object, along with the following:
// swagger:model QueueFull
type QueueFull struct {

	// Caller id type to show members. If provided, must equal one of: 'called_number', 'calling_number'. Default is 'calling_number'.
	CallerIDType string `json:"caller_id_type,omitempty"`

	// Greeting to be played when caller first connects. Output is a Media Summary Object. Input must be a Media Lookup Object. Must refer to a media recording that has is_hold_music set to FALSE. Can be set to NULL to disable the greeting.
	Greeting *MediaSummary `json:"greeting,omitempty"`

	// hold music
	HoldMusic *HoldMusic `json:"hold_music,omitempty"`

	// Integer ID. Read-only.
	// Required: true
	ID *int64 `json:"id"`

	// Maximum hold time in seconds. If provided, must equal one of: 60, 120, 180, 240, 300, 600, 900, 1200, 1800, 2700, 3600. Default is 300.
	MaxHoldTime int64 `json:"max_hold_time,omitempty"`

	// members
	Members Members `json:"members"`

	// Name. Required.
	// Required: true
	Name *string `json:"name"`

	// Number of seconds to ring a member before cycling to the next member. If provided, must equal one of: 5, 10, 15, 20, 25, 30. Default is 5.
	RingTime int64 `json:"ring_time,omitempty"`
}

// Validate validates this queue full
func (m *QueueFull) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGreeting(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHoldMusic(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueueFull) validateGreeting(formats strfmt.Registry) error {

	if swag.IsZero(m.Greeting) { // not required
		return nil
	}

	if m.Greeting != nil {

		if err := m.Greeting.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("greeting")
			}
			return err
		}
	}

	return nil
}

func (m *QueueFull) validateHoldMusic(formats strfmt.Registry) error {

	if swag.IsZero(m.HoldMusic) { // not required
		return nil
	}

	if m.HoldMusic != nil {

		if err := m.HoldMusic.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hold_music")
			}
			return err
		}
	}

	return nil
}

func (m *QueueFull) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *QueueFull) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}
