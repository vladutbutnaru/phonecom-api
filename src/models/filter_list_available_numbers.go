package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// FilterListAvailableNumbers filter list available numbers
// swagger:model FilterListAvailableNumbers
type FilterListAvailableNumbers struct {

	// category
	Category []string `json:"category"`

	// city
	City []string `json:"city"`

	// country
	Country []string `json:"country"`

	// country code
	CountryCode []string `json:"country_code"`

	// npa
	Npa []int64 `json:"npa"`

	// nxx
	Nxx []string `json:"nxx"`

	// phone number
	PhoneNumber []string `json:"phone_number"`

	// price
	Price []string `json:"price"`

	// province
	Province []string `json:"province"`

	// xxxx
	Xxxx []string `json:"xxxx"`
}

// Validate validates this filter list available numbers
func (m *FilterListAvailableNumbers) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCity(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCountryCode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNpa(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNxx(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePhoneNumber(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProvince(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateXxxx(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FilterListAvailableNumbers) validateCategory(formats strfmt.Registry) error {

	if swag.IsZero(m.Category) { // not required
		return nil
	}

	return nil
}

func (m *FilterListAvailableNumbers) validateCity(formats strfmt.Registry) error {

	if swag.IsZero(m.City) { // not required
		return nil
	}

	return nil
}

func (m *FilterListAvailableNumbers) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(m.Country) { // not required
		return nil
	}

	return nil
}

func (m *FilterListAvailableNumbers) validateCountryCode(formats strfmt.Registry) error {

	if swag.IsZero(m.CountryCode) { // not required
		return nil
	}

	return nil
}

func (m *FilterListAvailableNumbers) validateNpa(formats strfmt.Registry) error {

	if swag.IsZero(m.Npa) { // not required
		return nil
	}

	return nil
}

func (m *FilterListAvailableNumbers) validateNxx(formats strfmt.Registry) error {

	if swag.IsZero(m.Nxx) { // not required
		return nil
	}

	return nil
}

func (m *FilterListAvailableNumbers) validatePhoneNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.PhoneNumber) { // not required
		return nil
	}

	return nil
}

func (m *FilterListAvailableNumbers) validatePrice(formats strfmt.Registry) error {

	if swag.IsZero(m.Price) { // not required
		return nil
	}

	return nil
}

func (m *FilterListAvailableNumbers) validateProvince(formats strfmt.Registry) error {

	if swag.IsZero(m.Province) { // not required
		return nil
	}

	return nil
}

func (m *FilterListAvailableNumbers) validateXxxx(formats strfmt.Registry) error {

	if swag.IsZero(m.Xxxx) { // not required
		return nil
	}

	return nil
}
