package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Voicemail Voicemail Object. See below for details.
// swagger:model Voicemail
type Voicemail struct {

	// If notification emails are being used, this defines the format of the audio attachments. Can be "wav" for WAV format, "mp3" for MP3 format, or NULL to disable attachments.
	Attachments string `json:"attachments,omitempty"`

	// Whether voicemail is enabled. Boolean.
	Enabled bool `json:"enabled,omitempty"`

	// greeting
	Greeting *Greeting `json:"greeting,omitempty"`

	// Voicemail Notifications Object. See below for details. Can be set to NULL to disable notifications.
	Notifications *Notification `json:"notifications,omitempty"`

	// Password for accessing voicemail box. Must be digits only.
	Password string `json:"password,omitempty"`

	// Type of voicemail transcription to use. Can be "human" for high-quality manual transcriptions by human operators, "automated" for machine-generated transcriptions, or NULL to omit trancriptions. Changing this option will affect your monthly bill. Please see our Control Panel or contact Customer Service for details.
	Transcription string `json:"transcription,omitempty"`
}

// Validate validates this voicemail
func (m *Voicemail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGreeting(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNotifications(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Voicemail) validateGreeting(formats strfmt.Registry) error {

	if swag.IsZero(m.Greeting) { // not required
		return nil
	}

	if m.Greeting != nil {

		if err := m.Greeting.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("greeting")
			}
			return err
		}
	}

	return nil
}

func (m *Voicemail) validateNotifications(formats strfmt.Registry) error {

	if swag.IsZero(m.Notifications) { // not required
		return nil
	}

	if m.Notifications != nil {

		if err := m.Notifications.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("notifications")
			}
			return err
		}
	}

	return nil
}
