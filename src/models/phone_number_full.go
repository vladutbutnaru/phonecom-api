package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// PhoneNumberFull The Full Phone Number Object has all of the properties of the Phone Number Summary Object, along with several more, as shown below:
// swagger:model PhoneNumberFull
type PhoneNumberFull struct {

	// Whether to block anonymous calls. Boolean.
	BlockAnonymous bool `json:"block_anonymous,omitempty"`

	// Whether to block incoming calls. Boolean.
	BlockIncoming bool `json:"block_incoming,omitempty"`

	// call notifications
	CallNotifications *CallNotifications `json:"call_notifications,omitempty"`

	// Caller ID Object, or NULL
	CallerID *CallerIDPhoneNumber `json:"caller_id,omitempty"`

	// Integer Phone number ID. This is the internal Phone.com ID for this number, not the phone number itself. Read-only.
	ID int64 `json:"id,omitempty"`

	// Name
	Name string `json:"name,omitempty"`

	// Phone number, in E.164 format
	PhoneNumber string `json:"phone_number,omitempty"`

	// The Route assigned to handle incoming calls for this number, if any. Output is a Route Summary Object, or NULL if not set. Input can be a Route Lookup Object or NULL to unset.
	Route *RouteSummary `json:"route,omitempty"`

	// SMS Forwarding Object, or NULL
	SmsForwarding *SmsForwarding `json:"sms_forwarding,omitempty"`
}

// Validate validates this phone number full
func (m *PhoneNumberFull) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCallNotifications(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCallerID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRoute(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSmsForwarding(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PhoneNumberFull) validateCallNotifications(formats strfmt.Registry) error {

	if swag.IsZero(m.CallNotifications) { // not required
		return nil
	}

	if m.CallNotifications != nil {

		if err := m.CallNotifications.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("call_notifications")
			}
			return err
		}
	}

	return nil
}

func (m *PhoneNumberFull) validateCallerID(formats strfmt.Registry) error {

	if swag.IsZero(m.CallerID) { // not required
		return nil
	}

	if m.CallerID != nil {

		if err := m.CallerID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("caller_id")
			}
			return err
		}
	}

	return nil
}

func (m *PhoneNumberFull) validateRoute(formats strfmt.Registry) error {

	if swag.IsZero(m.Route) { // not required
		return nil
	}

	if m.Route != nil {

		if err := m.Route.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("route")
			}
			return err
		}
	}

	return nil
}

func (m *PhoneNumberFull) validateSmsForwarding(formats strfmt.Registry) error {

	if swag.IsZero(m.SmsForwarding) { // not required
		return nil
	}

	if m.SmsForwarding != nil {

		if err := m.SmsForwarding.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sms_forwarding")
			}
			return err
		}
	}

	return nil
}
