package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// AccountFull The Full Account Object includes all of the properties in the Account Summary Object, along with the following:
// swagger:model AccountFull
type AccountFull struct {

	// Contact Object for billing purposes. See below for details.
	BillingContact *ContactAccount `json:"billing_contact,omitempty"`

	// Contact Object. See below for details.
	Contact *ContactAccount `json:"contact,omitempty"`

	// Account ID. Sometimes referred to as "Voip ID" or "voip_id".
	ID int64 `json:"id,omitempty"`

	// If this account is a subaccount, this property shows the master account that it belongs to. Otherwise it is NULL. Read-only. Output is an Account Summary Object.
	MasterAccount *AccountSummary `json:"master_account,omitempty"`

	// Name on the account. Read-only.
	Name string `json:"name,omitempty"`

	// Account password. For security reason, this is masked as "**"
	Password string `json:"password,omitempty"`

	// Account user name
	Username string `json:"username,omitempty"`
}

// Validate validates this account full
func (m *AccountFull) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBillingContact(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateContact(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMasterAccount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountFull) validateBillingContact(formats strfmt.Registry) error {

	if swag.IsZero(m.BillingContact) { // not required
		return nil
	}

	if m.BillingContact != nil {

		if err := m.BillingContact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billing_contact")
			}
			return err
		}
	}

	return nil
}

func (m *AccountFull) validateContact(formats strfmt.Registry) error {

	if swag.IsZero(m.Contact) { // not required
		return nil
	}

	if m.Contact != nil {

		if err := m.Contact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contact")
			}
			return err
		}
	}

	return nil
}

func (m *AccountFull) validateMasterAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.MasterAccount) { // not required
		return nil
	}

	if m.MasterAccount != nil {

		if err := m.MasterAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("master_account")
			}
			return err
		}
	}

	return nil
}
