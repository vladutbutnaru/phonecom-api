package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// MenuFull The Full Menu Object contains the same properties as the Menu Summary Object, along with the following:
// swagger:model MenuFull
type MenuFull struct {

	// Boolean. Determines whether a caller can enter an extension number to bypass the menu.
	AllowExtensionDial bool `json:"allow_extension_dial,omitempty"`

	// Greeting that is played when a caller enters a menu. Output is a Media Summary Object. Input must be a Media Lookup Object. Must refer to a media recording that has is_hold_music set to FALSE.
	Greeting *MediaSummary `json:"greeting,omitempty"`

	// Integer Menu ID. Read-only.
	ID int64 `json:"id,omitempty"`

	// Message that is played when the caller makes a keypress error. Output is a Media Summary Object. Input must be a Media Lookup Object. Must refer to a media recording that has is_hold_music set to FALSE.
	KeypressError *MediaSummary `json:"keypress_error,omitempty"`

	// Boolean. Determines whether a caller can enter an extension number to bypass the menu.
	KeypressWaitTime int64 `json:"keypress_wait_time,omitempty"`

	// Name. Required. Unique.
	Name string `json:"name,omitempty"`

	// options
	Options OptionsListMenus `json:"options"`

	// Route that will be entered when the caller fails to choose a menu option within the allotted time. Output is a Route Summary Object if the route is named, otherwise the Full Route Object will be shown. Input must be a Route Lookup Object pointing to a named route.
	TimeoutHandler *RouteSummary `json:"timeout_handler,omitempty"`
}

// Validate validates this menu full
func (m *MenuFull) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGreeting(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateKeypressError(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTimeoutHandler(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MenuFull) validateGreeting(formats strfmt.Registry) error {

	if swag.IsZero(m.Greeting) { // not required
		return nil
	}

	if m.Greeting != nil {

		if err := m.Greeting.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("greeting")
			}
			return err
		}
	}

	return nil
}

func (m *MenuFull) validateKeypressError(formats strfmt.Registry) error {

	if swag.IsZero(m.KeypressError) { // not required
		return nil
	}

	if m.KeypressError != nil {

		if err := m.KeypressError.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keypress_error")
			}
			return err
		}
	}

	return nil
}

func (m *MenuFull) validateTimeoutHandler(formats strfmt.Registry) error {

	if swag.IsZero(m.TimeoutHandler) { // not required
		return nil
	}

	if m.TimeoutHandler != nil {

		if err := m.TimeoutHandler.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeout_handler")
			}
			return err
		}
	}

	return nil
}
