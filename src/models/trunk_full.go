package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// TrunkFull The Full Trunk Object is identical to the Trunk Summary Object, along with the following:
// swagger:model TrunkFull
type TrunkFull struct {

	// Custom audio codec configuration, if any is needed. If provided, must be a simple array containing the prioritized list of desired codecs. Supported codecs are: g711u 64k, g711u 56k, g711a 64k, g711a 56k, g7231, g728, g729, g729A, g729B, g729AB, gms full, rfc2833, t38, ilbc, h263, g722, g722_1, g729D, g729E, amr, amr_wb, efr, evrc, h264, mpeg4, red, cng, SIP Info to 2833
	// Required: true
	Codecs []string `json:"codecs"`

	// Error Message. Output is a Media Summary Object. Input must be a Media Lookup Object. Must refer to a media recording that has is_hold_music set to FALSE.
	// Required: true
	ErrorMessage *MediaSummary `json:"error_message"`

	// Greeting. Output is a Media Summary Object. Input must be a Media Lookup Object. Must refer to a media recording that has is_hold_music set to FALSE.
	// Required: true
	Greeting *MediaSummary `json:"greeting"`

	// Integer Trunk ID. Read-only.
	// Required: true
	ID *int64 `json:"id"`

	// Max concurrent calls. Default is 10.
	// Required: true
	MaxConcurrentCalls *int64 `json:"max_concurrent_calls"`

	// Max minutes per month. Default is 750.
	// Required: true
	MaxMinutesPerMonth *int64 `json:"max_minutes_per_month"`

	// Name. Required.
	// Required: true
	Name *string `json:"name"`

	// Fully-qualified SIP URI. Required.
	// Required: true
	URI *string `json:"uri"`
}

// Validate validates this trunk full
func (m *TrunkFull) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCodecs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateErrorMessage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGreeting(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMaxConcurrentCalls(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMaxMinutesPerMonth(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateURI(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrunkFull) validateCodecs(formats strfmt.Registry) error {

	if err := validate.Required("codecs", "body", m.Codecs); err != nil {
		return err
	}

	return nil
}

func (m *TrunkFull) validateErrorMessage(formats strfmt.Registry) error {

	if err := validate.Required("error_message", "body", m.ErrorMessage); err != nil {
		return err
	}

	if m.ErrorMessage != nil {

		if err := m.ErrorMessage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error_message")
			}
			return err
		}
	}

	return nil
}

func (m *TrunkFull) validateGreeting(formats strfmt.Registry) error {

	if err := validate.Required("greeting", "body", m.Greeting); err != nil {
		return err
	}

	if m.Greeting != nil {

		if err := m.Greeting.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("greeting")
			}
			return err
		}
	}

	return nil
}

func (m *TrunkFull) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *TrunkFull) validateMaxConcurrentCalls(formats strfmt.Registry) error {

	if err := validate.Required("max_concurrent_calls", "body", m.MaxConcurrentCalls); err != nil {
		return err
	}

	return nil
}

func (m *TrunkFull) validateMaxMinutesPerMonth(formats strfmt.Registry) error {

	if err := validate.Required("max_minutes_per_month", "body", m.MaxMinutesPerMonth); err != nil {
		return err
	}

	return nil
}

func (m *TrunkFull) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *TrunkFull) validateURI(formats strfmt.Registry) error {

	if err := validate.Required("uri", "body", m.URI); err != nil {
		return err
	}

	return nil
}
