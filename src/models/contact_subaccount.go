package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContactSubaccount contact subaccount
// swagger:model ContactSubaccount
type ContactSubaccount struct {

	// address
	Address *Address `json:"address,omitempty"`

	// Alternate email address
	AlternateEmail string `json:"alternate_email,omitempty"`

	// Company name
	Company string `json:"company,omitempty"`

	// Fax number
	Fax string `json:"fax,omitempty"`

	// Contact name
	// Required: true
	Name *string `json:"name"`

	// Phone number. Required.
	// Required: true
	Phone *string `json:"phone"`

	// Primary email address. Required.
	// Required: true
	PrimaryEmail *string `json:"primary_email"`
}

// Validate validates this contact subaccount
func (m *ContactSubaccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePhone(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePrimaryEmail(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContactSubaccount) validateAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {

		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *ContactSubaccount) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ContactSubaccount) validatePhone(formats strfmt.Registry) error {

	if err := validate.Required("phone", "body", m.Phone); err != nil {
		return err
	}

	return nil
}

func (m *ContactSubaccount) validatePrimaryEmail(formats strfmt.Registry) error {

	if err := validate.Required("primary_email", "body", m.PrimaryEmail); err != nil {
		return err
	}

	return nil
}
