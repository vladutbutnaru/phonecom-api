package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Greeting Voicemail Greeting Object. See below for details. Can be set to NULL to reset greeting options.
// swagger:model Greeting
type Greeting struct {

	// Greeting to be played when type="alternate". Output is a Greeting Summary Object. Input must be a Greeting Lookup Object.
	Alternate *MediaSummary `json:"alternate,omitempty"`

	// Whether to prompt the caller with the following words after the voicemail greeting has been played: "Please leave your message after the tone. When finished, hang up or press the pound key." Boolean.
	EnableLeaveMessagePrompt bool `json:"enable_leave_message_prompt,omitempty"`

	// Greeting to be played when type="standard". Output is a Greeting Summary Object. Input must be a Greeting Lookup Object.
	Standard *MediaSummary `json:"standard,omitempty"`

	// The greeting to play. Can be "name" for the name_greeting as described above, "standard" for the standard greeting, or "alternate" for an alternate greeting. See below for details.
	Type string `json:"type,omitempty"`
}

// Validate validates this greeting
func (m *Greeting) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlternate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStandard(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Greeting) validateAlternate(formats strfmt.Registry) error {

	if swag.IsZero(m.Alternate) { // not required
		return nil
	}

	if m.Alternate != nil {

		if err := m.Alternate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alternate")
			}
			return err
		}
	}

	return nil
}

func (m *Greeting) validateStandard(formats strfmt.Registry) error {

	if swag.IsZero(m.Standard) { // not required
		return nil
	}

	if m.Standard != nil {

		if err := m.Standard.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standard")
			}
			return err
		}
	}

	return nil
}
